{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"account-cli/","text":"getnewaccount Usage: mvs-cli getnewaccount [-h][--language value] ACCOUNTNAME ACCOUNTAUTH Info: Generate a new account from this wallet. Options (named): -h [--help] Get a description and instructions for this command. -l [--language] Options are 'en', 'es', 'ja', 'zh_Hans', 'zh_Hant' and 'any', defaults to 'en'. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. validateaddress Usage: mvs-cli validateaddress [-h][payment_address] Info: validateaddress Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): PAYMENT_ADDRESS Valid payment address. If not specified the address is read from STDIN. importaccount Usage: mvs-cli importaccount [-h] --accountname value --password value [--hd_index value][--language value] WORD Info: importaccount Options (named): -h [--help] Get a description and instructions for this command. -i [--hd_index] Teh HD index for the account. -l [--language] The language identifier of the dictionary of the mnemonic. Options are 'en', 'es', 'ja', 'zh_Hans', 'zh_Hant' and 'any', defaults to 'any'. -n [--accountname] Account name required. -p [--password] Account password(authorization) required. Arguments (positional): WORD The set of words that that make up the mnemonic. If not specified the words are read from STDIN. importkeyfile Usage: mvs-cli importkeyfile [-h] FILE Info: importkeyfile Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): FILE account info file path dumpkeyfile Usage: mvs-cli dumpkeyfile [-h] ACCOUNTNAME ACCOUNTAUTH LASTWORD [DESTINATION] Info: dumpkeyfile Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. LASTWORD The last word of your master private-key phrase. DESTINATION The keyfile storage path to. getnewaddress Usage: mvs-cli getnewaddress [-h][--number value] ACCOUNTNAME ACCOUNTAUTH Info: Generate new address for this account. Options (named): -h [--help] Get a description and instructions for this command. -n [--number] The address count. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. listaddresses Usage: mvs-cli listaddresses [-h] ACCOUNTNAME ACCOUNTAUTH Info: List available addresses of this account. Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. changepasswd Usage: mvs-cli changepasswd [-h] --password value ACCOUNTNAME ACCOUNTAUTH Info: changepasswd Options (named): -h [--help] Get a description and instructions for this command. -p [--password] The new password. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. deleteaccount Usage: mvs-cli deleteaccount [-h] ACCOUNTNAME ACCOUNTAUTH LASTWORD Info: deleteaccount Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. LASTWORD The last word of your private-key phrase. getaccount Usage: mvs-cli getaccount [-h] ACCOUNTNAME ACCOUNTAUTH LASTWORD Info: Show account details Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. LASTWORD The last word of your backup words.","title":"Account"},{"location":"account-cli/#getnewaccount","text":"Usage: mvs-cli getnewaccount [-h][--language value] ACCOUNTNAME ACCOUNTAUTH Info: Generate a new account from this wallet. Options (named): -h [--help] Get a description and instructions for this command. -l [--language] Options are 'en', 'es', 'ja', 'zh_Hans', 'zh_Hant' and 'any', defaults to 'en'. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required.","title":"getnewaccount"},{"location":"account-cli/#validateaddress","text":"Usage: mvs-cli validateaddress [-h][payment_address] Info: validateaddress Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): PAYMENT_ADDRESS Valid payment address. If not specified the address is read from STDIN.","title":"validateaddress"},{"location":"account-cli/#importaccount","text":"Usage: mvs-cli importaccount [-h] --accountname value --password value [--hd_index value][--language value] WORD Info: importaccount Options (named): -h [--help] Get a description and instructions for this command. -i [--hd_index] Teh HD index for the account. -l [--language] The language identifier of the dictionary of the mnemonic. Options are 'en', 'es', 'ja', 'zh_Hans', 'zh_Hant' and 'any', defaults to 'any'. -n [--accountname] Account name required. -p [--password] Account password(authorization) required. Arguments (positional): WORD The set of words that that make up the mnemonic. If not specified the words are read from STDIN.","title":"importaccount"},{"location":"account-cli/#importkeyfile","text":"Usage: mvs-cli importkeyfile [-h] FILE Info: importkeyfile Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): FILE account info file path","title":"importkeyfile"},{"location":"account-cli/#dumpkeyfile","text":"Usage: mvs-cli dumpkeyfile [-h] ACCOUNTNAME ACCOUNTAUTH LASTWORD [DESTINATION] Info: dumpkeyfile Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. LASTWORD The last word of your master private-key phrase. DESTINATION The keyfile storage path to.","title":"dumpkeyfile"},{"location":"account-cli/#getnewaddress","text":"Usage: mvs-cli getnewaddress [-h][--number value] ACCOUNTNAME ACCOUNTAUTH Info: Generate new address for this account. Options (named): -h [--help] Get a description and instructions for this command. -n [--number] The address count. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required.","title":"getnewaddress"},{"location":"account-cli/#listaddresses","text":"Usage: mvs-cli listaddresses [-h] ACCOUNTNAME ACCOUNTAUTH Info: List available addresses of this account. Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required.","title":"listaddresses"},{"location":"account-cli/#changepasswd","text":"Usage: mvs-cli changepasswd [-h] --password value ACCOUNTNAME ACCOUNTAUTH Info: changepasswd Options (named): -h [--help] Get a description and instructions for this command. -p [--password] The new password. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required.","title":"changepasswd"},{"location":"account-cli/#deleteaccount","text":"Usage: mvs-cli deleteaccount [-h] ACCOUNTNAME ACCOUNTAUTH LASTWORD Info: deleteaccount Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. LASTWORD The last word of your private-key phrase.","title":"deleteaccount"},{"location":"account-cli/#getaccount","text":"Usage: mvs-cli getaccount [-h] ACCOUNTNAME ACCOUNTAUTH LASTWORD Info: Show account details Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. LASTWORD The last word of your backup words.","title":"getaccount"},{"location":"asset-cli/","text":"createasset Usage: mvs-cli createasset [-h] --symbol value --volume value [--description value][--issuer value] [--decimalnumber value] ACCOUNTNAME ACCOUNTAUTH Info: createasset Options (named): -h [--help] Get a description and instructions for this command. -d [--description] The asset description. -i [--issuer] The asset issuer.defaults to account name. -n [--decimalnumber] The asset amount decimal number. -s [--symbol] The asset symbol/name. Global unique. -v [--volume] The asset maximum supply volume. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. deletelocalasset Usage: mvs-cli deletelocalasset [-h] --symbol value ACCOUNTNAME ACCOUNTAUTH Info: deletelocalasset Options (named): -h [--help] Get a description and instructions for this command. -s [--symbol] The asset symbol/name. Global unique. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. getaccountasset Usage: mvs-cli getaccountasset [-h] ACCOUNTNAME ACCOUNTAUTH [SYMBOL] Info: getaccountasset Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. SYMBOL Asset symbol. getaddressasset Usage: mvs-cli getaddressasset [-h] ADDRESS Info: getaddressasset Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): ADDRESS address getasset Usage: mvs-cli getasset [-h][symbol] Info: Show existed assets details from MVS blockchain. Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): SYMBOL Asset symbol. If not specified, will show whole network asset symbols. issue Usage: mvs-cli issue [-h][--fee value] ACCOUNTNAME ACCOUNTAUTH SYMBOL Info: issue Options (named): -h [--help] Get a description and instructions for this command. -f [--fee] The fee of tx. default_value 10 etp Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. SYMBOL issued asset symbol issuefrom Usage: mvs-cli issuefrom [-h][--fee value] ACCOUNTNAME ACCOUNTAUTH ADDRESS SYMBOL Info: issuefrom Options (named): -h [--help] Get a description and instructions for this command. -f [--fee] The fee of tx. default_value 10 etp Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. ADDRESS target address SYMBOL issued asset symbol listassets Usage: mvs-cli listassets [-h][accountname] [ACCOUNTAUTH] Info: list assets details. Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. sendasset Usage: mvs-cli sendasset [-h][--fee value] ACCOUNTNAME ACCOUNTAUTH ADDRESS SYMBOL AMOUNT Info: sendasset Options (named): -h [--help] Get a description and instructions for this command. -f [--fee] Transaction fee. defaults to 10000 ETP bits Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. ADDRESS Asset receiver. SYMBOL Asset symbol/name. AMOUNT Asset integer bits. see asset <decimal_number>. sendassetfrom Usage: mvs-cli sendassetfrom [-h][--fee value] ACCOUNTNAME ACCOUNTAUTH FROMADDRESS TOADDRESS SYMBOL AMOUNT Info: sendassetfrom Options (named): -h [--help] Get a description and instructions for this command. -f [--fee] Transaction fee. defaults to 10000 ETP bits Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. FROMADDRESS From address TOADDRESS Target address SYMBOL Asset symbol AMOUNT Asset integer bits. see asset <decimal_number>.","title":"Asset"},{"location":"asset-cli/#createasset","text":"Usage: mvs-cli createasset [-h] --symbol value --volume value [--description value][--issuer value] [--decimalnumber value] ACCOUNTNAME ACCOUNTAUTH Info: createasset Options (named): -h [--help] Get a description and instructions for this command. -d [--description] The asset description. -i [--issuer] The asset issuer.defaults to account name. -n [--decimalnumber] The asset amount decimal number. -s [--symbol] The asset symbol/name. Global unique. -v [--volume] The asset maximum supply volume. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required.","title":"createasset"},{"location":"asset-cli/#deletelocalasset","text":"Usage: mvs-cli deletelocalasset [-h] --symbol value ACCOUNTNAME ACCOUNTAUTH Info: deletelocalasset Options (named): -h [--help] Get a description and instructions for this command. -s [--symbol] The asset symbol/name. Global unique. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required.","title":"deletelocalasset"},{"location":"asset-cli/#getaccountasset","text":"Usage: mvs-cli getaccountasset [-h] ACCOUNTNAME ACCOUNTAUTH [SYMBOL] Info: getaccountasset Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. SYMBOL Asset symbol.","title":"getaccountasset"},{"location":"asset-cli/#getaddressasset","text":"Usage: mvs-cli getaddressasset [-h] ADDRESS Info: getaddressasset Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): ADDRESS address","title":"getaddressasset"},{"location":"asset-cli/#getasset","text":"Usage: mvs-cli getasset [-h][symbol] Info: Show existed assets details from MVS blockchain. Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): SYMBOL Asset symbol. If not specified, will show whole network asset symbols.","title":"getasset"},{"location":"asset-cli/#issue","text":"Usage: mvs-cli issue [-h][--fee value] ACCOUNTNAME ACCOUNTAUTH SYMBOL Info: issue Options (named): -h [--help] Get a description and instructions for this command. -f [--fee] The fee of tx. default_value 10 etp Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. SYMBOL issued asset symbol","title":"issue"},{"location":"asset-cli/#issuefrom","text":"Usage: mvs-cli issuefrom [-h][--fee value] ACCOUNTNAME ACCOUNTAUTH ADDRESS SYMBOL Info: issuefrom Options (named): -h [--help] Get a description and instructions for this command. -f [--fee] The fee of tx. default_value 10 etp Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. ADDRESS target address SYMBOL issued asset symbol","title":"issuefrom"},{"location":"asset-cli/#listassets","text":"Usage: mvs-cli listassets [-h][accountname] [ACCOUNTAUTH] Info: list assets details. Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required.","title":"listassets"},{"location":"asset-cli/#sendasset","text":"Usage: mvs-cli sendasset [-h][--fee value] ACCOUNTNAME ACCOUNTAUTH ADDRESS SYMBOL AMOUNT Info: sendasset Options (named): -h [--help] Get a description and instructions for this command. -f [--fee] Transaction fee. defaults to 10000 ETP bits Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. ADDRESS Asset receiver. SYMBOL Asset symbol/name. AMOUNT Asset integer bits. see asset <decimal_number>.","title":"sendasset"},{"location":"asset-cli/#sendassetfrom","text":"Usage: mvs-cli sendassetfrom [-h][--fee value] ACCOUNTNAME ACCOUNTAUTH FROMADDRESS TOADDRESS SYMBOL AMOUNT Info: sendassetfrom Options (named): -h [--help] Get a description and instructions for this command. -f [--fee] Transaction fee. defaults to 10000 ETP bits Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. FROMADDRESS From address TOADDRESS Target address SYMBOL Asset symbol AMOUNT Asset integer bits. see asset <decimal_number>.","title":"sendassetfrom"},{"location":"assettransfer/","text":"Asset(token) Transfer Click the \u201ctransfer\u201d command shown next to your assets Home Fill in transfer details such as the sending and receiving address, transfer amount, username and password, then click \u201cconfirm transfer\u201d. You may adjust your transfer fee. The minimum miner reward for each transaction is 0.0001 ETP. Your transaction is likely to be confirmed more quickly if you set a higher miner fee. ETP Transfer","title":"Token Transfer"},{"location":"assettransfer/#assettoken-transfer","text":"Click the \u201ctransfer\u201d command shown next to your assets","title":"Asset(token) Transfer"},{"location":"assettransfer/#home","text":"Fill in transfer details such as the sending and receiving address, transfer amount, username and password, then click \u201cconfirm transfer\u201d. You may adjust your transfer fee. The minimum miner reward for each transaction is 0.0001 ETP. Your transaction is likely to be confirmed more quickly if you set a higher miner fee.","title":"Home"},{"location":"assettransfer/#etp-transfer","text":"","title":"ETP Transfer"},{"location":"avatarwhitepaper/","text":"Metaverser Digital Identity (brief) The Essence of Digital Identity Digital Identities in Metaverse are unique because their modules are embedded in Metaverse\u2019s protocols and supporting applications have been developed for them. Users have a defined autonomous identity - they are in full control of their identities, and hence need not rely on any central entity or third party for identity verification. They can create, sign, and verify claims and make transactions, while other people who interact with users can help the user prove their identities. In addition, users with autonomous digital identities can selectively disclose their information. Digital identities are an integral part of the virtual world and can take many forms, such as that of individuals or value intermediaries (institutions and entities). Therefore, individuals can have different digital identities in different scenarios (workplace or other places), but all in fact will be supported by their true identities. Use Cases There are many use cases for identity systems embedded within a blockchain protocol. If a person owns multiple digital identities and wants to open an account at Bank B, then he can indicate that he has already had an account at Bank A. Because of this, Bank B will authorize him to open an account at their bank. This use case can be replicated at multiple banks within the same legal jurisdiction. In addition, digital identity is also applicable in the field of digital rights. Digital assets that are issued by a digital identity and possess multiple credentials will be more valuable in the market, thereby facilitating the transfer of different types of value other than from encrypted digital currencies. End users will be able to use their digital identity to claim copyrights and other assets. Apart from authorizing certification information, users can also authorize others to access their private data (such as reputation and credit data). The Operating Procedure of Digital Identities Creation Any user can create a digital identity and bind it with his/her master private key. If a user creates a digital identity but does not bind it to any master private key, this DID will be regarded as an unauthenticated account and will not be able to access to any of its functionalities or applications. Master private key holders who have registered their asset on the Metaverse blockchain can also choose not to bind any digital identities. Users must take initiative, because Metaverse does not automatically create digital identities for any user. The decision to bind a DID lies with the master private key\u2019s holder. Verification Profiles can provide effective chains of proof that demonstrate objective facts of any specified digital identity. For users, they first need to prove that a digital identity belongs to them by binding the transaction to the DID (since the transaction domain contains DID information). Authorization First, we should clarify the situations that would require authorization: authorization is often related to transactions. Assume A requests to inspect B\u2019s digital identity information (asset information) before providing any services. There are two possibilities: B has large amounts of assets on-chain, more than 1 million ETP. B can simply disclose his asset information to A. B has few on-chain assets, but many off-chain assets. The traditional approach is for B to convert assets to ETP for authorization. Currently, Metaverse recommends that users issue their assets and get them verified by an Oracle, after which they will be registered as valid assets belonging to one\u2019s digital identity. Authorization process: A sends a request to B which triggers a script that verifies the asset information of the target account, then sends A\u2019s encrypted result back. B is unable to know which result contains information corresponding to the asset verification. Additionally, the initial request is also encrypted. Thus, B does not know the specific request of A, only what information was requested. Personal transaction and asset records can be accessed after permission is given on8 chain, but the basic principle remains unchanged. Personal customized fields are similar to assets that undergo Oracle authentication (information that has not been approved by an Oracle can still be authorized, but this is not recommended). If the personal customized field contains nonpublic information such as mailbox and phone numbers, no Oracle authentication is required. However, if the information is certified (such as schooling records), then Oracle authentication will be required. Authentication process: The authentication of personal customized information An Oracle\u2019s data-feed is used for endorsement. An Oracle is introduced as a third party and publishes all Profiles on the blockchain for public inquiry and supervision. Oracles are usually organizations, and these organizations should publish their own profile and DID information on the official website. Firstly, B fills in the customizable field with information that needs to be proved. The Oracle must then use its master private key to sign the information and employ a larger sum of coindays to endorse it. A can make a request for the field\u2019s information (including the Oracle endorsement) on-chain. If A is convinced that B\u2019s information is valid, he can continue providing services to B. Query Since the concept of DIDs has been introduced by digital identities at the beginning, DIDs can be used to conduct over-the-counter (OTC) trades with its ability to create transactions in the trading market. We can query a DID\u2019s current transaction requests and past transactions in the open market by entering the DID into the address query bar in the trading market. Conversely, a DID\u2019s behavior and records in the market can be used as data to build digital identities.","title":"Brief Avatar White Paper"},{"location":"avatarwhitepaper/#metaverser-digital-identity-brief","text":"","title":"Metaverser Digital Identity (brief)"},{"location":"avatarwhitepaper/#the-essence-of-digital-identity","text":"Digital Identities in Metaverse are unique because their modules are embedded in Metaverse\u2019s protocols and supporting applications have been developed for them. Users have a defined autonomous identity - they are in full control of their identities, and hence need not rely on any central entity or third party for identity verification. They can create, sign, and verify claims and make transactions, while other people who interact with users can help the user prove their identities. In addition, users with autonomous digital identities can selectively disclose their information. Digital identities are an integral part of the virtual world and can take many forms, such as that of individuals or value intermediaries (institutions and entities). Therefore, individuals can have different digital identities in different scenarios (workplace or other places), but all in fact will be supported by their true identities.","title":"The Essence of Digital Identity"},{"location":"avatarwhitepaper/#use-cases","text":"There are many use cases for identity systems embedded within a blockchain protocol. If a person owns multiple digital identities and wants to open an account at Bank B, then he can indicate that he has already had an account at Bank A. Because of this, Bank B will authorize him to open an account at their bank. This use case can be replicated at multiple banks within the same legal jurisdiction. In addition, digital identity is also applicable in the field of digital rights. Digital assets that are issued by a digital identity and possess multiple credentials will be more valuable in the market, thereby facilitating the transfer of different types of value other than from encrypted digital currencies. End users will be able to use their digital identity to claim copyrights and other assets. Apart from authorizing certification information, users can also authorize others to access their private data (such as reputation and credit data).","title":"Use Cases"},{"location":"avatarwhitepaper/#the-operating-procedure-of-digital-identities","text":"","title":"The Operating Procedure of Digital Identities"},{"location":"avatarwhitepaper/#creation","text":"Any user can create a digital identity and bind it with his/her master private key. If a user creates a digital identity but does not bind it to any master private key, this DID will be regarded as an unauthenticated account and will not be able to access to any of its functionalities or applications. Master private key holders who have registered their asset on the Metaverse blockchain can also choose not to bind any digital identities. Users must take initiative, because Metaverse does not automatically create digital identities for any user. The decision to bind a DID lies with the master private key\u2019s holder.","title":"Creation"},{"location":"avatarwhitepaper/#verification","text":"Profiles can provide effective chains of proof that demonstrate objective facts of any specified digital identity. For users, they first need to prove that a digital identity belongs to them by binding the transaction to the DID (since the transaction domain contains DID information).","title":"Verification"},{"location":"avatarwhitepaper/#authorization","text":"First, we should clarify the situations that would require authorization: authorization is often related to transactions. Assume A requests to inspect B\u2019s digital identity information (asset information) before providing any services. There are two possibilities: B has large amounts of assets on-chain, more than 1 million ETP. B can simply disclose his asset information to A. B has few on-chain assets, but many off-chain assets. The traditional approach is for B to convert assets to ETP for authorization. Currently, Metaverse recommends that users issue their assets and get them verified by an Oracle, after which they will be registered as valid assets belonging to one\u2019s digital identity. Authorization process: A sends a request to B which triggers a script that verifies the asset information of the target account, then sends A\u2019s encrypted result back. B is unable to know which result contains information corresponding to the asset verification. Additionally, the initial request is also encrypted. Thus, B does not know the specific request of A, only what information was requested. Personal transaction and asset records can be accessed after permission is given on8 chain, but the basic principle remains unchanged. Personal customized fields are similar to assets that undergo Oracle authentication (information that has not been approved by an Oracle can still be authorized, but this is not recommended). If the personal customized field contains nonpublic information such as mailbox and phone numbers, no Oracle authentication is required. However, if the information is certified (such as schooling records), then Oracle authentication will be required. Authentication process: The authentication of personal customized information An Oracle\u2019s data-feed is used for endorsement. An Oracle is introduced as a third party and publishes all Profiles on the blockchain for public inquiry and supervision. Oracles are usually organizations, and these organizations should publish their own profile and DID information on the official website. Firstly, B fills in the customizable field with information that needs to be proved. The Oracle must then use its master private key to sign the information and employ a larger sum of coindays to endorse it. A can make a request for the field\u2019s information (including the Oracle endorsement) on-chain. If A is convinced that B\u2019s information is valid, he can continue providing services to B.","title":"Authorization"},{"location":"avatarwhitepaper/#query","text":"Since the concept of DIDs has been introduced by digital identities at the beginning, DIDs can be used to conduct over-the-counter (OTC) trades with its ability to create transactions in the trading market. We can query a DID\u2019s current transaction requests and past transactions in the open market by entering the DID into the address query bar in the trading market. Conversely, a DID\u2019s behavior and records in the market can be used as data to build digital identities.","title":"Query"},{"location":"backupmvs/","text":"How To Backup And Import Account? Backup and import single account CAUTION: PLEASE BACKUP YOUR ACCOUNT\u2019s MNEMONIC-PHRASE OF MASTER-KEY AT FIRST. Backup Account: Using cli command dumpkeyfile to export your account information to backup file. \\$ ./mvs-cli dumpkeyfile account_name password last_word path_of_backup_keyfile last_word: The last word of your account\u2019s mnemonic-phrase. path_of_backup_keyfile: The path of backup file. Import Account: Using cli command importkeyfile to import your account information from backup file. NOTICE: you must use the same password as when using dumpkeyfile. \\$ ./mvs-cli importkeyfile account_name password path_of_backup_keyfile path_of_backup_keyfile: The path of backup file. Backup and import accounts\u2019 database file Somehow, We have to backup/import database of accounts, we can do so as below: Backup accounts database (without blocks) Copy and paste the below into the path search function on your device\u2019s explorer: # Windows: Explorer %HOMEPATH%\\AppData\\Roaming\\Metaverse # Mac-OSX: Finder => go to folder ~/Library/Application Support/Metaverse # Linux(unix-like): ~/.metaverse Copy and paste the account related tables in the sub-directory mainnet as a backup. All those tables\u2019 name have prefix account_, include the followings: account_address_rows account_address_table account_asset_row account_asset_table account_table Import accounts\u2019 database file Just copy the backuped tables in the above step back into the mainet sub-directory. NOTICE: when access your account, you must use the same username and password as in the backuped account tables. Re-syncing blocks If your database has some problem, please take one of the following solutions to re-syncing. Solution 1 - re-syncing from height 0 (Linux) # backup old mainnet directory \\$ mv ~/.metaverse/mainnet ~/.metaverse/mainnet.bak # re-build new database \\$ ./mvsd -i # import accounts database(overwirte) \\$ cp -f ~/.metaverse/mainnet.bak/account\\_\\* ~/.metaverse/mainnet/ # re-start mvsd in daemon mode: \\$ ./mvsd -d # waiting for syncing completed. \\$ tail -f ~/.metaverse/debug.log Solution 2 - re-syncing from height 1270000+(Linux) # backup old mainnet directory $ mv ~/.metaverse/mainnet ~/.metaverse/mainnet.bak # re-build new database # use mainnet-linux-height-1473277.tar.gz (md5sum is 54c996066d1249eca25e28babc3940b7) $ cd ~/.metaverse $ wget https://s3-us-west-1.amazonaws.com/wallet.mvs.org/download/mainnet-linux-height-1473277.tar.gz $ tar -xzvf mainnet-linux-height-1473277.tar.gz # import accounts database(overwirte) $ cp -f ~/.metaverse/mainnet.bak/account\\_\\* ~/.metaverse/mainnet/ # re-start mvsd in daemon mode: $ ./mvsd -d # waiting for syncing completed. $ tail -f ~/.metaverse/debug.log Windows Stop wallet, upgrade to the latest version Rename \u2018C:\\Users\\%USER\\*NAME%\\AppData\\Roaming\\Metaverse\\mainnet\u2019 to \u2018C:\\Users\\%USER_NAME%\\AppData\\Roaming\\Metaverse\\mainnet_bak\u2019 Download block data mainnet-windows-height-1475846.zip and save to \u2018C:\\Users\\%USER_NAME%\\AppData\\Roaming\\Metaverse\\mainnet-windows-height-1475846 .zip\u2019. Unzip mainnet-windows-height-1475846.zip to where it is. Copy all files that start with \u2018account*\u2019 from folder \u2018mainnet_bak\u2019 to folder \u2018mainnet\u2019. Files that need to be copied: \u2018account_address_rows\u2019, \u2018account_address_table\u2019, \u2018account_asset_row\u2019, \u2018account_asset_table\u2019 and \u2018account_table\u2019. Start wallet and wait for syncing block data to the latest height.","title":"Backup Metaverse Account"},{"location":"backupmvs/#how-to-backup-and-import-account","text":"","title":"How To Backup And Import Account?"},{"location":"backupmvs/#backup-and-import-single-account","text":"CAUTION: PLEASE BACKUP YOUR ACCOUNT\u2019s MNEMONIC-PHRASE OF MASTER-KEY AT FIRST. Backup Account: Using cli command dumpkeyfile to export your account information to backup file. \\$ ./mvs-cli dumpkeyfile account_name password last_word path_of_backup_keyfile last_word: The last word of your account\u2019s mnemonic-phrase. path_of_backup_keyfile: The path of backup file. Import Account: Using cli command importkeyfile to import your account information from backup file. NOTICE: you must use the same password as when using dumpkeyfile. \\$ ./mvs-cli importkeyfile account_name password path_of_backup_keyfile path_of_backup_keyfile: The path of backup file.","title":"Backup and import single account"},{"location":"backupmvs/#backup-and-import-accounts-database-file","text":"Somehow, We have to backup/import database of accounts, we can do so as below: Backup accounts database (without blocks) Copy and paste the below into the path search function on your device\u2019s explorer: # Windows: Explorer %HOMEPATH%\\AppData\\Roaming\\Metaverse # Mac-OSX: Finder => go to folder ~/Library/Application Support/Metaverse # Linux(unix-like): ~/.metaverse Copy and paste the account related tables in the sub-directory mainnet as a backup. All those tables\u2019 name have prefix account_, include the followings: account_address_rows account_address_table account_asset_row account_asset_table account_table Import accounts\u2019 database file Just copy the backuped tables in the above step back into the mainet sub-directory. NOTICE: when access your account, you must use the same username and password as in the backuped account tables.","title":"Backup and import accounts\u2019 database file"},{"location":"backupmvs/#re-syncing-blocks","text":"If your database has some problem, please take one of the following solutions to re-syncing. Solution 1 - re-syncing from height 0 (Linux) # backup old mainnet directory \\$ mv ~/.metaverse/mainnet ~/.metaverse/mainnet.bak # re-build new database \\$ ./mvsd -i # import accounts database(overwirte) \\$ cp -f ~/.metaverse/mainnet.bak/account\\_\\* ~/.metaverse/mainnet/ # re-start mvsd in daemon mode: \\$ ./mvsd -d # waiting for syncing completed. \\$ tail -f ~/.metaverse/debug.log Solution 2 - re-syncing from height 1270000+(Linux) # backup old mainnet directory $ mv ~/.metaverse/mainnet ~/.metaverse/mainnet.bak # re-build new database # use mainnet-linux-height-1473277.tar.gz (md5sum is 54c996066d1249eca25e28babc3940b7) $ cd ~/.metaverse $ wget https://s3-us-west-1.amazonaws.com/wallet.mvs.org/download/mainnet-linux-height-1473277.tar.gz $ tar -xzvf mainnet-linux-height-1473277.tar.gz # import accounts database(overwirte) $ cp -f ~/.metaverse/mainnet.bak/account\\_\\* ~/.metaverse/mainnet/ # re-start mvsd in daemon mode: $ ./mvsd -d # waiting for syncing completed. $ tail -f ~/.metaverse/debug.log Windows Stop wallet, upgrade to the latest version Rename \u2018C:\\Users\\%USER\\*NAME%\\AppData\\Roaming\\Metaverse\\mainnet\u2019 to \u2018C:\\Users\\%USER_NAME%\\AppData\\Roaming\\Metaverse\\mainnet_bak\u2019 Download block data mainnet-windows-height-1475846.zip and save to \u2018C:\\Users\\%USER_NAME%\\AppData\\Roaming\\Metaverse\\mainnet-windows-height-1475846 .zip\u2019. Unzip mainnet-windows-height-1475846.zip to where it is. Copy all files that start with \u2018account*\u2019 from folder \u2018mainnet_bak\u2019 to folder \u2018mainnet\u2019. Files that need to be copied: \u2018account_address_rows\u2019, \u2018account_address_table\u2019, \u2018account_asset_row\u2019, \u2018account_asset_table\u2019 and \u2018account_table\u2019. Start wallet and wait for syncing block data to the latest height.","title":"Re-syncing blocks"},{"location":"blockchain-cli/","text":"shutdown Usage: mvs-cli shutdown [-h][accountname] [ACCOUNTAUTH] Info: stop mvsd. Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): ACCOUNTNAME Account name. ACCOUNTAUTH Account password/authorization. getinfo Usage: mvs-cli getinfo [-h] Info: getinfo Options (named): -h [--help] Get a description and instructions for this command. getheight Usage: mvs-cli getheight [-h] Info: Get last height. Alias as fetch-height. Options (named): -h [--help] Get a description and instructions for this command. getpeerinfo Usage: mvs-cli getpeerinfo [-h] Info: getpeerinfo Options (named): -h [--help] Get a description and instructions for this command. getmininginfo Usage: mvs-cli getmininginfo [-h] Info: getmininginfo Options (named): -h [--help] Get a description and instructions for this command. startmining Usage: mvs-cli startmining [-h] ACCOUNTNAME ACCOUNTAUTH Info: start CPU solo mining. You have to setminingaccount firstly. Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. stopmining Usage: mvs-cli stopmining [-h][accountname] [ACCOUNTAUTH] Info: stop CPU solo mining. Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. getwork Usage: mvs-cli getwork [-h][accountname] [ACCOUNTAUTH] Info: getwork to get mining info Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): ACCOUNTNAME Mining account name required. ACCOUNTAUTH Mining account password(authorization) required. addnode Usage: mvs-cli addnode [-h] ACCOUNTNAME ACCOUNTAUTH Info: addnode Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. setminingaccount Usage: mvs-cli setminingaccount [-h] ACCOUNTNAME ACCOUNTAUTH PAYMENT_ADDRESS Info: setminingaccount when pool mining. Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. PAYMENT_ADDRESS the payment address of this account. submitwork Usage: mvs-cli submitwork [-h] NOUNCE HEADERHASH MIXHASH Info: submitwork to submit mining result. Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): NOUNCE nounce. HEADERHASH header hash. MIXHASH mix hash. getmemorypool Usage: mvs-cli getmemorypool [-h][--json value] Info: Returns all transactions in memory pool. Options (named): -h [--help] Get a description and instructions for this command. -j [--json] Json format or Raw format, default is Json(true). Block getblock Usage: mvs-cli getblock [-h] HASH_OR_HEIGH [JSON][tx_json] Info: Get sepcified block header from wallet. Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): HASH_OR_HEIGH block hash or block height JSON Json/Raw format, default is '--json=true'. TX_JSON Json/Raw format for txs, default is '--tx_json=true'. getblockheader Usage: mvs-cli getblockheader [-h][--hash value] [--height value] Info: getblockheader, alias as fetch-header/getbestblockhash/getbestblockheader. Options (named): -h [--help] Get a description and instructions for this command. -s [--hash] The Base16 block hash. -t [--height] The block height.","title":"Blockchain"},{"location":"blockchain-cli/#shutdown","text":"Usage: mvs-cli shutdown [-h][accountname] [ACCOUNTAUTH] Info: stop mvsd. Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): ACCOUNTNAME Account name. ACCOUNTAUTH Account password/authorization.","title":"shutdown"},{"location":"blockchain-cli/#getinfo","text":"Usage: mvs-cli getinfo [-h] Info: getinfo Options (named): -h [--help] Get a description and instructions for this command.","title":"getinfo"},{"location":"blockchain-cli/#getheight","text":"Usage: mvs-cli getheight [-h] Info: Get last height. Alias as fetch-height. Options (named): -h [--help] Get a description and instructions for this command. getpeerinfo Usage: mvs-cli getpeerinfo [-h] Info: getpeerinfo Options (named): -h [--help] Get a description and instructions for this command.","title":"getheight"},{"location":"blockchain-cli/#getmininginfo","text":"Usage: mvs-cli getmininginfo [-h] Info: getmininginfo Options (named): -h [--help] Get a description and instructions for this command.","title":"getmininginfo"},{"location":"blockchain-cli/#startmining","text":"Usage: mvs-cli startmining [-h] ACCOUNTNAME ACCOUNTAUTH Info: start CPU solo mining. You have to setminingaccount firstly. Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required.","title":"startmining"},{"location":"blockchain-cli/#stopmining","text":"Usage: mvs-cli stopmining [-h][accountname] [ACCOUNTAUTH] Info: stop CPU solo mining. Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required.","title":"stopmining"},{"location":"blockchain-cli/#getwork","text":"Usage: mvs-cli getwork [-h][accountname] [ACCOUNTAUTH] Info: getwork to get mining info Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): ACCOUNTNAME Mining account name required. ACCOUNTAUTH Mining account password(authorization) required.","title":"getwork"},{"location":"blockchain-cli/#addnode","text":"Usage: mvs-cli addnode [-h] ACCOUNTNAME ACCOUNTAUTH Info: addnode Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required.","title":"addnode"},{"location":"blockchain-cli/#setminingaccount","text":"Usage: mvs-cli setminingaccount [-h] ACCOUNTNAME ACCOUNTAUTH PAYMENT_ADDRESS Info: setminingaccount when pool mining. Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. PAYMENT_ADDRESS the payment address of this account.","title":"setminingaccount"},{"location":"blockchain-cli/#submitwork","text":"Usage: mvs-cli submitwork [-h] NOUNCE HEADERHASH MIXHASH Info: submitwork to submit mining result. Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): NOUNCE nounce. HEADERHASH header hash. MIXHASH mix hash.","title":"submitwork"},{"location":"blockchain-cli/#getmemorypool","text":"Usage: mvs-cli getmemorypool [-h][--json value] Info: Returns all transactions in memory pool. Options (named): -h [--help] Get a description and instructions for this command. -j [--json] Json format or Raw format, default is Json(true).","title":"getmemorypool"},{"location":"blockchain-cli/#block","text":"","title":"Block"},{"location":"blockchain-cli/#getblock","text":"Usage: mvs-cli getblock [-h] HASH_OR_HEIGH [JSON][tx_json] Info: Get sepcified block header from wallet. Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): HASH_OR_HEIGH block hash or block height JSON Json/Raw format, default is '--json=true'. TX_JSON Json/Raw format for txs, default is '--tx_json=true'.","title":"getblock"},{"location":"blockchain-cli/#getblockheader","text":"Usage: mvs-cli getblockheader [-h][--hash value] [--height value] Info: getblockheader, alias as fetch-header/getbestblockhash/getbestblockheader. Options (named): -h [--help] Get a description and instructions for this command. -s [--hash] The Base16 block hash. -t [--height] The block height.","title":"getblockheader"},{"location":"certificate/","text":"Certificates Check your Certificates You can see your certificates per Avatar in the Avatar main page. There is 3 types of certificates: Secondary Issue: This certificate give you the permission to do a Secondary Issue on a specific Asset. The issuer of an asset automatically get this certificate if the Secondary Issue option has been specified. Domain: This certificate give you the ownership of a domain (i.e. if you own the Domain \u2018MVS\u2019, only you can create an asset whose name start with \u2018MVS.\u2019). The issuer of an asset automatically get this certificate. Naming: This certificate give you the permission to create an asset for a specific name (i.e. if you own the Naming \u2018MVS.ASSET\u2019, you have the permission to create the Asset called \u2018MVS.ASSET\u2019 only). It can be created and sent by the Domain owner. Transfer a Certificate You can transfer any type of certificate from the \u2018Transfer Certificate\u2019 page Issue a Certificate You can issue a certificate from the \u2018Transfer Certificate\u2019 page. Currently, only a Naming certificate can be issued since the Secondary Issue and Domain certificates are automatically generated at the Asset creation. Other Export Your Account to a File You can export your account to a key file via the option \u2018Export to file\u2019. This file contains your backup words encrypted via your password. It can be used to import your account to this wallet (full node wallet) on another computer or after an update for instance. It is also compatible with the lightwallet MyETPWallet and can be use to directly open your account in the lightwallet. Export your account to MyETPWallet app To export your account to the mobile application, simply click on \u2018Export to app\u2019 and scan this QRCode via MyETPWallet app. This QR Code contains your backup words encoded via your password, so your password will be asked in the app in order to decrypt it.","title":"Certificate"},{"location":"certificate/#certificates","text":"","title":"Certificates"},{"location":"certificate/#check-your-certificates","text":"You can see your certificates per Avatar in the Avatar main page. There is 3 types of certificates: Secondary Issue: This certificate give you the permission to do a Secondary Issue on a specific Asset. The issuer of an asset automatically get this certificate if the Secondary Issue option has been specified. Domain: This certificate give you the ownership of a domain (i.e. if you own the Domain \u2018MVS\u2019, only you can create an asset whose name start with \u2018MVS.\u2019). The issuer of an asset automatically get this certificate. Naming: This certificate give you the permission to create an asset for a specific name (i.e. if you own the Naming \u2018MVS.ASSET\u2019, you have the permission to create the Asset called \u2018MVS.ASSET\u2019 only). It can be created and sent by the Domain owner.","title":"Check your Certificates"},{"location":"certificate/#transfer-a-certificate","text":"You can transfer any type of certificate from the \u2018Transfer Certificate\u2019 page","title":"Transfer a Certificate"},{"location":"certificate/#issue-a-certificate","text":"You can issue a certificate from the \u2018Transfer Certificate\u2019 page. Currently, only a Naming certificate can be issued since the Secondary Issue and Domain certificates are automatically generated at the Asset creation.","title":"Issue a Certificate"},{"location":"certificate/#other","text":"","title":"Other"},{"location":"certificate/#export-your-account-to-a-file","text":"You can export your account to a key file via the option \u2018Export to file\u2019. This file contains your backup words encrypted via your password. It can be used to import your account to this wallet (full node wallet) on another computer or after an update for instance. It is also compatible with the lightwallet MyETPWallet and can be use to directly open your account in the lightwallet.","title":"Export Your Account to a File"},{"location":"certificate/#export-your-account-to-myetpwallet-app","text":"To export your account to the mobile application, simply click on \u2018Export to app\u2019 and scan this QRCode via MyETPWallet app. This QR Code contains your backup words encoded via your password, so your password will be asked in the app in order to decrypt it.","title":"Export your account to MyETPWallet app"},{"location":"createasset/","text":"Create And Issue Tokens Feature Description Through just a few steps, you can create your own digital currency using the Metaverse Wallet. The Metaverse Blockchain allows you to register and issue digital assets, allowing you to digitize your assets and transfer value on a blockchain. All digital currency issued on the Metaverse public blockchain can be viewed in the wallet, at \u201cAll Assets\u201d. Create Assets Enter the \u201cAssets\u201d page and click \u201cCreate asset\u201d (marked in yellow below) to enter the asset creation page. Please set the digital currency type, amount to be issued, decimal places and asset details, then click \u201cCreate Asset\u201d to create your own digital asset. Please note that assets are created locally and are not registered on the Metaverse Blockchain. No fees are charged to create an asset. Created assets will be displayed on the \u201cMy Assets\u201d page. Assets Issue Assets Assets issuance refers to the registration of your locally created assets on the Metaverse Blockchain, which consumes a 10 ETP service charge. After clicking \u201cCreate Assets\u201d in the previous step, a popup will appear asking if you wish to issue the asset. If you choose \u201cIssue\u201d, it will consume 10 ETP to register your assets on the Metaverse Blockchain. If you do not issue the asset immediately after it is created, you can visit the \u201cMy Assets\u201d page to view and issue the assets you created locally.","title":"Create Asset"},{"location":"createasset/#create-and-issue-tokens","text":"","title":"Create And Issue Tokens"},{"location":"createasset/#feature-description","text":"Through just a few steps, you can create your own digital currency using the Metaverse Wallet. The Metaverse Blockchain allows you to register and issue digital assets, allowing you to digitize your assets and transfer value on a blockchain. All digital currency issued on the Metaverse public blockchain can be viewed in the wallet, at \u201cAll Assets\u201d.","title":"Feature Description"},{"location":"createasset/#create-assets","text":"Enter the \u201cAssets\u201d page and click \u201cCreate asset\u201d (marked in yellow below) to enter the asset creation page. Please set the digital currency type, amount to be issued, decimal places and asset details, then click \u201cCreate Asset\u201d to create your own digital asset. Please note that assets are created locally and are not registered on the Metaverse Blockchain. No fees are charged to create an asset. Created assets will be displayed on the \u201cMy Assets\u201d page.","title":"Create Assets"},{"location":"createasset/#assets","text":"","title":"Assets"},{"location":"createasset/#issue-assets","text":"Assets issuance refers to the registration of your locally created assets on the Metaverse Blockchain, which consumes a 10 ETP service charge. After clicking \u201cCreate Assets\u201d in the previous step, a popup will appear asking if you wish to issue the asset. If you choose \u201cIssue\u201d, it will consume 10 ETP to register your assets on the Metaverse Blockchain. If you do not issue the asset immediately after it is created, you can visit the \u201cMy Assets\u201d page to view and issue the assets you created locally.","title":"Issue Assets"},{"location":"didintro/","text":"Digital identity (Avatar): The digital identity is a collective name for the profile information of the account corresponding to the master private key owned by the user. It has a unique identifier in the entire network and is bound to the user's address one by one. Having a digital identity symbolizes a valid identity on the chain through which assets can be held and issued. Digital identities can be held by a single or multiple registrants, which cannot be forged. When multiple users jointly hold, the multi-signature address created by these users is bound. At this time, the transaction must be issued by multiple people Co-signature confirmation. A valid digital identity can be transferred between different addresses under the account, or it can be transferred to other accounts indirectly through a multi-signature address transferred to multiple accounts, and the historical address in the process of digital identity migration can be viewed on the chain. Instead of using an address, you can create a transaction with a digital identity. Transactions created with a digital identity will be verified on the chain. Sending a transaction with an invalid digital identity or sending to an invalid digital identity will be rejected","title":"DID Introduction"},{"location":"didintro/#digital-identity-avatar","text":"The digital identity is a collective name for the profile information of the account corresponding to the master private key owned by the user. It has a unique identifier in the entire network and is bound to the user's address one by one. Having a digital identity symbolizes a valid identity on the chain through which assets can be held and issued. Digital identities can be held by a single or multiple registrants, which cannot be forged. When multiple users jointly hold, the multi-signature address created by these users is bound. At this time, the transaction must be issued by multiple people Co-signature confirmation. A valid digital identity can be transferred between different addresses under the account, or it can be transferred to other accounts indirectly through a multi-signature address transferred to multiple accounts, and the historical address in the process of digital identity migration can be viewed on the chain. Instead of using an address, you can create a transaction with a digital identity. Transactions created with a digital identity will be verified on the chain. Sending a transaction with an invalid digital identity or sending to an invalid digital identity will be rejected","title":"Digital identity (Avatar):"},{"location":"didquery/","text":"DID Query View a list of digital identities Registered digital identities can be viewed through listdids Command: $ listdids Usage: mvs-cli listdids [-h] [ACCOUNTNAME] [ACCOUNTAUTH] Info: list whole network DIDs in details. Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. Example: View all did registered on the chain Command: $ ./mvs-cli listdids \u8f93\u51fa\uff1a { \"dids\" : [ { \"address\" : \"MN3UNt5FbUbpsYtW6UfhcieykUb8rXKP5g\", \"status\" : \"registered\", \"symbol\" : \"Alice.DIID\" }, { \"address\" : \"MLixg7rxKmtPj9DT9wPKSy6WkJkoUDWUSv\", \"status\" : \"registered\", \"symbol\" : \"Alice.DIID2\" }, { \"address\" : \"M9ZTG5ed4Tbsir7rD1JYYFVaaWnYmBxHs7\", \"status\" : \"registered\", \"symbol\" : \"Bob.DIID\" }, { \"address\" : \"MAhmaLbfLFFMQF88xWAqibDaPfQfYqpv8Y\", \"status\" : \"registered\", \"symbol\" : \"Cindy.DIID\" } ] } Example: View all did registered for the current account Command: $ ./mvs-cli listdids Alice 123 \u8f93\u51fa\uff1a { \"dids\" : [ { \"address\" : \"MN3UNt5FbUbpsYtW6UfhcieykUb8rXKP5g\", \"status\" : \"registered\", \"symbol\" : \"Alice.DIID\" }, { \"address\" : \"MLixg7rxKmtPj9DT9wPKSy6WkJkoUDWUSv\", \"status\" : \"registered\", \"symbol\" : \"Alice.DIID2\" } ] } View historical addresses Every digital identity will be recorded on the chain from registration to transfer, you can view the migration record of did View all digital identity list Commands\uff1a $ getdid Usage: mvs-cli getdid [-h] [DID/ADDRESS] Info: getdid Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): DID/ADDRESS Did symbol or standard address; If no input parameters, then display whole network DIDs. Rule: parameter is ADDRESS, the historical address of did corresponding to ADDRESS is displayed Example: View all did registered on the chain Command: $ ./mvs-cli getdid Output: { \"dids\" : [ \"Alice.DIID\", \"Alice.DIID2\", \"Bob.DIID\", \"Cindy.DIID\", ] } Example: View the historical address of did migration Command: $ ./mvs-cli getdid test.mvs or ./mvs-cli getdid M9kDHsDKJj9hM8FzSmDu4xCDbo2DFzUhzj Ouput: { \"addresses\" : [ { \"address\" : \"M9kDHsDKJj9hM8FzSmDu4xCDbo2DFzUhzj\", \"status\" : \"current\" }, { \"address\" : \"35cY636TPTfFW8PxhqH3BNRL54g1T4mbR2\", \"status\" : \"history\" }, { \"address\" : \"MP5FoYQHiEQ52pcEURkaYmuqZMnYHNAZ83\", \"status\" : \"history\" }, { \"address\" : \"M9L3ipy3Hcf6kdvknU3mH7mwH9ER3uCziu\", \"status\" : \"history\" } ], \"did\" : \"test.mvs\" }","title":"DID Query"},{"location":"didquery/#did-query","text":"","title":"DID Query"},{"location":"didquery/#view-a-list-of-digital-identities","text":"Registered digital identities can be viewed through listdids Command: $ listdids Usage: mvs-cli listdids [-h] [ACCOUNTNAME] [ACCOUNTAUTH] Info: list whole network DIDs in details. Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. Example: View all did registered on the chain Command: $ ./mvs-cli listdids \u8f93\u51fa\uff1a { \"dids\" : [ { \"address\" : \"MN3UNt5FbUbpsYtW6UfhcieykUb8rXKP5g\", \"status\" : \"registered\", \"symbol\" : \"Alice.DIID\" }, { \"address\" : \"MLixg7rxKmtPj9DT9wPKSy6WkJkoUDWUSv\", \"status\" : \"registered\", \"symbol\" : \"Alice.DIID2\" }, { \"address\" : \"M9ZTG5ed4Tbsir7rD1JYYFVaaWnYmBxHs7\", \"status\" : \"registered\", \"symbol\" : \"Bob.DIID\" }, { \"address\" : \"MAhmaLbfLFFMQF88xWAqibDaPfQfYqpv8Y\", \"status\" : \"registered\", \"symbol\" : \"Cindy.DIID\" } ] } Example: View all did registered for the current account Command: $ ./mvs-cli listdids Alice 123 \u8f93\u51fa\uff1a { \"dids\" : [ { \"address\" : \"MN3UNt5FbUbpsYtW6UfhcieykUb8rXKP5g\", \"status\" : \"registered\", \"symbol\" : \"Alice.DIID\" }, { \"address\" : \"MLixg7rxKmtPj9DT9wPKSy6WkJkoUDWUSv\", \"status\" : \"registered\", \"symbol\" : \"Alice.DIID2\" } ] }","title":"View a list of digital identities"},{"location":"didquery/#view-historical-addresses","text":"Every digital identity will be recorded on the chain from registration to transfer, you can view the migration record of did View all digital identity list Commands\uff1a $ getdid Usage: mvs-cli getdid [-h] [DID/ADDRESS] Info: getdid Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): DID/ADDRESS Did symbol or standard address; If no input parameters, then display whole network DIDs. Rule: parameter is ADDRESS, the historical address of did corresponding to ADDRESS is displayed Example: View all did registered on the chain Command: $ ./mvs-cli getdid Output: { \"dids\" : [ \"Alice.DIID\", \"Alice.DIID2\", \"Bob.DIID\", \"Cindy.DIID\", ] } Example: View the historical address of did migration Command: $ ./mvs-cli getdid test.mvs or ./mvs-cli getdid M9kDHsDKJj9hM8FzSmDu4xCDbo2DFzUhzj Ouput: { \"addresses\" : [ { \"address\" : \"M9kDHsDKJj9hM8FzSmDu4xCDbo2DFzUhzj\", \"status\" : \"current\" }, { \"address\" : \"35cY636TPTfFW8PxhqH3BNRL54g1T4mbR2\", \"status\" : \"history\" }, { \"address\" : \"MP5FoYQHiEQ52pcEURkaYmuqZMnYHNAZ83\", \"status\" : \"history\" }, { \"address\" : \"M9L3ipy3Hcf6kdvknU3mH7mwH9ER3uCziu\", \"status\" : \"history\" } ], \"did\" : \"test.mvs\" }","title":"View historical addresses"},{"location":"didregister/","text":"Digital Identity (Avatar) Usage registered Before registering a digital identity, you must have an already created account. You need to pay 1 etp to pay the commission fee at the destination address. After the registration is successfully integrated into the block, you can use it to send transactions. Registering a digital identity requires parameters: account, account password, Destination address, digital identity sign. Command: $ registerdid Usage: mvs-cli registerdid [-h] [--fee value] ACCOUNTNAME ACCOUNTAUTH ADDRESS SYMBOL Info: registerdid Options (named): -H [- Help ] Description A and the Get Instructions for the this Command . -f [--fee] Defaults to TX of The Fee of ETP. 1.. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password (authorization) required. ADDRESS The address will be bound to, can change to other addresses later. SYMBOL The symbol of global unique MVS Digital Identity Destination / Index, supports alphabets / numbers / (\"@\" , \".\", \"_\", \"-\"), Case -sensitive, maximum length is 64. Rules: ADDRESS belongs to the current account; SYMBOL is composed of letters, numbers and special characters ( \"@\" , \".\" , \"_\" , \"-\" ), Is case sensitive, and the maximum length cannot exceed 64; SYMBOL cannot be a valid address and Cannot be repeated on the chain; SYMBOL cannot be the keyword \"BLACKHOLE\" . \"BLACKHOLE\" is not case sensitive, that is, \"BLACKHOLE\" , \"blockhole\" , \"BlockHole\" and other forms are all invalid SYMBOL; SYMBOL cannot be a politically sensitive word; registration did need at least 1 etp Example: Use the account 'test' to register the digital identity with the name 'test.mvs' and bind it to a valid address 'M9L3ipy3Hcf6kdvknU3mH7mwH9ER3uCziu' $ ./mvs-cli registerdid test 123 M9L3ipy3Hcf6kdvknU3mH7mwH9ER3uCziu test.mvs { \"transaction\" : { \"hash\" : \"4d5ae5bfdd89d30a771680cd3080478e741ff1bea65b4903ea42160952c0c9e8\", \"inputs\" : [ { \"address\" : \"M9L3ipy3Hcf6kdvknU3mH7mwH9ER3uCziu\", \"previous_output\" : { \"hash\" : \"a7db09dcf9e8d9341f8343a6f1edfb2fd1fdf350ccef8f3517b446eeb2d73076\", \"index\" : 0 }, \"script\" : \"[ 304402201c9b9706b3e198e9de8887c94c6e7f1192a65cb1fa15318b409f6d4fc4952f9a0220306d2f5fcdf2e1e32861399dc55b7c81a1cedc7790d2ff8a73a8bb3f9bac5fde01 ] [ 035f572a164ec0e7d8f1935e357d86c6441152bed7251389a1c66174ae890dad90 ]\", \"sequence\" : 4294967295 } ], \"lock_time\" : \"0\", \"outputs\" : [ { \"address\" : \"M9L3ipy3Hcf6kdvknU3mH7mwH9ER3uCziu\", \"attachment\" : { \"address\" : \"M9L3ipy3Hcf6kdvknU3mH7mwH9ER3uCziu\", \"symbol\" : \"test.mvs\", \"type\" : \"did-register\" }, \"index\" : 0, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ 0fad171975f1100309022c83c7b9dca0a8f8e6b8 ] equalverify checksig\", \"value\" : 0 } ], \"version\" : \"4\" } }","title":"DID Register"},{"location":"didregister/#digital-identity-avatar-usage","text":"","title":"Digital Identity (Avatar) Usage"},{"location":"didregister/#registered","text":"Before registering a digital identity, you must have an already created account. You need to pay 1 etp to pay the commission fee at the destination address. After the registration is successfully integrated into the block, you can use it to send transactions. Registering a digital identity requires parameters: account, account password, Destination address, digital identity sign. Command: $ registerdid Usage: mvs-cli registerdid [-h] [--fee value] ACCOUNTNAME ACCOUNTAUTH ADDRESS SYMBOL Info: registerdid Options (named): -H [- Help ] Description A and the Get Instructions for the this Command . -f [--fee] Defaults to TX of The Fee of ETP. 1.. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password (authorization) required. ADDRESS The address will be bound to, can change to other addresses later. SYMBOL The symbol of global unique MVS Digital Identity Destination / Index, supports alphabets / numbers / (\"@\" , \".\", \"_\", \"-\"), Case -sensitive, maximum length is 64. Rules: ADDRESS belongs to the current account; SYMBOL is composed of letters, numbers and special characters ( \"@\" , \".\" , \"_\" , \"-\" ), Is case sensitive, and the maximum length cannot exceed 64; SYMBOL cannot be a valid address and Cannot be repeated on the chain; SYMBOL cannot be the keyword \"BLACKHOLE\" . \"BLACKHOLE\" is not case sensitive, that is, \"BLACKHOLE\" , \"blockhole\" , \"BlockHole\" and other forms are all invalid SYMBOL; SYMBOL cannot be a politically sensitive word; registration did need at least 1 etp Example: Use the account 'test' to register the digital identity with the name 'test.mvs' and bind it to a valid address 'M9L3ipy3Hcf6kdvknU3mH7mwH9ER3uCziu' $ ./mvs-cli registerdid test 123 M9L3ipy3Hcf6kdvknU3mH7mwH9ER3uCziu test.mvs { \"transaction\" : { \"hash\" : \"4d5ae5bfdd89d30a771680cd3080478e741ff1bea65b4903ea42160952c0c9e8\", \"inputs\" : [ { \"address\" : \"M9L3ipy3Hcf6kdvknU3mH7mwH9ER3uCziu\", \"previous_output\" : { \"hash\" : \"a7db09dcf9e8d9341f8343a6f1edfb2fd1fdf350ccef8f3517b446eeb2d73076\", \"index\" : 0 }, \"script\" : \"[ 304402201c9b9706b3e198e9de8887c94c6e7f1192a65cb1fa15318b409f6d4fc4952f9a0220306d2f5fcdf2e1e32861399dc55b7c81a1cedc7790d2ff8a73a8bb3f9bac5fde01 ] [ 035f572a164ec0e7d8f1935e357d86c6441152bed7251389a1c66174ae890dad90 ]\", \"sequence\" : 4294967295 } ], \"lock_time\" : \"0\", \"outputs\" : [ { \"address\" : \"M9L3ipy3Hcf6kdvknU3mH7mwH9ER3uCziu\", \"attachment\" : { \"address\" : \"M9L3ipy3Hcf6kdvknU3mH7mwH9ER3uCziu\", \"symbol\" : \"test.mvs\", \"type\" : \"did-register\" }, \"index\" : 0, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ 0fad171975f1100309022c83c7b9dca0a8f8e6b8 ] equalverify checksig\", \"value\" : 0 } ], \"version\" : \"4\" } }","title":"registered"},{"location":"didsendetp/","text":"DID Send ETP Or Asset Send etp to other digital identities Compatible with send interface Command: $ didsend Usage: mvs-cli didsend [-h] [--fee value] [--memo value] ACCOUNTNAME ACCOUNTAUTH TODID/TOADDRESS AMOUNT Info: send etp to a targert did/address, mychange goes to another existed address of this account. Options (named): -h [--help] Get a description and instructions for this command. -f [--fee] Transaction fee. defaults to 10000 etp bits -m [--memo] Attached memo for this transaction. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. TODID/TOADDRESS Send to this did/address AMOUNT ETP integer bits. Rule: Target can be did or address Example: Send to specific DID Command: $ ./mvs-cli didsend test 123 test.mvs 10000 Output\uff1a { \"transaction\" : { \"hash\" : \"d80b49572c9f2ffacb99a6371ce1ba8089712c3c1df9e0ce6a473229977e12f6\", \"inputs\" : [ { \"address\" : \"MLasJFxZQnA49XEvhTHmRKi2qstkj9ppjo\", \"previous_output\" : { \"hash\" : \"cbfa806c1d11f242cf8942a8ef11ff91bbdb80fb44fcb6e26c7892a5af1038fb\", \"index\" : 0 }, \"script\" : \"[ 3045022100b4ce8d84d69a5f8a67add65919ec12cb8549ce0428f3125b3f9cbc9234dc7d6702202f1808f48012cea6528635785a099c17f30b0c2ba3ce81e9c9cfb9f733e7bc0a01 ] [ 0380990a7312b87abda80e5857ee6ebf798a2bf62041b07111287d19926c429d11 ]\", \"sequence\" : 4294967295 } ], \"lock_time\" : \"0\", \"outputs\" : [ { \"address\" : \"M9kDHsDKJj9hM8FzSmDu4xCDbo2DFzUhzj\", \"attachment\" : { \"from_did\" : \"\", \"to_did\" : \"test.mvs\", \"type\" : \"etp\" }, \"index\" : 0, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ 143f0fc7d1186851be00b48bf526964b776af83b ] equalverify checksig\", \"value\" : 10000 }, { \"address\" : \"MLasJFxZQnA49XEvhTHmRKi2qstkj9ppjo\", \"attachment\" : { \"type\" : \"etp\" }, \"index\" : 1, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ 8b24031888c2896cedb764012677868b5c64ef3b ] equalverify checksig\", \"value\" : 299990000 } ], \"version\" : \"4\" } } Send etp from specified DID Compatible with sendfrom Command\uff1a \\$ didsendfrom Usage: mvs-cli didsendfrom [-h][--fee value] [--memo value] ACCOUNTNAME ACCOUNTAUTH FROMDID/FROMADDRESS TODID/TOADDRESS AMOUNT Info: send etp from a specified did/address of this account to target did/address, mychange goes to from_did/address. Options (named): -h [--help] Get a description and instructions for this command. -f [--fee] Transaction fee. defaults to 10000 ETP bits -m [--memo] The memo to descript transaction Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. FROMDID/FROMADDRESS Send from this did/address TODID/TOADDRESS Send to this did/address AMOUNT ETP integer bits. Rules: FROMDID / FROMADDRESS is the did or address under the current account Example: Send to specified DID Command: $ ./mvs-cli didsendfrom Alice 123 ALICE.DIID test.mvs 10000 Output\uff1a { \"transaction\" : { \"hash\" : \"df96c21487d697c45b94fe60188b070b7b23efc5074d02e89b84dca90dff964e\", \"inputs\" : [ { \"address\" : \"MLasJFxZQnA49XEvhTHmRKi2qstkj9ppjo\", \"previous_output\" : { \"hash\" : \"2ffe76571564b69b1940c54c50120c2e98e20b13b141d4d7dba8d95731a2f970\", \"index\" : 1 }, \"script\" : \"[ 3044022068060af455f5cf648d7dd846cba583947961a3dc17859eadd1a1b7163e58979402207c692e24edd83ec97f3eddf54bb7789ff305cc7b7e349e76872c371d7c0b08ca01 ] [ 0380990a7312b87abda80e5857ee6ebf798a2bf62041b07111287d19926c429d11 ]\", \"sequence\" : 4294967295 } ], \"lock_time\" : \"0\", \"outputs\" : [ { \"address\" : \"M9kDHsDKJj9hM8FzSmDu4xCDbo2DFzUhzj\", \"attachment\" : { \"from_did\" : \"ALICE.DIID\", \"to_did\" : \"test.mvs\", \"type\" : \"etp\" }, \"index\" : 0, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ 143f0fc7d1186851be00b48bf526964b776af83b ] equalverify checksig\", \"value\" : 10000 }, { \"address\" : \"MLasJFxZQnA49XEvhTHmRKi2qstkj9ppjo\", \"attachment\" : { \"type\" : \"etp\" }, \"index\" : 1, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ 8b24031888c2896cedb764012677868b5c64ef3b ] equalverify checksig\", \"value\" : 299960000 } ], \"version\" : \"4\" } } Send to multiple DID Compatible with sendmore Command\uff1a \\$ didsendmore Usage: mvs-cli didsendmore [-h] --receivers value [--fee value][--mychange value] ACCOUNTNAME ACCOUNTAUTH Info: send etp to multi target did/addresses. Eg: [didsendmore $name $password -r $did1/address1:$amount1 -r $did2/address2:$amount2 -m $mychange_address] Options (named): -h [--help] Send to more target. -f [--fee] Transaction fee. defaults to 10000 ETP bits -m [--mychange] Mychange to this did/address -r [--receivers] Send to [did/address:etp_bits]. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. Rules \"-r\" option specifies the destination DID (or address) and amount, you can add multiple; \"-m\" option specifies the DID or address of change Example: Send to multiple DID or addresses Command\uff1a $ ./mvs-cli didsendmore test 123 -r BOB.DIID:10000 -r M9kDHsDKJj9hM8FzSmDu4xCDbo2DFzUhzj:10000 -m MLasJFxZQnA49XEvhTHmRKi2qstkj9ppjo { \"transaction\" : { \"hash\" : \"efeceb068f7fff776b50d0a8d5d89e9f5ac7d1b85ed22f7efb9c83ae7fb3e7f7\", \"inputs\" : [ { \"address\" : \"MLasJFxZQnA49XEvhTHmRKi2qstkj9ppjo\", \"previous_output\" : { \"hash\" : \"4b702213d37c7c0f42b9e654ca7734ac6f64abbf38c145d96790512224e5f05d\", \"index\" : 1 }, \"script\" : \"[ 304402206e98df433008c0e837545807747583ed7717b7b1b42a3df4305c43bd1ef8cfa7022069056ae0a6f6dbb0bf6e23d2bab884588360b7375b74a5b21cf557409dc155f301 ] [ 0380990a7312b87abda80e5857ee6ebf798a2bf62041b07111287d19926c429d11 ]\", \"sequence\" : 4294967295 } ], \"lock_time\" : \"0\", \"outputs\" : [ { \"address\" : \"MRyes39YXS3MJLf2fNVTtriVRY93v5HARr\", \"attachment\" : { \"from_did\" : \"\", \"to_did\" : \"BOB.DIID\", \"type\" : \"etp\" }, \"index\" : 0, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ c64bd3fb0959db9212066496275e4d5a858f3e5e ] equalverify checksig\", \"value\" : 10000 }, { \"address\" : \"M9kDHsDKJj9hM8FzSmDu4xCDbo2DFzUhzj\", \"attachment\" : { \"type\" : \"etp\" }, \"index\" : 1, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ 143f0fc7d1186851be00b48bf526964b776af83b ] equalverify checksig\", \"value\" : 10000 }, { \"address\" : \"MLasJFxZQnA49XEvhTHmRKi2qstkj9ppjo\", \"attachment\" : { \"type\" : \"etp\" }, \"index\" : 2, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ 8b24031888c2896cedb764012677868b5c64ef3b ] equalverify checksig\", \"value\" : 73073199 } ], \"version\" : \"4\" } } Send assets to other DID Command\uff1a $ didsendasset Usage: mvs-cli didsendasset [-h] [--fee value] [--model value] ACCOUNTNAME ACCOUNTAUTH TODID/TOADDRESS ASSET AMOUNT Info: didsendasset Options (named): -h [--help] Get a description and instructions for this command. -f [--fee] Transaction fee. defaults to 10000 ETP bits -m [--model] The token offering model by block height. TYPE=1 - fixed quantity model; TYPE=2 - specify parameters; LQ - Locked Quantity each period; LP - Locked Period, numeber of how many blocks; UN - Unlock Number, number of how many LPs; eg: TYPE=1;LQ=9000;LP=60000;UN=3 TYPE=2;LQ=9000;LP=60000;UN=3;UC=20000,20000,20000;UQ=3000,3000,3000 defaults to disable. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. TODID/TOADDRESS Asset receiver did/address. ASSET Asset MST symbol. AMOUNT Asset integer bits. see asset <decimal_number>. Rule: target can be a valid DID or address Example: Send asset to specified DID Command: $ ./mvs-cli didsendasset test 123 BOB.DIID TEST.AST 10 { \"transaction\" : { \"hash\" : \"adb3509703c987a6c182d104426274d55ea8d8c5a50ccefda621e6e58a6f94b6\", \"inputs\" : [ { \"address\" : \"MLasJFxZQnA49XEvhTHmRKi2qstkj9ppjo\", \"previous_output\" : { \"hash\" : \"42e31a42ac1faf15c55431137a4940d082a9a513e8e1d1d39cba503e6b9890d0\", \"index\" : 0 }, \"script\" : \"[ 3045022100f995721c4d0b9468c6e64557f6b7d34ed81a1ed12dd516b25a5758c34a3ab5570220713b06b4041d74e509a557d3ee4637ef51fd9c42baac58f5796cb0bad33f4e4801 ] [ 0380990a7312b87abda80e5857ee6ebf798a2bf62041b07111287d19926c429d11 ]\", \"sequence\" : 4294967295 }, { \"address\" : \"MLasJFxZQnA49XEvhTHmRKi2qstkj9ppjo\", \"previous_output\" : { \"hash\" : \"421a2ea3eb45c67dd815a2a0f2de475aac08355134d33c92f9ee0dff20cc1498\", \"index\" : 2 }, \"script\" : \"[ 304502210096a9e1b48a2fc0ee86e2af01cb200ce8f2d06abe7e24de28b1bc2ade6ed2133602205e6feb6fbfcdfc92a55612f927ed729bc19c415e2f4d566e03d5ba4102fb659c01 ] [ 0380990a7312b87abda80e5857ee6ebf798a2bf62041b07111287d19926c429d11 ]\", \"sequence\" : 4294967295 } ], \"lock_time\" : \"0\", \"outputs\" : [ { \"address\" : \"MRyes39YXS3MJLf2fNVTtriVRY93v5HARr\", \"attachment\" : { \"from_did\" : \"\", \"quantity\" : 10, \"symbol\" : \"TEST.AST\", \"to_did\" : \"BOB.DIID\", \"type\" : \"asset-transfer\" }, \"index\" : 0, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ c64bd3fb0959db9212066496275e4d5a858f3e5e ] equalverify checksig\", \"value\" : 0 }, { \"address\" : \"MLasJFxZQnA49XEvhTHmRKi2qstkj9ppjo\", \"attachment\" : { \"type\" : \"etp\" }, \"index\" : 1, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ 8b24031888c2896cedb764012677868b5c64ef3b ] equalverify checksig\", \"value\" : 299990000 }, { \"address\" : \"MLasJFxZQnA49XEvhTHmRKi2qstkj9ppjo\", \"attachment\" : { \"quantity\" : 299969, \"symbol\" : \"TEST.AST\", \"type\" : \"asset-transfer\" }, \"index\" : 2, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ 8b24031888c2896cedb764012677868b5c64ef3b ] equalverify checksig\", \"value\" : 0 } ], \"version\" : \"4\" } } Send assets from the current DID Command: $ didsendassetfrom Usage: mvs-cli didsendassetfrom [-h] [--fee value] [--model value] ACCOUNTNAME ACCOUNTAUTH FROMDID/FROMADDRESS TODID/TOADDRESS SYMBOL AMOUNT Info: didsendassetfrom Options (named): -h [--help] Get a description and instructions for this command. -f [--fee] Transaction fee. defaults to 10000 ETP bits -m [--model] The token offering model by block height. TYPE=1 - fixed quantity model; TYPE=2 - specify parameters; LQ - Locked Quantity each period; LP - Locked Period, numeber of how many blocks; UN - Unlock Number, number of how many LPs; eg: TYPE=1;LQ=9000;LP=60000;UN=3 TYPE=2;LQ=9000;LP=60000;UN=3;UC=20000,20000,20000;UQ=3000,3000,3000 defaults to disable. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. FROMDID/FROMADDRESS From did/address TODID/TOADDRESS Target did/address SYMBOL Asset symbol AMOUNT Asset integer bits. see asset <decimal_number>. Rule: Can be a valid DID or address Example: Send asset to specified did Command: $ ./mvs-cli didsendassetfrom Alice 123 ALICE.DIID BOB.DIID ALICE.AST 10 { \"transaction\" : { \"hash\" : \"466041cd360b2111c3b92666d3815e0923a7f91352c95029115703edb09e42a4\", \"inputs\" : [ { \"address\" : \"MLasJFxZQnA49XEvhTHmRKi2qstkj9ppjo\", \"previous_output\" : { \"hash\" : \"f8dcd9379023752f64943fb4a66f067a381b1e0044cd5627d2e83fb98ec4487b\", \"index\" : 0 }, \"script\" : \"[ 304402200a03257b07dc5ca1ca15c10fbbf6196c04a14bdd608358f2fd70d68d49076b67022036fbb9c0499ce66b4b4d78a8813a0617078880562261ce23d91a0f463e3ff52601 ] [ 0380990a7312b87abda80e5857ee6ebf798a2bf62041b07111287d19926c429d11 ]\", \"sequence\" : 4294967295 }, { \"address\" : \"MLasJFxZQnA49XEvhTHmRKi2qstkj9ppjo\", \"previous_output\" : { \"hash\" : \"adb3509703c987a6c182d104426274d55ea8d8c5a50ccefda621e6e58a6f94b6\", \"index\" : 2 }, \"script\" : \"[ 304402206061388fb8c00c3534c81de1379dfd78d1837a511dfd6fef688ec7ca7fb2f129022039c69eee33ab092cce3d6e6fc643beb8677155071a0b9affdf0a55fff3bfea4b01 ] [ 0380990a7312b87abda80e5857ee6ebf798a2bf62041b07111287d19926c429d11 ]\", \"sequence\" : 4294967295 } ], \"lock_time\" : \"0\", \"outputs\" : [ { \"address\" : \"MRyes39YXS3MJLf2fNVTtriVRY93v5HARr\", \"attachment\" : { \"from_did\" : \"ALICE.DIID\", \"quantity\" : 10, \"symbol\" : \"ALICE.AST\", \"to_did\" : \"BOB.DIID\", \"type\" : \"asset-transfer\" }, \"index\" : 0, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ c64bd3fb0959db9212066496275e4d5a858f3e5e ] equalverify checksig\", \"value\" : 0 }, { \"address\" : \"MLasJFxZQnA49XEvhTHmRKi2qstkj9ppjo\", \"attachment\" : { \"type\" : \"etp\" }, \"index\" : 1, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ 8b24031888c2896cedb764012677868b5c64ef3b ] equalverify checksig\", \"value\" : 299990000 }, { \"address\" : \"MLasJFxZQnA49XEvhTHmRKi2qstkj9ppjo\", \"attachment\" : { \"quantity\" : 299959, \"symbol\" : \"ALICE.AST\", \"type\" : \"asset-transfer\" }, \"index\" : 2, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ 8b24031888c2896cedb764012677868b5c64ef3b ] equalverify checksig\", \"value\" : 0 } ], \"version\" : \"4\" } }","title":"DID Send ETP or Asset"},{"location":"didsendetp/#did-send-etp-or-asset","text":"","title":"DID Send ETP Or Asset"},{"location":"didsendetp/#send-etp-to-other-digital-identities","text":"Compatible with send interface Command: $ didsend Usage: mvs-cli didsend [-h] [--fee value] [--memo value] ACCOUNTNAME ACCOUNTAUTH TODID/TOADDRESS AMOUNT Info: send etp to a targert did/address, mychange goes to another existed address of this account. Options (named): -h [--help] Get a description and instructions for this command. -f [--fee] Transaction fee. defaults to 10000 etp bits -m [--memo] Attached memo for this transaction. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. TODID/TOADDRESS Send to this did/address AMOUNT ETP integer bits. Rule: Target can be did or address Example: Send to specific DID Command: $ ./mvs-cli didsend test 123 test.mvs 10000 Output\uff1a { \"transaction\" : { \"hash\" : \"d80b49572c9f2ffacb99a6371ce1ba8089712c3c1df9e0ce6a473229977e12f6\", \"inputs\" : [ { \"address\" : \"MLasJFxZQnA49XEvhTHmRKi2qstkj9ppjo\", \"previous_output\" : { \"hash\" : \"cbfa806c1d11f242cf8942a8ef11ff91bbdb80fb44fcb6e26c7892a5af1038fb\", \"index\" : 0 }, \"script\" : \"[ 3045022100b4ce8d84d69a5f8a67add65919ec12cb8549ce0428f3125b3f9cbc9234dc7d6702202f1808f48012cea6528635785a099c17f30b0c2ba3ce81e9c9cfb9f733e7bc0a01 ] [ 0380990a7312b87abda80e5857ee6ebf798a2bf62041b07111287d19926c429d11 ]\", \"sequence\" : 4294967295 } ], \"lock_time\" : \"0\", \"outputs\" : [ { \"address\" : \"M9kDHsDKJj9hM8FzSmDu4xCDbo2DFzUhzj\", \"attachment\" : { \"from_did\" : \"\", \"to_did\" : \"test.mvs\", \"type\" : \"etp\" }, \"index\" : 0, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ 143f0fc7d1186851be00b48bf526964b776af83b ] equalverify checksig\", \"value\" : 10000 }, { \"address\" : \"MLasJFxZQnA49XEvhTHmRKi2qstkj9ppjo\", \"attachment\" : { \"type\" : \"etp\" }, \"index\" : 1, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ 8b24031888c2896cedb764012677868b5c64ef3b ] equalverify checksig\", \"value\" : 299990000 } ], \"version\" : \"4\" } }","title":"Send etp to other digital identities"},{"location":"didsendetp/#send-etp-from-specified-did","text":"Compatible with sendfrom Command\uff1a \\$ didsendfrom Usage: mvs-cli didsendfrom [-h][--fee value] [--memo value] ACCOUNTNAME ACCOUNTAUTH FROMDID/FROMADDRESS TODID/TOADDRESS AMOUNT Info: send etp from a specified did/address of this account to target did/address, mychange goes to from_did/address. Options (named): -h [--help] Get a description and instructions for this command. -f [--fee] Transaction fee. defaults to 10000 ETP bits -m [--memo] The memo to descript transaction Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. FROMDID/FROMADDRESS Send from this did/address TODID/TOADDRESS Send to this did/address AMOUNT ETP integer bits. Rules: FROMDID / FROMADDRESS is the did or address under the current account Example: Send to specified DID Command: $ ./mvs-cli didsendfrom Alice 123 ALICE.DIID test.mvs 10000 Output\uff1a { \"transaction\" : { \"hash\" : \"df96c21487d697c45b94fe60188b070b7b23efc5074d02e89b84dca90dff964e\", \"inputs\" : [ { \"address\" : \"MLasJFxZQnA49XEvhTHmRKi2qstkj9ppjo\", \"previous_output\" : { \"hash\" : \"2ffe76571564b69b1940c54c50120c2e98e20b13b141d4d7dba8d95731a2f970\", \"index\" : 1 }, \"script\" : \"[ 3044022068060af455f5cf648d7dd846cba583947961a3dc17859eadd1a1b7163e58979402207c692e24edd83ec97f3eddf54bb7789ff305cc7b7e349e76872c371d7c0b08ca01 ] [ 0380990a7312b87abda80e5857ee6ebf798a2bf62041b07111287d19926c429d11 ]\", \"sequence\" : 4294967295 } ], \"lock_time\" : \"0\", \"outputs\" : [ { \"address\" : \"M9kDHsDKJj9hM8FzSmDu4xCDbo2DFzUhzj\", \"attachment\" : { \"from_did\" : \"ALICE.DIID\", \"to_did\" : \"test.mvs\", \"type\" : \"etp\" }, \"index\" : 0, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ 143f0fc7d1186851be00b48bf526964b776af83b ] equalverify checksig\", \"value\" : 10000 }, { \"address\" : \"MLasJFxZQnA49XEvhTHmRKi2qstkj9ppjo\", \"attachment\" : { \"type\" : \"etp\" }, \"index\" : 1, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ 8b24031888c2896cedb764012677868b5c64ef3b ] equalverify checksig\", \"value\" : 299960000 } ], \"version\" : \"4\" } }","title":"Send etp from specified DID"},{"location":"didsendetp/#send-to-multiple-did","text":"Compatible with sendmore Command\uff1a \\$ didsendmore Usage: mvs-cli didsendmore [-h] --receivers value [--fee value][--mychange value] ACCOUNTNAME ACCOUNTAUTH Info: send etp to multi target did/addresses. Eg: [didsendmore $name $password -r $did1/address1:$amount1 -r $did2/address2:$amount2 -m $mychange_address] Options (named): -h [--help] Send to more target. -f [--fee] Transaction fee. defaults to 10000 ETP bits -m [--mychange] Mychange to this did/address -r [--receivers] Send to [did/address:etp_bits]. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. Rules \"-r\" option specifies the destination DID (or address) and amount, you can add multiple; \"-m\" option specifies the DID or address of change Example: Send to multiple DID or addresses Command\uff1a $ ./mvs-cli didsendmore test 123 -r BOB.DIID:10000 -r M9kDHsDKJj9hM8FzSmDu4xCDbo2DFzUhzj:10000 -m MLasJFxZQnA49XEvhTHmRKi2qstkj9ppjo { \"transaction\" : { \"hash\" : \"efeceb068f7fff776b50d0a8d5d89e9f5ac7d1b85ed22f7efb9c83ae7fb3e7f7\", \"inputs\" : [ { \"address\" : \"MLasJFxZQnA49XEvhTHmRKi2qstkj9ppjo\", \"previous_output\" : { \"hash\" : \"4b702213d37c7c0f42b9e654ca7734ac6f64abbf38c145d96790512224e5f05d\", \"index\" : 1 }, \"script\" : \"[ 304402206e98df433008c0e837545807747583ed7717b7b1b42a3df4305c43bd1ef8cfa7022069056ae0a6f6dbb0bf6e23d2bab884588360b7375b74a5b21cf557409dc155f301 ] [ 0380990a7312b87abda80e5857ee6ebf798a2bf62041b07111287d19926c429d11 ]\", \"sequence\" : 4294967295 } ], \"lock_time\" : \"0\", \"outputs\" : [ { \"address\" : \"MRyes39YXS3MJLf2fNVTtriVRY93v5HARr\", \"attachment\" : { \"from_did\" : \"\", \"to_did\" : \"BOB.DIID\", \"type\" : \"etp\" }, \"index\" : 0, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ c64bd3fb0959db9212066496275e4d5a858f3e5e ] equalverify checksig\", \"value\" : 10000 }, { \"address\" : \"M9kDHsDKJj9hM8FzSmDu4xCDbo2DFzUhzj\", \"attachment\" : { \"type\" : \"etp\" }, \"index\" : 1, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ 143f0fc7d1186851be00b48bf526964b776af83b ] equalverify checksig\", \"value\" : 10000 }, { \"address\" : \"MLasJFxZQnA49XEvhTHmRKi2qstkj9ppjo\", \"attachment\" : { \"type\" : \"etp\" }, \"index\" : 2, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ 8b24031888c2896cedb764012677868b5c64ef3b ] equalverify checksig\", \"value\" : 73073199 } ], \"version\" : \"4\" } }","title":"Send to multiple DID"},{"location":"didsendetp/#send-assets-to-other-did","text":"Command\uff1a $ didsendasset Usage: mvs-cli didsendasset [-h] [--fee value] [--model value] ACCOUNTNAME ACCOUNTAUTH TODID/TOADDRESS ASSET AMOUNT Info: didsendasset Options (named): -h [--help] Get a description and instructions for this command. -f [--fee] Transaction fee. defaults to 10000 ETP bits -m [--model] The token offering model by block height. TYPE=1 - fixed quantity model; TYPE=2 - specify parameters; LQ - Locked Quantity each period; LP - Locked Period, numeber of how many blocks; UN - Unlock Number, number of how many LPs; eg: TYPE=1;LQ=9000;LP=60000;UN=3 TYPE=2;LQ=9000;LP=60000;UN=3;UC=20000,20000,20000;UQ=3000,3000,3000 defaults to disable. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. TODID/TOADDRESS Asset receiver did/address. ASSET Asset MST symbol. AMOUNT Asset integer bits. see asset <decimal_number>. Rule: target can be a valid DID or address Example: Send asset to specified DID Command: $ ./mvs-cli didsendasset test 123 BOB.DIID TEST.AST 10 { \"transaction\" : { \"hash\" : \"adb3509703c987a6c182d104426274d55ea8d8c5a50ccefda621e6e58a6f94b6\", \"inputs\" : [ { \"address\" : \"MLasJFxZQnA49XEvhTHmRKi2qstkj9ppjo\", \"previous_output\" : { \"hash\" : \"42e31a42ac1faf15c55431137a4940d082a9a513e8e1d1d39cba503e6b9890d0\", \"index\" : 0 }, \"script\" : \"[ 3045022100f995721c4d0b9468c6e64557f6b7d34ed81a1ed12dd516b25a5758c34a3ab5570220713b06b4041d74e509a557d3ee4637ef51fd9c42baac58f5796cb0bad33f4e4801 ] [ 0380990a7312b87abda80e5857ee6ebf798a2bf62041b07111287d19926c429d11 ]\", \"sequence\" : 4294967295 }, { \"address\" : \"MLasJFxZQnA49XEvhTHmRKi2qstkj9ppjo\", \"previous_output\" : { \"hash\" : \"421a2ea3eb45c67dd815a2a0f2de475aac08355134d33c92f9ee0dff20cc1498\", \"index\" : 2 }, \"script\" : \"[ 304502210096a9e1b48a2fc0ee86e2af01cb200ce8f2d06abe7e24de28b1bc2ade6ed2133602205e6feb6fbfcdfc92a55612f927ed729bc19c415e2f4d566e03d5ba4102fb659c01 ] [ 0380990a7312b87abda80e5857ee6ebf798a2bf62041b07111287d19926c429d11 ]\", \"sequence\" : 4294967295 } ], \"lock_time\" : \"0\", \"outputs\" : [ { \"address\" : \"MRyes39YXS3MJLf2fNVTtriVRY93v5HARr\", \"attachment\" : { \"from_did\" : \"\", \"quantity\" : 10, \"symbol\" : \"TEST.AST\", \"to_did\" : \"BOB.DIID\", \"type\" : \"asset-transfer\" }, \"index\" : 0, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ c64bd3fb0959db9212066496275e4d5a858f3e5e ] equalverify checksig\", \"value\" : 0 }, { \"address\" : \"MLasJFxZQnA49XEvhTHmRKi2qstkj9ppjo\", \"attachment\" : { \"type\" : \"etp\" }, \"index\" : 1, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ 8b24031888c2896cedb764012677868b5c64ef3b ] equalverify checksig\", \"value\" : 299990000 }, { \"address\" : \"MLasJFxZQnA49XEvhTHmRKi2qstkj9ppjo\", \"attachment\" : { \"quantity\" : 299969, \"symbol\" : \"TEST.AST\", \"type\" : \"asset-transfer\" }, \"index\" : 2, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ 8b24031888c2896cedb764012677868b5c64ef3b ] equalverify checksig\", \"value\" : 0 } ], \"version\" : \"4\" } }","title":"Send assets to other DID"},{"location":"didsendetp/#send-assets-from-the-current-did","text":"Command: $ didsendassetfrom Usage: mvs-cli didsendassetfrom [-h] [--fee value] [--model value] ACCOUNTNAME ACCOUNTAUTH FROMDID/FROMADDRESS TODID/TOADDRESS SYMBOL AMOUNT Info: didsendassetfrom Options (named): -h [--help] Get a description and instructions for this command. -f [--fee] Transaction fee. defaults to 10000 ETP bits -m [--model] The token offering model by block height. TYPE=1 - fixed quantity model; TYPE=2 - specify parameters; LQ - Locked Quantity each period; LP - Locked Period, numeber of how many blocks; UN - Unlock Number, number of how many LPs; eg: TYPE=1;LQ=9000;LP=60000;UN=3 TYPE=2;LQ=9000;LP=60000;UN=3;UC=20000,20000,20000;UQ=3000,3000,3000 defaults to disable. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. FROMDID/FROMADDRESS From did/address TODID/TOADDRESS Target did/address SYMBOL Asset symbol AMOUNT Asset integer bits. see asset <decimal_number>. Rule: Can be a valid DID or address Example: Send asset to specified did Command: $ ./mvs-cli didsendassetfrom Alice 123 ALICE.DIID BOB.DIID ALICE.AST 10 { \"transaction\" : { \"hash\" : \"466041cd360b2111c3b92666d3815e0923a7f91352c95029115703edb09e42a4\", \"inputs\" : [ { \"address\" : \"MLasJFxZQnA49XEvhTHmRKi2qstkj9ppjo\", \"previous_output\" : { \"hash\" : \"f8dcd9379023752f64943fb4a66f067a381b1e0044cd5627d2e83fb98ec4487b\", \"index\" : 0 }, \"script\" : \"[ 304402200a03257b07dc5ca1ca15c10fbbf6196c04a14bdd608358f2fd70d68d49076b67022036fbb9c0499ce66b4b4d78a8813a0617078880562261ce23d91a0f463e3ff52601 ] [ 0380990a7312b87abda80e5857ee6ebf798a2bf62041b07111287d19926c429d11 ]\", \"sequence\" : 4294967295 }, { \"address\" : \"MLasJFxZQnA49XEvhTHmRKi2qstkj9ppjo\", \"previous_output\" : { \"hash\" : \"adb3509703c987a6c182d104426274d55ea8d8c5a50ccefda621e6e58a6f94b6\", \"index\" : 2 }, \"script\" : \"[ 304402206061388fb8c00c3534c81de1379dfd78d1837a511dfd6fef688ec7ca7fb2f129022039c69eee33ab092cce3d6e6fc643beb8677155071a0b9affdf0a55fff3bfea4b01 ] [ 0380990a7312b87abda80e5857ee6ebf798a2bf62041b07111287d19926c429d11 ]\", \"sequence\" : 4294967295 } ], \"lock_time\" : \"0\", \"outputs\" : [ { \"address\" : \"MRyes39YXS3MJLf2fNVTtriVRY93v5HARr\", \"attachment\" : { \"from_did\" : \"ALICE.DIID\", \"quantity\" : 10, \"symbol\" : \"ALICE.AST\", \"to_did\" : \"BOB.DIID\", \"type\" : \"asset-transfer\" }, \"index\" : 0, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ c64bd3fb0959db9212066496275e4d5a858f3e5e ] equalverify checksig\", \"value\" : 0 }, { \"address\" : \"MLasJFxZQnA49XEvhTHmRKi2qstkj9ppjo\", \"attachment\" : { \"type\" : \"etp\" }, \"index\" : 1, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ 8b24031888c2896cedb764012677868b5c64ef3b ] equalverify checksig\", \"value\" : 299990000 }, { \"address\" : \"MLasJFxZQnA49XEvhTHmRKi2qstkj9ppjo\", \"attachment\" : { \"quantity\" : 299959, \"symbol\" : \"ALICE.AST\", \"type\" : \"asset-transfer\" }, \"index\" : 2, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ 8b24031888c2896cedb764012677868b5c64ef3b ] equalverify checksig\", \"value\" : 0 } ], \"version\" : \"4\" } }","title":"Send assets from the current DID"},{"location":"didtransfer/","text":"Digital Identity Transfer The digital identity can be migrated by changing the address; if you want to transfer the digital identity from user 1 to user 2, you can first transfer to the multi-signature address of two people, and then transfer from the multi-signature address to the public key address of user 2 each time The process requires multi-signature confirmation and a certain fee; transfer of digital identity requires verification of the current account and destination address. If you need to migrate to a multi-signature address, multiple people need to confirm the signature of the migration transaction. Command: $ didchangeaddress Usage: mvs-cli didchangeaddress [-h] [--fee value] ACCOUNTNAME ACCOUNTAUTH TOADDRESS DIDSYMBOL Info: didchangeaddress Options (named): -h [--help] Get a description and instructions for this command. -f [--fee] Transaction fee. defaults to 10000 ETP bits Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. TOADDRESS Target address DIDSYMBOL Did symbol Rule\uff1a TOADDRESS is a valid address under the current account and is not bound to another did Example: transfer did to another address of the current account Command: $ /mvs-cli didchangeaddress test 123 MP5FoYQHiEQ52pcEURkaYmuqZMnYHNAZ83 test.mvs \u8f93\u51fa\uff1a { \"transaction\" : { \"hash\" : \"018a877766c95f97bbf8d710867a4a4266eeb2c12fa16442166f7e5c411a1ac1\", \"inputs\" : [ { \"address\" : \"MP5FoYQHiEQ52pcEURkaYmuqZMnYHNAZ83\", \"previous_output\" : { \"hash\" : \"e38c3347b2d23dc0dd524c3cad5bd75835e787b4abb0baee67b0f93a7d988805\", \"index\" : 0 }, \"script\" : \"[ 30440220242c0e31ffc0ba07874f4910e7ec10070c1004d1eeb0fe4f95943565ba615b7602203b3889a281f0f2f2dcff2a29419d14998e7910f74acacf328ea495a3171f3e6c01 ] [ 028d6413e29808640ed5727546e62aec9a66f39465293db31eeaf2810314aa3ab2 ]\", \"sequence\" : 4294967295 }, { \"address\" : \"M9L3ipy3Hcf6kdvknU3mH7mwH9ER3uCziu\", \"previous_output\" : { \"hash\" : \"4d5ae5bfdd89d30a771680cd3080478e741ff1bea65b4903ea42160952c0c9e8\", \"index\" : 0 }, \"script\" : \"[ 304502210099ba2727501df331fc9c48095c117adfd5a58ee8950b9610ce39de026d3ff01c02207aa5de45c6546b46113cd8e2c0fa44762600d1db7b27d26e6d13e5acf4dc8fe401 ] [ 035f572a164ec0e7d8f1935e357d86c6441152bed7251389a1c66174ae890dad90 ]\", \"sequence\" : 4294967295 } ], \"lock_time\" : \"0\", \"outputs\" : [ { \"address\" : \"MP5FoYQHiEQ52pcEURkaYmuqZMnYHNAZ83\", \"attachment\" : { \"address\" : \"MP5FoYQHiEQ52pcEURkaYmuqZMnYHNAZ83\", \"symbol\" : \"test.mvs\", \"type\" : \"did-transfer\" }, \"index\" : 0, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ a672b25c96da4a80a1f0f78d44515716e776d52a ] equalverify checksig\", \"value\" : 0 } ], \"version\" : \"4\" } } After waiting for the transaction to enter the block, check the migration record command of: $ ./mvs-cli getdid test.mvs output: { \"addresses\" : [ { \"address\" : \"MP5FoYQHiEQ52pcEURkaYmuqZMnYHNAZ83\", \"status\" : \"current\" }, { \"address\" : \"M9L3ipy3Hcf6kdvknU3mH7mwH9ER3uCziu\", \"status\" : \"history\" } ], \"did\" : \"test.mvs\" } Example: transfer did to a multi-signature address, 35cY636TPTfFW8PxhqH3BNRL54g1T4mbR2 is a multi-signature address for test and test 2 Command\uff1a $ ./mvscli didchangeaddress test 123 35cY636TPTfFW8PxhqH3BNRL54g1T4mbR2 test.mvs \u8f93\u51fa: 0400000002e2ff847f7f660baae489cc219c25982b6b6c00afddc238ad92767017246917c00000000093004830450221009f620f2316ce9b5d803f7651e09971443d6cb46da47619f870148551d29ac00f022016aa63ffde9c336b8e5a094eab14007c4eea9ba3755a7494e45d13527b990d6c014c475221023a5277232a4f9a08c83a968440c85b3a81fe43f86113342c08687bc9eb94c05f21028d6413e29808640ed5727546e62aec9a66f39465293db31eeaf2810314aa3ab252aeffffffffc11a1a415c7e6f164264a12fc1b2ee66424a7a8610d7f8bb975fc96677878a01000000006a473044022033c3646519579094f35f10d7dcbc443f4fac1a1346146b1d50772d88f6fa5802022057b250d9097d1cebffae67559a3cd95870ada89a1cd26470cc0d26fcbafab3720121028d6413e29808640ed5727546e62aec9a66f39465293db31eeaf2810314aa3ab2ffffffff01000000000000000017a9142b079a4a2c1354791df4341d86ff7983426b3a9f87010000000400000002000000036c7866223335635936333654505466465738507868714833424e524c3534673154346d62523200000000 \u7b7e\u540d\u4ea4\u6613\u5e76\u5e7f\u64ad\uff1a \u547d\u4ee4\uff1a $ ./mvs-clisignmultisigtx test2 123 -b 0400000002e2ff847f7f660baae489cc219c25982b6b6c00afddc238ad92767017246917c00000000093004830450221009f620f2316ce9b5d803f7651e09971443d6cb46da47619f870148551d29ac00f022016aa63ffde9c336b8e5a094eab14007c4eea9ba3755a7494e45d13527b990d6c014c475221023a5277232a4f9a08c83a968440c85b3a81fe43f86113342c08687bc9eb94c05f21028d6413e29808640ed5727546e62aec9a66f39465293db31eeaf2810314aa3ab252aeffffffffc11a1a415c7e6f164264a12fc1b2ee66424a7a8610d7f8bb975fc96677878a01000000006a473044022033c3646519579094f35f10d7dcbc443f4fac1a1346146b1d50772d88f6fa5802022057b250d9097d1cebffae67559a3cd95870ada89a1cd26470cc0d26fcbafab3720121028d6413e29808640ed5727546e62aec9a66f39465293db31eeaf2810314aa3ab2ffffffff01000000000000000017a9142b079a4a2c1354791df4341d86ff7983426b3a9f87010000000400000002000000036c7866223335635936333654505466465738507868714833424e524c3534673154346d62523200000000 \u8f93\u51fa\uff1a 0400000002e2ff847f7f660baae489cc219c25982b6b6c00afddc238ad92767017246917c000000000dc00483045022100e76e63c4f77ec03be48be1e1b5f0ca5ef344ce2d72d718b0dd958ceae74f4225022071599344cc3a03601d45ad387f2e022674e5785a2655fdbb1df2ea1c80818544014830450221009f620f2316ce9b5d803f7651e09971443d6cb46da47619f870148551d29ac00f022016aa63ffde9c336b8e5a094eab14007c4eea9ba3755a7494e45d13527b990d6c014c475221023a5277232a4f9a08c83a968440c85b3a81fe43f86113342c08687bc9eb94c05f21028d6413e29808640ed5727546e62aec9a66f39465293db31eeaf2810314aa3ab252aeffffffffc11a1a415c7e6f164264a12fc1b2ee66424a7a8610d7f8bb975fc96677878a01000000006a473044022033c3646519579094f35f10d7dcbc443f4fac1a1346146b1d50772d88f6fa5802022057b250d9097d1cebffae67559a3cd95870ada89a1cd26470cc0d26fcbafab3720121028d6413e29808640ed5727546e62aec9a66f39465293db31eeaf2810314aa3ab2ffffffff01000000000000000017a9142b079a4a2c1354791df4341d86ff7983426b3a9f87010000000400000002000000036c7866223335635936333654505466465738507868714833424e524c3534673154346d62523200000000 \u7b49\u5f85\u4ea4\u6613\u5165\u5757\u540e\u67e5\u770btest.mvs\u7684\u8fc1\u79fb\u8bb0\u5f55 \u547d\u4ee4: $ ./mvs-cli getdid test.mvs \u8f93\u51fa: { \"addresses\" : [ { \"address\" : \"35cY636TPTfFW8PxhqH3BNRL54g1T4mbR2\", \"status\" : \"current\" }, { \"address\" : \"MP5FoYQHiEQ52pcEURkaYmuqZMnYHNAZ83\", \"status\" : \"history\" }, { \"address\" : \"M9L3ipy3Hcf6kdvknU3mH7mwH9ER3uCziu\", \"status\" : \"history\" } ], \"did\" : \"test.mvs\" } Example: did from multi-signature address to general address Command: $ ./mvscli didchangeaddress test2 123 M9kDHsDKJj9hM8FzSmDu4xCDbo2DFzUhzj test.mvs Output: 0400000002fe8ecb0c9d91147996f7cb1d2abbc2fd70253fa40a5138070167599d5125c6be000000009300483045022100a395d37e15d7e1110a53fd0f79572849511652c6a7f830a59a1f777e6d2beceb02207a9a059f935c8658595d658ea49e1a82a1a4ac501de55b522f58bd8f1f62a916014c475221023a5277232a4f9a08c83a968440c85b3a81fe43f86113342c08687bc9eb94c05f21028d6413e29808640ed5727546e62aec9a66f39465293db31eeaf2810314aa3ab252aeffffffffe2ff847f7f660baae489cc219c25982b6b6c00afddc238ad92767017246917c0010000006a47304402207f71094ebe0767c6593f8c749432b49ad981e5471af618bcf620ad6b249fb04b02204d00da73a85ed34016139772a982ba4bc003e5447fac07ffbf0163a43080dad60121023a5277232a4f9a08c83a968440c85b3a81fe43f86113342c08687bc9eb94c05fffffffff0100000000000000001976a914143f0fc7d1186851be00b48bf526964b776af83b88ac010000000400000002000000036c7866224d396b444873444b4a6a39684d38467a536d447534784344626f3244467a55687a6a00000000 Sign the transaction and broadcast: Command\uff1a $ ./mvs-clisignmultisigtx test 123 -b 0400000002fe8ecb0c9d91147996f7cb1d2abbc2fd70253fa40a5138070167599d5125c6be000000009300483045022100a395d37e15d7e1110a53fd0f79572849511652c6a7f830a59a1f777e6d2beceb02207a9a059f935c8658595d658ea49e1a82a1a4ac501de55b522f58bd8f1f62a916014c475221023a5277232a4f9a08c83a968440c85b3a81fe43f86113342c08687bc9eb94c05f21028d6413e29808640ed5727546e62aec9a66f39465293db31eeaf2810314aa3ab252aeffffffffe2ff847f7f660baae489cc219c25982b6b6c00afddc238ad92767017246917c0010000006a47304402207f71094ebe0767c6593f8c749432b49ad981e5471af618bcf620ad6b249fb04b02204d00da73a85ed34016139772a982ba4bc003e5447fac07ffbf0163a43080dad60121023a5277232a4f9a08c83a968440c85b3a81fe43f86113342c08687bc9eb94c05fffffffff0100000000000000001976a914143f0fc7d1186851be00b48bf526964b776af83b88ac010000000400000002000000036c7866224d396b444873444b4a6a39684d38467a536d447534784344626f3244467a55687a6a00000000 \u8f93\u51fa\uff1a 0400000002fe8ecb0c9d91147996f7cb1d2abbc2fd70253fa40a5138070167599d5125c6be00000000db00483045022100a395d37e15d7e1110a53fd0f79572849511652c6a7f830a59a1f777e6d2beceb02207a9a059f935c8658595d658ea49e1a82a1a4ac501de55b522f58bd8f1f62a9160147304402202e860ee7cb122577102a9423be059a3a994c9e2804b9decdd6771c42d158f42f0220226e3e445309620184263d5dc059495ff8c379525a19636485cfb9cadbac92b7014c475221023a5277232a4f9a08c83a968440c85b3a81fe43f86113342c08687bc9eb94c05f21028d6413e29808640ed5727546e62aec9a66f39465293db31eeaf2810314aa3ab252aeffffffffe2ff847f7f660baae489cc219c25982b6b6c00afddc238ad92767017246917c0010000006a47304402207f71094ebe0767c6593f8c749432b49ad981e5471af618bcf620ad6b249fb04b02204d00da73a85ed34016139772a982ba4bc003e5447fac07ffbf0163a43080dad60121023a5277232a4f9a08c83a968440c85b3a81fe43f86113342c08687bc9eb94c05fffffffff0100000000000000001976a914143f0fc7d1186851be00b48bf526964b776af83b88ac010000000400000002000000036c7866224d396b444873444b4a6a39684d38467a536d447534784344626f3244467a55687a6a00000000 After waiting for the transaction to enter the block, check the migration record command of: $ ./mvs-cli getdid test.mvs output: { \"addresses\" : [ { \"address\" : \"M9kDHsDKJj9hM8FzSmDu4xCDbo2DFzUhzj\", \"status\" : \"current\" }, { \"address\" : \"35cY636TPTfFW8PxhqH3BNRL54g1T4mbR2\", \"status\" : \"history\" }, { \"address\" : \"MP5FoYQHiEQ52pcEURkaYmuqZMnYHNAZ83\", \"status\" : \"history\" }, { \"address\" : \"M9L3ipy3Hcf6kdvknU3mH7mwH9ER3uCziu\", \"status\" : \"history\" } ], \"did\" : \"test.mvs\" }","title":"DID Transfer"},{"location":"didtransfer/#digital-identity-transfer","text":"The digital identity can be migrated by changing the address; if you want to transfer the digital identity from user 1 to user 2, you can first transfer to the multi-signature address of two people, and then transfer from the multi-signature address to the public key address of user 2 each time The process requires multi-signature confirmation and a certain fee; transfer of digital identity requires verification of the current account and destination address. If you need to migrate to a multi-signature address, multiple people need to confirm the signature of the migration transaction. Command: $ didchangeaddress Usage: mvs-cli didchangeaddress [-h] [--fee value] ACCOUNTNAME ACCOUNTAUTH TOADDRESS DIDSYMBOL Info: didchangeaddress Options (named): -h [--help] Get a description and instructions for this command. -f [--fee] Transaction fee. defaults to 10000 ETP bits Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. TOADDRESS Target address DIDSYMBOL Did symbol Rule\uff1a TOADDRESS is a valid address under the current account and is not bound to another did Example: transfer did to another address of the current account Command: $ /mvs-cli didchangeaddress test 123 MP5FoYQHiEQ52pcEURkaYmuqZMnYHNAZ83 test.mvs \u8f93\u51fa\uff1a { \"transaction\" : { \"hash\" : \"018a877766c95f97bbf8d710867a4a4266eeb2c12fa16442166f7e5c411a1ac1\", \"inputs\" : [ { \"address\" : \"MP5FoYQHiEQ52pcEURkaYmuqZMnYHNAZ83\", \"previous_output\" : { \"hash\" : \"e38c3347b2d23dc0dd524c3cad5bd75835e787b4abb0baee67b0f93a7d988805\", \"index\" : 0 }, \"script\" : \"[ 30440220242c0e31ffc0ba07874f4910e7ec10070c1004d1eeb0fe4f95943565ba615b7602203b3889a281f0f2f2dcff2a29419d14998e7910f74acacf328ea495a3171f3e6c01 ] [ 028d6413e29808640ed5727546e62aec9a66f39465293db31eeaf2810314aa3ab2 ]\", \"sequence\" : 4294967295 }, { \"address\" : \"M9L3ipy3Hcf6kdvknU3mH7mwH9ER3uCziu\", \"previous_output\" : { \"hash\" : \"4d5ae5bfdd89d30a771680cd3080478e741ff1bea65b4903ea42160952c0c9e8\", \"index\" : 0 }, \"script\" : \"[ 304502210099ba2727501df331fc9c48095c117adfd5a58ee8950b9610ce39de026d3ff01c02207aa5de45c6546b46113cd8e2c0fa44762600d1db7b27d26e6d13e5acf4dc8fe401 ] [ 035f572a164ec0e7d8f1935e357d86c6441152bed7251389a1c66174ae890dad90 ]\", \"sequence\" : 4294967295 } ], \"lock_time\" : \"0\", \"outputs\" : [ { \"address\" : \"MP5FoYQHiEQ52pcEURkaYmuqZMnYHNAZ83\", \"attachment\" : { \"address\" : \"MP5FoYQHiEQ52pcEURkaYmuqZMnYHNAZ83\", \"symbol\" : \"test.mvs\", \"type\" : \"did-transfer\" }, \"index\" : 0, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ a672b25c96da4a80a1f0f78d44515716e776d52a ] equalverify checksig\", \"value\" : 0 } ], \"version\" : \"4\" } } After waiting for the transaction to enter the block, check the migration record command of: $ ./mvs-cli getdid test.mvs output: { \"addresses\" : [ { \"address\" : \"MP5FoYQHiEQ52pcEURkaYmuqZMnYHNAZ83\", \"status\" : \"current\" }, { \"address\" : \"M9L3ipy3Hcf6kdvknU3mH7mwH9ER3uCziu\", \"status\" : \"history\" } ], \"did\" : \"test.mvs\" } Example: transfer did to a multi-signature address, 35cY636TPTfFW8PxhqH3BNRL54g1T4mbR2 is a multi-signature address for test and test 2 Command\uff1a $ ./mvscli didchangeaddress test 123 35cY636TPTfFW8PxhqH3BNRL54g1T4mbR2 test.mvs \u8f93\u51fa: 0400000002e2ff847f7f660baae489cc219c25982b6b6c00afddc238ad92767017246917c00000000093004830450221009f620f2316ce9b5d803f7651e09971443d6cb46da47619f870148551d29ac00f022016aa63ffde9c336b8e5a094eab14007c4eea9ba3755a7494e45d13527b990d6c014c475221023a5277232a4f9a08c83a968440c85b3a81fe43f86113342c08687bc9eb94c05f21028d6413e29808640ed5727546e62aec9a66f39465293db31eeaf2810314aa3ab252aeffffffffc11a1a415c7e6f164264a12fc1b2ee66424a7a8610d7f8bb975fc96677878a01000000006a473044022033c3646519579094f35f10d7dcbc443f4fac1a1346146b1d50772d88f6fa5802022057b250d9097d1cebffae67559a3cd95870ada89a1cd26470cc0d26fcbafab3720121028d6413e29808640ed5727546e62aec9a66f39465293db31eeaf2810314aa3ab2ffffffff01000000000000000017a9142b079a4a2c1354791df4341d86ff7983426b3a9f87010000000400000002000000036c7866223335635936333654505466465738507868714833424e524c3534673154346d62523200000000 \u7b7e\u540d\u4ea4\u6613\u5e76\u5e7f\u64ad\uff1a \u547d\u4ee4\uff1a $ ./mvs-clisignmultisigtx test2 123 -b 0400000002e2ff847f7f660baae489cc219c25982b6b6c00afddc238ad92767017246917c00000000093004830450221009f620f2316ce9b5d803f7651e09971443d6cb46da47619f870148551d29ac00f022016aa63ffde9c336b8e5a094eab14007c4eea9ba3755a7494e45d13527b990d6c014c475221023a5277232a4f9a08c83a968440c85b3a81fe43f86113342c08687bc9eb94c05f21028d6413e29808640ed5727546e62aec9a66f39465293db31eeaf2810314aa3ab252aeffffffffc11a1a415c7e6f164264a12fc1b2ee66424a7a8610d7f8bb975fc96677878a01000000006a473044022033c3646519579094f35f10d7dcbc443f4fac1a1346146b1d50772d88f6fa5802022057b250d9097d1cebffae67559a3cd95870ada89a1cd26470cc0d26fcbafab3720121028d6413e29808640ed5727546e62aec9a66f39465293db31eeaf2810314aa3ab2ffffffff01000000000000000017a9142b079a4a2c1354791df4341d86ff7983426b3a9f87010000000400000002000000036c7866223335635936333654505466465738507868714833424e524c3534673154346d62523200000000 \u8f93\u51fa\uff1a 0400000002e2ff847f7f660baae489cc219c25982b6b6c00afddc238ad92767017246917c000000000dc00483045022100e76e63c4f77ec03be48be1e1b5f0ca5ef344ce2d72d718b0dd958ceae74f4225022071599344cc3a03601d45ad387f2e022674e5785a2655fdbb1df2ea1c80818544014830450221009f620f2316ce9b5d803f7651e09971443d6cb46da47619f870148551d29ac00f022016aa63ffde9c336b8e5a094eab14007c4eea9ba3755a7494e45d13527b990d6c014c475221023a5277232a4f9a08c83a968440c85b3a81fe43f86113342c08687bc9eb94c05f21028d6413e29808640ed5727546e62aec9a66f39465293db31eeaf2810314aa3ab252aeffffffffc11a1a415c7e6f164264a12fc1b2ee66424a7a8610d7f8bb975fc96677878a01000000006a473044022033c3646519579094f35f10d7dcbc443f4fac1a1346146b1d50772d88f6fa5802022057b250d9097d1cebffae67559a3cd95870ada89a1cd26470cc0d26fcbafab3720121028d6413e29808640ed5727546e62aec9a66f39465293db31eeaf2810314aa3ab2ffffffff01000000000000000017a9142b079a4a2c1354791df4341d86ff7983426b3a9f87010000000400000002000000036c7866223335635936333654505466465738507868714833424e524c3534673154346d62523200000000 \u7b49\u5f85\u4ea4\u6613\u5165\u5757\u540e\u67e5\u770btest.mvs\u7684\u8fc1\u79fb\u8bb0\u5f55 \u547d\u4ee4: $ ./mvs-cli getdid test.mvs \u8f93\u51fa: { \"addresses\" : [ { \"address\" : \"35cY636TPTfFW8PxhqH3BNRL54g1T4mbR2\", \"status\" : \"current\" }, { \"address\" : \"MP5FoYQHiEQ52pcEURkaYmuqZMnYHNAZ83\", \"status\" : \"history\" }, { \"address\" : \"M9L3ipy3Hcf6kdvknU3mH7mwH9ER3uCziu\", \"status\" : \"history\" } ], \"did\" : \"test.mvs\" } Example: did from multi-signature address to general address Command: $ ./mvscli didchangeaddress test2 123 M9kDHsDKJj9hM8FzSmDu4xCDbo2DFzUhzj test.mvs Output: 0400000002fe8ecb0c9d91147996f7cb1d2abbc2fd70253fa40a5138070167599d5125c6be000000009300483045022100a395d37e15d7e1110a53fd0f79572849511652c6a7f830a59a1f777e6d2beceb02207a9a059f935c8658595d658ea49e1a82a1a4ac501de55b522f58bd8f1f62a916014c475221023a5277232a4f9a08c83a968440c85b3a81fe43f86113342c08687bc9eb94c05f21028d6413e29808640ed5727546e62aec9a66f39465293db31eeaf2810314aa3ab252aeffffffffe2ff847f7f660baae489cc219c25982b6b6c00afddc238ad92767017246917c0010000006a47304402207f71094ebe0767c6593f8c749432b49ad981e5471af618bcf620ad6b249fb04b02204d00da73a85ed34016139772a982ba4bc003e5447fac07ffbf0163a43080dad60121023a5277232a4f9a08c83a968440c85b3a81fe43f86113342c08687bc9eb94c05fffffffff0100000000000000001976a914143f0fc7d1186851be00b48bf526964b776af83b88ac010000000400000002000000036c7866224d396b444873444b4a6a39684d38467a536d447534784344626f3244467a55687a6a00000000 Sign the transaction and broadcast: Command\uff1a $ ./mvs-clisignmultisigtx test 123 -b 0400000002fe8ecb0c9d91147996f7cb1d2abbc2fd70253fa40a5138070167599d5125c6be000000009300483045022100a395d37e15d7e1110a53fd0f79572849511652c6a7f830a59a1f777e6d2beceb02207a9a059f935c8658595d658ea49e1a82a1a4ac501de55b522f58bd8f1f62a916014c475221023a5277232a4f9a08c83a968440c85b3a81fe43f86113342c08687bc9eb94c05f21028d6413e29808640ed5727546e62aec9a66f39465293db31eeaf2810314aa3ab252aeffffffffe2ff847f7f660baae489cc219c25982b6b6c00afddc238ad92767017246917c0010000006a47304402207f71094ebe0767c6593f8c749432b49ad981e5471af618bcf620ad6b249fb04b02204d00da73a85ed34016139772a982ba4bc003e5447fac07ffbf0163a43080dad60121023a5277232a4f9a08c83a968440c85b3a81fe43f86113342c08687bc9eb94c05fffffffff0100000000000000001976a914143f0fc7d1186851be00b48bf526964b776af83b88ac010000000400000002000000036c7866224d396b444873444b4a6a39684d38467a536d447534784344626f3244467a55687a6a00000000 \u8f93\u51fa\uff1a 0400000002fe8ecb0c9d91147996f7cb1d2abbc2fd70253fa40a5138070167599d5125c6be00000000db00483045022100a395d37e15d7e1110a53fd0f79572849511652c6a7f830a59a1f777e6d2beceb02207a9a059f935c8658595d658ea49e1a82a1a4ac501de55b522f58bd8f1f62a9160147304402202e860ee7cb122577102a9423be059a3a994c9e2804b9decdd6771c42d158f42f0220226e3e445309620184263d5dc059495ff8c379525a19636485cfb9cadbac92b7014c475221023a5277232a4f9a08c83a968440c85b3a81fe43f86113342c08687bc9eb94c05f21028d6413e29808640ed5727546e62aec9a66f39465293db31eeaf2810314aa3ab252aeffffffffe2ff847f7f660baae489cc219c25982b6b6c00afddc238ad92767017246917c0010000006a47304402207f71094ebe0767c6593f8c749432b49ad981e5471af618bcf620ad6b249fb04b02204d00da73a85ed34016139772a982ba4bc003e5447fac07ffbf0163a43080dad60121023a5277232a4f9a08c83a968440c85b3a81fe43f86113342c08687bc9eb94c05fffffffff0100000000000000001976a914143f0fc7d1186851be00b48bf526964b776af83b88ac010000000400000002000000036c7866224d396b444873444b4a6a39684d38467a536d447534784344626f3244467a55687a6a00000000 After waiting for the transaction to enter the block, check the migration record command of: $ ./mvs-cli getdid test.mvs output: { \"addresses\" : [ { \"address\" : \"M9kDHsDKJj9hM8FzSmDu4xCDbo2DFzUhzj\", \"status\" : \"current\" }, { \"address\" : \"35cY636TPTfFW8PxhqH3BNRL54g1T4mbR2\", \"status\" : \"history\" }, { \"address\" : \"MP5FoYQHiEQ52pcEURkaYmuqZMnYHNAZ83\", \"status\" : \"history\" }, { \"address\" : \"M9L3ipy3Hcf6kdvknU3mH7mwH9ER3uCziu\", \"status\" : \"history\" } ], \"did\" : \"test.mvs\" }","title":"Digital Identity Transfer"},{"location":"didusage/","text":"Digital Identity (Avatar) Usage registered Before registering a digital identity, you must have an already created account. You need to pay 1 etp to pay the commission fee at the destination address. After the registration is successfully integrated into the block, you can use it to send transactions. Registering a digital identity requires parameters: account, account password, Destination address, digital identity sign. Command\uff1a $ registerdid Usage: mvs-cli registerdid [-h] [--fee value] ACCOUNTNAME ACCOUNTAUTH ADDRESS SYMBOL Info: registerdid Options (named): -h [--help] Get a description and instructions for this command. -f [--fee] The fee of tx. defaults to 1 etp. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. ADDRESS The address will be bound to, can change to other addresses later. SYMBOL The symbol of global unique MVS Digital Identity Destination/Index, supports alphabets/numbers/(\u201c@\u201d, \u201c.\u201d, \u201c_\u201d, \u201c-\u201c), case-sensitive, maximum length is 64. \u89c4\u5219\uff1a ADDRESS\u5c5e\u4e8e\u5f53\u524d\u8d26\u6237; SYMBOL\u7531\u5b57\u6bcd\u3001\u6570\u5b57\u548c\u7279\u6b8a\u5b57\u7b26(\"@\",\".\",\"_\",\"-\")\u7ec4\u6210\uff0c\u5927\u5c0f\u5199\u654f\u611f\uff0c\u6700\u5927\u957f\u5ea6\u4e0d\u80fd\u8d85\u8fc764; SYMBOL\u4e0d\u80fd\u4e3a\u6709\u6548\u5730\u5740\u5e76\u4e14\u5728\u94fe\u4e0a\u4e0d\u80fd\u91cd\u590d; SYMBOL\u4e0d\u80fd\u4e3a\u5173\u952e\u5b57\"BLACKHOLE\"\u3002\"BLACKHOLE\"\u5927\u5c0f\u5199\u4e0d\u654f\u611f\uff0c\u5373\"BLACKHOLE\",\"blockhole\",\"BlockHole\"\u7b49\u5f62\u5f0f\u90fd\u662f\u65e0\u6548\u7684SYMBOL; SYMBOL\u4e0d\u80fd\u4e3a\u653f\u6cbb\u76f8\u5173\u7684\u654f\u611f\u8bcd; \u6ce8\u518cdid\u81f3\u5c11\u9700\u89811\u4e2aetp Example: Use the account 'test' to register the digital identity with the name 'test.mvs' and bind it to a valid address 'M9L3ipy3Hcf6kdvknU3mH7mwH9ER3uCziu' Command: $ ./mvs-cli registerdid test 123 M9L3ipy3Hcf6kdvknU3mH7mwH9ER3uCziu test.mvs \u8f93\u51fa\uff1a { \"transaction\" : { \"hash\" : \"4d5ae5bfdd89d30a771680cd3080478e741ff1bea65b4903ea42160952c0c9e8\", \"inputs\" : [ { \"address\" : \"M9L3ipy3Hcf6kdvknU3mH7mwH9ER3uCziu\", \"previous_output\" : { \"hash\" : \"a7db09dcf9e8d9341f8343a6f1edfb2fd1fdf350ccef8f3517b446eeb2d73076\", \"index\" : 0 }, \"script\" : \"[ 304402201c9b9706b3e198e9de8887c94c6e7f1192a65cb1fa15318b409f6d4fc4952f9a0220306d2f5fcdf2e1e32861399dc55b7c81a1cedc7790d2ff8a73a8bb3f9bac5fde01 ] [ 035f572a164ec0e7d8f1935e357d86c6441152bed7251389a1c66174ae890dad90 ]\", \"sequence\" : 4294967295 } ], \"lock_time\" : \"0\", \"outputs\" : [ { \"address\" : \"M9L3ipy3Hcf6kdvknU3mH7mwH9ER3uCziu\", \"attachment\" : { \"address\" : \"M9L3ipy3Hcf6kdvknU3mH7mwH9ER3uCziu\", \"symbol\" : \"test.mvs\", \"type\" : \"did-register\" }, \"index\" : 0, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ 0fad171975f1100309022c83c7b9dca0a8f8e6b8 ] equalverify checksig\", \"value\" : 0 } ], \"version\" : \"4\" } }","title":"Digital Identity (Avatar) Usage"},{"location":"didusage/#digital-identity-avatar-usage","text":"registered Before registering a digital identity, you must have an already created account. You need to pay 1 etp to pay the commission fee at the destination address. After the registration is successfully integrated into the block, you can use it to send transactions. Registering a digital identity requires parameters: account, account password, Destination address, digital identity sign. Command\uff1a $ registerdid Usage: mvs-cli registerdid [-h] [--fee value] ACCOUNTNAME ACCOUNTAUTH ADDRESS SYMBOL Info: registerdid Options (named): -h [--help] Get a description and instructions for this command. -f [--fee] The fee of tx. defaults to 1 etp. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. ADDRESS The address will be bound to, can change to other addresses later. SYMBOL The symbol of global unique MVS Digital Identity Destination/Index, supports alphabets/numbers/(\u201c@\u201d, \u201c.\u201d, \u201c_\u201d, \u201c-\u201c), case-sensitive, maximum length is 64. \u89c4\u5219\uff1a ADDRESS\u5c5e\u4e8e\u5f53\u524d\u8d26\u6237; SYMBOL\u7531\u5b57\u6bcd\u3001\u6570\u5b57\u548c\u7279\u6b8a\u5b57\u7b26(\"@\",\".\",\"_\",\"-\")\u7ec4\u6210\uff0c\u5927\u5c0f\u5199\u654f\u611f\uff0c\u6700\u5927\u957f\u5ea6\u4e0d\u80fd\u8d85\u8fc764; SYMBOL\u4e0d\u80fd\u4e3a\u6709\u6548\u5730\u5740\u5e76\u4e14\u5728\u94fe\u4e0a\u4e0d\u80fd\u91cd\u590d; SYMBOL\u4e0d\u80fd\u4e3a\u5173\u952e\u5b57\"BLACKHOLE\"\u3002\"BLACKHOLE\"\u5927\u5c0f\u5199\u4e0d\u654f\u611f\uff0c\u5373\"BLACKHOLE\",\"blockhole\",\"BlockHole\"\u7b49\u5f62\u5f0f\u90fd\u662f\u65e0\u6548\u7684SYMBOL; SYMBOL\u4e0d\u80fd\u4e3a\u653f\u6cbb\u76f8\u5173\u7684\u654f\u611f\u8bcd; \u6ce8\u518cdid\u81f3\u5c11\u9700\u89811\u4e2aetp Example: Use the account 'test' to register the digital identity with the name 'test.mvs' and bind it to a valid address 'M9L3ipy3Hcf6kdvknU3mH7mwH9ER3uCziu' Command: $ ./mvs-cli registerdid test 123 M9L3ipy3Hcf6kdvknU3mH7mwH9ER3uCziu test.mvs \u8f93\u51fa\uff1a { \"transaction\" : { \"hash\" : \"4d5ae5bfdd89d30a771680cd3080478e741ff1bea65b4903ea42160952c0c9e8\", \"inputs\" : [ { \"address\" : \"M9L3ipy3Hcf6kdvknU3mH7mwH9ER3uCziu\", \"previous_output\" : { \"hash\" : \"a7db09dcf9e8d9341f8343a6f1edfb2fd1fdf350ccef8f3517b446eeb2d73076\", \"index\" : 0 }, \"script\" : \"[ 304402201c9b9706b3e198e9de8887c94c6e7f1192a65cb1fa15318b409f6d4fc4952f9a0220306d2f5fcdf2e1e32861399dc55b7c81a1cedc7790d2ff8a73a8bb3f9bac5fde01 ] [ 035f572a164ec0e7d8f1935e357d86c6441152bed7251389a1c66174ae890dad90 ]\", \"sequence\" : 4294967295 } ], \"lock_time\" : \"0\", \"outputs\" : [ { \"address\" : \"M9L3ipy3Hcf6kdvknU3mH7mwH9ER3uCziu\", \"attachment\" : { \"address\" : \"M9L3ipy3Hcf6kdvknU3mH7mwH9ER3uCziu\", \"symbol\" : \"test.mvs\", \"type\" : \"did-register\" }, \"index\" : 0, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ 0fad171975f1100309022c83c7b9dca0a8f8e6b8 ] equalverify checksig\", \"value\" : 0 } ], \"version\" : \"4\" } }","title":"Digital Identity (Avatar) Usage"},{"location":"etp-cli/","text":"getbalance Usage: mvs-cli getbalance [-h] ACCOUNTNAME ACCOUNTAUTH Info: Show total balance details of this account. Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. listbalances Usage: mvs-cli listbalances [-hn][--greater_equal value] [--lesser_equal value] ACCOUNTNAME ACCOUNTAUTH Info: List balance details of each address of this account. defaults show non-zero unspent address. Options (named): -g [--greater_equal] Greater than ETP bits. -h [--help] Get a description and instructions for this command. -l [--lesser_equal] Lesser than ETP bits. -n [--nozero] Defaults to true. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. deposit Usage: mvs-cli deposit [-h][--address value] [--deposit value][--fee value] ACCOUNTNAME ACCOUNTAUTH AMOUNT Info: Deposit some etp, then get reward for frozen some etp. Options (named): -h [--help] Get a description and instructions for this command. -a [--address] The deposit target address. -d [--deposit] Deposits support [7, 30, 90, 182, 365] days. defaluts to 7 days -f [--fee] Transaction fee. defaults to 10000 ETP bits Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. AMOUNT ETP integer bits. send Usage: mvs-cli send [-h][--fee value] [--memo value] ACCOUNTNAME ACCOUNTAUTH TOADDRESS AMOUNT Info: send etp to a targert address, mychange goes to another existed address of this account. Options (named): -h [--help] Get a description and instructions for this command. -f [--fee] Transaction fee. defaults to 10000 etp bits -m [--memo] Attached memo for this transaction. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. TOADDRESS Send to this address AMOUNT ETP integer bits. sendfrom Usage: mvs-cli sendfrom [-h][--fee value] [--memo value] ACCOUNTNAME ACCOUNTAUTH FROMADDRESS TOADDRESS AMOUNT Info: send etp from a specified address of this account to target address, mychange goes to from_address. Options (named): -h [--help] Get a description and instructions for this command. -f [--fee] Transaction fee. defaults to 10000 ETP bits -m [--memo] The memo to descript transaction Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. FROMADDRESS Send from this address TOADDRESS Send to this address AMOUNT ETP integer bits. sendmore Usage: mvs-cli sendmore [-h] --receivers value [--fee value][--mychange value] ACCOUNTNAME ACCOUNTAUTH Info: send etp to multi target addresses, must specify mychange address. Eg: [sendmore $name $password -r $address1:$amount1 -r $address2:$amount2 -m $mychange_address] Options (named): -h [--help] Send to more target. -f [--fee] Transaction fee. defaults to 10000 ETP bits -m [--mychange] Mychange to this address -r [--receivers] Send to [address:etp_bits]. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required.","title":"ETP"},{"location":"etp-cli/#getbalance","text":"Usage: mvs-cli getbalance [-h] ACCOUNTNAME ACCOUNTAUTH Info: Show total balance details of this account. Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required.","title":"getbalance"},{"location":"etp-cli/#listbalances","text":"Usage: mvs-cli listbalances [-hn][--greater_equal value] [--lesser_equal value] ACCOUNTNAME ACCOUNTAUTH Info: List balance details of each address of this account. defaults show non-zero unspent address. Options (named): -g [--greater_equal] Greater than ETP bits. -h [--help] Get a description and instructions for this command. -l [--lesser_equal] Lesser than ETP bits. -n [--nozero] Defaults to true. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required.","title":"listbalances"},{"location":"etp-cli/#deposit","text":"Usage: mvs-cli deposit [-h][--address value] [--deposit value][--fee value] ACCOUNTNAME ACCOUNTAUTH AMOUNT Info: Deposit some etp, then get reward for frozen some etp. Options (named): -h [--help] Get a description and instructions for this command. -a [--address] The deposit target address. -d [--deposit] Deposits support [7, 30, 90, 182, 365] days. defaluts to 7 days -f [--fee] Transaction fee. defaults to 10000 ETP bits Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. AMOUNT ETP integer bits.","title":"deposit"},{"location":"etp-cli/#send","text":"Usage: mvs-cli send [-h][--fee value] [--memo value] ACCOUNTNAME ACCOUNTAUTH TOADDRESS AMOUNT Info: send etp to a targert address, mychange goes to another existed address of this account. Options (named): -h [--help] Get a description and instructions for this command. -f [--fee] Transaction fee. defaults to 10000 etp bits -m [--memo] Attached memo for this transaction. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. TOADDRESS Send to this address AMOUNT ETP integer bits.","title":"send"},{"location":"etp-cli/#sendfrom","text":"Usage: mvs-cli sendfrom [-h][--fee value] [--memo value] ACCOUNTNAME ACCOUNTAUTH FROMADDRESS TOADDRESS AMOUNT Info: send etp from a specified address of this account to target address, mychange goes to from_address. Options (named): -h [--help] Get a description and instructions for this command. -f [--fee] Transaction fee. defaults to 10000 ETP bits -m [--memo] The memo to descript transaction Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. FROMADDRESS Send from this address TOADDRESS Send to this address AMOUNT ETP integer bits.","title":"sendfrom"},{"location":"etp-cli/#sendmore","text":"Usage: mvs-cli sendmore [-h] --receivers value [--fee value][--mychange value] ACCOUNTNAME ACCOUNTAUTH Info: send etp to multi target addresses, must specify mychange address. Eg: [sendmore $name $password -r $address1:$amount1 -r $address2:$amount2 -m $mychange_address] Options (named): -h [--help] Send to more target. -f [--fee] Transaction fee. defaults to 10000 ETP bits -m [--mychange] Mychange to this address -r [--receivers] Send to [address:etp_bits]. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required.","title":"sendmore"},{"location":"fullnodeintro/","text":"Metaverse full node introduction Full nodes are nodes that store the entire Metaverse blockchain and are connected in a P2P network architecture. In the blockchain network, all full nodes are treated as equals, and serve as both clients and servers. The MVS full node consists of two programs and a graphical interface: \u2022 mvsd : The core wallet program, similar to Bitcoin\u2019s bitcoind; \u2022 mvs-cli : a command line interface, similar to Bitcoin\u2019s bitcoin-cli \u2022 mvs-htmls : a browser-based graphical user interface built with AngularJS. This GUI may not be necessary for developers. MVS full node wallet - function list mvsd&mvs-cli Broswer GUI Graphic Interfac \u221a Command Line Interface \u221a \u221a Create Account \u221a \u221a Import and Export Mnemonics \u221a \u221a Create Address \u221a \u221a Batch Generation Address \u221a \u221a ETP Transfer \u221a \u221a ETP Deposit (Coinlock) \u221a \u221a Show All Addresse \u221a \u221a Show All Assets \u221a \u221a Create Asset (Not broadcast) \u221a \u221a Delete Asset (Not broadcast) \u221a Issue Asset \u221a \u221a Transfer Asset \u221a \u221a Create a multi-party signature transactio \u221a \u221a Offline signature \u221a List the transaction details of the designated assets of the wallet \u221a \u221a mining \u221a","title":"Full Node Intro"},{"location":"fullnodeintro/#metaverse-full-node-introduction","text":"Full nodes are nodes that store the entire Metaverse blockchain and are connected in a P2P network architecture. In the blockchain network, all full nodes are treated as equals, and serve as both clients and servers.","title":"Metaverse full node introduction"},{"location":"fullnodeintro/#the-mvs-full-node-consists-of-two-programs-and-a-graphical-interface","text":"\u2022 mvsd : The core wallet program, similar to Bitcoin\u2019s bitcoind; \u2022 mvs-cli : a command line interface, similar to Bitcoin\u2019s bitcoin-cli \u2022 mvs-htmls : a browser-based graphical user interface built with AngularJS. This GUI may not be necessary for developers.","title":"The MVS full node consists of two programs and a graphical interface:"},{"location":"fullnodeintro/#mvs-full-node-wallet-function-list","text":"mvsd&mvs-cli Broswer GUI Graphic Interfac \u221a Command Line Interface \u221a \u221a Create Account \u221a \u221a Import and Export Mnemonics \u221a \u221a Create Address \u221a \u221a Batch Generation Address \u221a \u221a ETP Transfer \u221a \u221a ETP Deposit (Coinlock) \u221a \u221a Show All Addresse \u221a \u221a Show All Assets \u221a \u221a Create Asset (Not broadcast) \u221a \u221a Delete Asset (Not broadcast) \u221a Issue Asset \u221a \u221a Transfer Asset \u221a \u221a Create a multi-party signature transactio \u221a \u221a Offline signature \u221a List the transaction details of the designated assets of the wallet \u221a \u221a mining \u221a","title":"MVS full node wallet - function list"},{"location":"linuxinstallation/","text":"Installation for Linux Please download the latest wallet installation package from Metaverse\u2019s official https://mvs.org/wallet.html . The wallet is now support Linux 64 bit system. At least 10 GB of free disk space is required for the installation. Take version v0.8.4 as an example. Download and unzip Download standard versions # for tarballs wget [https://s3-us-west-1.amazonaws.com/wallet.mvs.org/download/mvs-linux-x86_64-v0.8.4.tar.gz tar -zxf mvs-linux-x86_64-v0.8.4.tar.gz Install standard versions cd mvs-linux-x86_64-v0.8.4 ./mvs-install.sh Run # run 'mvsd', waiting for block synchronized. Get lastes block height from <https://explorer.mvs.org>. # option '-d' run as daemon mode mvsd -d # Get helps from mvsd mvsd --help # Get helps from mvs-cli mvs-cli help Download database package to reduces the time required for initial block syncing Download database package \\$ wget http://newmetaverse.org/mvs-download/block-data/mvs-block-data-for-linux.tar.gz $ tar -xzvf mvs-block-data-for-linux.tar.gz # The default path of database folder is ~/.metaverse/mainnet # Please specify PATH_TO_BLOCK_DATA to your customized database folder. # ./copy-block-data.sh PATH_TO_BLOCK_DATA \\$ ./copy-block-data.sh Get started Run mvs-cli in terminal. More mvs-cli usage information please see mvs-cli usage Access wallet on browser. Default URL is 127.0.0.1:8820 (specified by mongoose_listen vaule in mvs.conf ). More configuration information please see Config File","title":"Linux Installation"},{"location":"linuxinstallation/#installation-for-linux","text":"Please download the latest wallet installation package from Metaverse\u2019s official https://mvs.org/wallet.html . The wallet is now support Linux 64 bit system. At least 10 GB of free disk space is required for the installation. Take version v0.8.4 as an example.","title":"Installation for Linux"},{"location":"linuxinstallation/#download-and-unzip","text":"Download standard versions # for tarballs wget [https://s3-us-west-1.amazonaws.com/wallet.mvs.org/download/mvs-linux-x86_64-v0.8.4.tar.gz tar -zxf mvs-linux-x86_64-v0.8.4.tar.gz","title":"Download and unzip"},{"location":"linuxinstallation/#install-standard-versions","text":"cd mvs-linux-x86_64-v0.8.4 ./mvs-install.sh","title":"Install standard versions"},{"location":"linuxinstallation/#run","text":"# run 'mvsd', waiting for block synchronized. Get lastes block height from <https://explorer.mvs.org>. # option '-d' run as daemon mode mvsd -d # Get helps from mvsd mvsd --help # Get helps from mvs-cli mvs-cli help","title":"Run"},{"location":"linuxinstallation/#download-database-package-to-reduces-the-time-required-for-initial-block-syncing","text":"Download database package \\$ wget http://newmetaverse.org/mvs-download/block-data/mvs-block-data-for-linux.tar.gz $ tar -xzvf mvs-block-data-for-linux.tar.gz # The default path of database folder is ~/.metaverse/mainnet # Please specify PATH_TO_BLOCK_DATA to your customized database folder. # ./copy-block-data.sh PATH_TO_BLOCK_DATA \\$ ./copy-block-data.sh","title":"Download database package to reduces the time required for initial block syncing"},{"location":"linuxinstallation/#get-started","text":"Run mvs-cli in terminal. More mvs-cli usage information please see mvs-cli usage Access wallet on browser. Default URL is 127.0.0.1:8820 (specified by mongoose_listen vaule in mvs.conf ). More configuration information please see Config File","title":"Get started"},{"location":"metaverse/","text":"Metaverse Overview Summary The official implementation of MVS full node is libbitcoin based, it means Metaverse is more close to bitcoin standard. However, here are these differences: Self-defining UTXO based smart tokens, which means users can issue their own token like what bitcoin does without any programming experience. Self-defining UTXO based digital identity, aim to build a digital credit system through MVS blockchain. As for Bitcoin, all UTXO only serves Bitcoin, but it does not restrict that the type of token must be specified. Thus, we extended this model design. We added the attachment field in the output which provides type extensions of MST so that all MST can have the same level of technical features as bitcoin without having to fork bitcoins to create their own tokens. UTXO Extensions Modifications MVS is using ETHASH which is actived on Ethererum mainnet for mining. The JSON-RPC Server is based on mongoose , which is a lignt embedded HTTP server. To be listed\u2026 Full Node Architecture Compiling dependency We intergrated 9 libbitcoin modules\uff1a libbitcoin , libbitcoin-explorer , libbitcoin-database , libbitcoin-blockchain , libbitcoin-server , libbitcoin-network , libbitcoin-protocol , libbitcoin-node , libbitcoin-consensus , into MVS full node with libbitcoin v2.","title":"What Is Metaverse"},{"location":"metaverse/#metaverse-overview","text":"","title":"Metaverse Overview"},{"location":"metaverse/#summary","text":"The official implementation of MVS full node is libbitcoin based, it means Metaverse is more close to bitcoin standard. However, here are these differences: Self-defining UTXO based smart tokens, which means users can issue their own token like what bitcoin does without any programming experience. Self-defining UTXO based digital identity, aim to build a digital credit system through MVS blockchain. As for Bitcoin, all UTXO only serves Bitcoin, but it does not restrict that the type of token must be specified. Thus, we extended this model design. We added the attachment field in the output which provides type extensions of MST so that all MST can have the same level of technical features as bitcoin without having to fork bitcoins to create their own tokens.","title":"Summary"},{"location":"metaverse/#utxo-extensions","text":"","title":"UTXO Extensions"},{"location":"metaverse/#modifications","text":"MVS is using ETHASH which is actived on Ethererum mainnet for mining. The JSON-RPC Server is based on mongoose , which is a lignt embedded HTTP server. To be listed\u2026","title":"Modifications"},{"location":"metaverse/#full-node-architecture","text":"","title":"Full Node Architecture"},{"location":"metaverse/#compiling-dependency","text":"We intergrated 9 libbitcoin modules\uff1a libbitcoin , libbitcoin-explorer , libbitcoin-database , libbitcoin-blockchain , libbitcoin-server , libbitcoin-network , libbitcoin-protocol , libbitcoin-node , libbitcoin-consensus , into MVS full node with libbitcoin v2.","title":"Compiling dependency"},{"location":"metaversewalletsetup/","text":"Metaverse Wallet Setup Getting Started The Metaverse full-node wallet is a cross-platform wallet program that operates trustlessly. It currently supports the Windows, Linux and MacOSX operating systems. You may also use our light web wallet verified using SPV at MyETPWallet Windows Download Download Please download the wallet installation package from Metaverse\u2019s official website mvs.org/wallet.html The wallet is now support Windows 64bit system. There are standard and data packet versions of the installation package. The packet version comes with a database, which greatly reduces the time required for initial block syncing. We recommend that new users download and install this version; existing users are recommended to install the standard version, because the packet version may overwrite some raw data. Please choose the appropriate installation package. Install Double-click the installation file and follow the prompts to complete installation. After the installation is complete, the wallet shortcut icon shows up on the desktop. Double-click the wallet icon to open it and enter the login page. MAC OSX Download Download Please download the wallet installation package from Metaverse\u2019s official website mvs.org/wallet.html . The wallet currently supports macOS Sierra and macOS High Sierra. There are standard and data packet versions of the installation package. The packet version comes with a database, which greatly reduces the time required for initial block syncing. We recommend that new users download and install this version; existing users are recommended to install the standard version, because the packet version may overwrite some raw data. Please choose the appropriate installation package. Install Double-click the installation file and follow the prompts to complete installation. Click Launchpad to view the wallet program and double-click the wallet icon. Then, find the wallet icon in taskbar at the top of your screen and click the \u201cOpen Metaverse\u201d command to enter the wallet login page. Quick start Register After the installation is complete, the wallet shortcut icon shows up on the desktop. Double-click the wallet icon to enter the login page and click \u201cCreate/ Import account\u201d. login Set your account name and password, then click on \u201cCreate account\u201d. Create account Write down the backup words and click \u201cI understand\u201d to complete registration. Receiving ETP Open the wallet and click \u201caddress\u201d at the top of the navigation bar to view your receiving addresses. Any of the addresses in your wallet can be used to receive digital currencies developed on the Metaverse public blockchain. You may choose any one of your wallet addresses as the receiving address. Query transaction hashs Metaverse Wallet provides a portion of the block explorer\u2019s functions. Users can inquire about blocks, transactions or the details of an address through querying the block\u2019s serial number, the transaction hash and the address respectively. Each transaction produces a hash. You may view a transaction\u2019s details via querying its transaction hash. Sending ETP Click the \u201ctransfer\u201d command shown next to your assets. Fill in transfer details such as the sending and receiving address, transfer amount, transaction fee and message, then click \u201cSend\u201d. Send After double-confirm the transaction summary, enter password and click \u201cSend\u201d to complete the transaction. Confirm","title":"Setup"},{"location":"metaversewalletsetup/#metaverse-wallet-setup","text":"","title":"Metaverse Wallet Setup"},{"location":"metaversewalletsetup/#getting-started","text":"The Metaverse full-node wallet is a cross-platform wallet program that operates trustlessly. It currently supports the Windows, Linux and MacOSX operating systems. You may also use our light web wallet verified using SPV at MyETPWallet","title":"Getting Started"},{"location":"metaversewalletsetup/#windows-download","text":"","title":"Windows Download"},{"location":"metaversewalletsetup/#download","text":"Please download the wallet installation package from Metaverse\u2019s official website mvs.org/wallet.html The wallet is now support Windows 64bit system. There are standard and data packet versions of the installation package. The packet version comes with a database, which greatly reduces the time required for initial block syncing. We recommend that new users download and install this version; existing users are recommended to install the standard version, because the packet version may overwrite some raw data. Please choose the appropriate installation package.","title":"Download"},{"location":"metaversewalletsetup/#install","text":"Double-click the installation file and follow the prompts to complete installation. After the installation is complete, the wallet shortcut icon shows up on the desktop. Double-click the wallet icon to open it and enter the login page.","title":"Install"},{"location":"metaversewalletsetup/#mac-osx-download","text":"","title":"MAC OSX Download"},{"location":"metaversewalletsetup/#download_1","text":"Please download the wallet installation package from Metaverse\u2019s official website mvs.org/wallet.html . The wallet currently supports macOS Sierra and macOS High Sierra. There are standard and data packet versions of the installation package. The packet version comes with a database, which greatly reduces the time required for initial block syncing. We recommend that new users download and install this version; existing users are recommended to install the standard version, because the packet version may overwrite some raw data. Please choose the appropriate installation package.","title":"Download"},{"location":"metaversewalletsetup/#install_1","text":"Double-click the installation file and follow the prompts to complete installation. Click Launchpad to view the wallet program and double-click the wallet icon. Then, find the wallet icon in taskbar at the top of your screen and click the \u201cOpen Metaverse\u201d command to enter the wallet login page.","title":"Install"},{"location":"metaversewalletsetup/#quick-start","text":"","title":"Quick start"},{"location":"metaversewalletsetup/#register","text":"After the installation is complete, the wallet shortcut icon shows up on the desktop. Double-click the wallet icon to enter the login page and click \u201cCreate/ Import account\u201d. login Set your account name and password, then click on \u201cCreate account\u201d. Create account Write down the backup words and click \u201cI understand\u201d to complete registration.","title":"Register"},{"location":"metaversewalletsetup/#receiving-etp","text":"Open the wallet and click \u201caddress\u201d at the top of the navigation bar to view your receiving addresses. Any of the addresses in your wallet can be used to receive digital currencies developed on the Metaverse public blockchain. You may choose any one of your wallet addresses as the receiving address.","title":"Receiving ETP"},{"location":"metaversewalletsetup/#query-transaction-hashs","text":"Metaverse Wallet provides a portion of the block explorer\u2019s functions. Users can inquire about blocks, transactions or the details of an address through querying the block\u2019s serial number, the transaction hash and the address respectively. Each transaction produces a hash. You may view a transaction\u2019s details via querying its transaction hash.","title":"Query transaction hashs"},{"location":"metaversewalletsetup/#sending-etp","text":"Click the \u201ctransfer\u201d command shown next to your assets. Fill in transfer details such as the sending and receiving address, transfer amount, transaction fee and message, then click \u201cSend\u201d. Send After double-confirm the transaction summary, enter password and click \u201cSend\u201d to complete the transaction. Confirm","title":"Sending ETP"},{"location":"mitintro/","text":"Metaverse Identifiable Token (MIT) Intro MIT is a set of token standards that allow everyone to register asset from off-chain. MIT is different with MST, which is a light token for tracking/verification for real-world asset. MIT is very much like ERC721 tokens. You can operate it via a visual interface without any programming basics. You can even issue a Token in the SPV Light Wallet and these tokens can be safely transferred as Bitcoin. MIT tokens run on the Metaverse(MVS) blockchain. MIT describes the standard that these tokens conform to. They are all \u201cbuilt\u201d following the same set of \u201crules\u201d, allowing them to operate on MVS. Globally uniqueness identifiable ID for each token, can be scanned as QR code/SN code etc. Indivisible and divisible, MIT\u2019s amount is always = 1, it means no shares, transferring once only. Trackable with MVS Avatar DID. Verifiable by MVS Avatar. MIT would necessarily be the most important development direction of the blockchain application. MIT token can be used in supply chain logistics/Tracking IoT devices etc.","title":"Introduction"},{"location":"mitintro/#metaverse-identifiable-token-mit-intro","text":"MIT is a set of token standards that allow everyone to register asset from off-chain. MIT is different with MST, which is a light token for tracking/verification for real-world asset. MIT is very much like ERC721 tokens. You can operate it via a visual interface without any programming basics. You can even issue a Token in the SPV Light Wallet and these tokens can be safely transferred as Bitcoin. MIT tokens run on the Metaverse(MVS) blockchain. MIT describes the standard that these tokens conform to. They are all \u201cbuilt\u201d following the same set of \u201crules\u201d, allowing them to operate on MVS. Globally uniqueness identifiable ID for each token, can be scanned as QR code/SN code etc. Indivisible and divisible, MIT\u2019s amount is always = 1, it means no shares, transferring once only. Trackable with MVS Avatar DID. Verifiable by MVS Avatar. MIT would necessarily be the most important development direction of the blockchain application. MIT token can be used in supply chain logistics/Tracking IoT devices etc.","title":"Metaverse Identifiable Token (MIT) Intro"},{"location":"mitquery/","text":"Query MIT Precondition This is mainly about register MIT command line operation. First, you need an account and a did. You can use mvs-cli getnewaccount accountname password and mvs-cli issuedid accountname password address did to generate a new account and a new did. For convenience, I\u2019ll uniformly use Alice as account name, passwd1 as password, Alice as did, and use testing addresses in the following examples. When you refer to the following examples, please change to your account name, password and did, and pay attention to the correct addresses. With an account, if you want to issue or send an asset, you have to make sure that there is enough ETP in the account to pay fees. You can use mvs-cli getbalance account_name password to get the total balance of the account. You can also use mvs-cli listbalances account_name password to list the balance of each address in the account. You can use help to get the help information of each command. For eaxmple, use mvs-cli help registermit or mvs-cli registermit -h to get the help information of registermit Query With Limits Command: listmits , query all registered MIT on blockchain or unspent MIT of specified account. Usage: mvs-cli listmits [-h] [ACCOUNTNAME] [ACCOUNTAUTH] Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. Note: If account name and password is specified, then query unspent MIT of specified account. Example: query all registered MIT on blockchain\uff1a Command: $ ./mvs-cli listmits Output: { \"mits\" : [ { \"address\" : \"MJevGQHGwKQGNpeJF1vDxBawxKoRZMqsRz\", \"content\" : \"Alice's MIT\", \"height\" : 3692, \"status\" : \"registered\", \"symbol\" : \"Alice@MIT\", \"time_stamp\" : 1528182825, \"to_did\" : \"Alice\" } ] } Example: query unspent MIT of account Bob\uff1a Command: $ ./mvs-cli listmits Bob passwd1 Output: { \"mits\" : [ { \"address\" : \"MFj3WGtCxWT2BJZSJUJ9N9A3hKqCoaehaX\", \"content\" : \"Alice's MIT\", \"status\" : \"transfered\", \"symbol\" : \"Alice@MIT\" } ] } Query with getmit Command: getmit , query all MIT identifiers on blockchain or registration of the specified MIT or history of the specified MIT. Usage: mvs-cli getmit [-ht] [--index value] [--limit value] [SYMBOL] Options (named): -h [--help] Get a description and instructions for this command. -c [--current] Show current status of MIT, default false. -t [--trace] Tracing history, default false. -i [--index] Page index, default 1. -l [--limit] MIT count per page, default 100. Arguments (positional): SYMBOL MIT identifier. Example: query all MIT identifiers on blockchain: Command: $ ./mvs-cli getmit Output: { \"mits\" : [ \"Alice@MIT\" ] } Example: query registration of MIT named Alice@MIT: Command: $ ./mvs-cli getmit Alice@MIT Output: { \"address\" : \"MJevGQHGwKQGNpeJF1vDxBawxKoRZMqsRz\", \"content\" : \"Alice's MIT\", \"height\" : 3692, \"status\" : \"registered\", \"symbol\" : \"Alice@MIT\", \"time_stamp\" : 1528182825, \"to_did\" : \"Alice\" } Example: query current status of MIT named Alice@MIT: Command: $ ./mvs-cli getmit Alice@MIT -c Output: { \"address\" : \"MJevGQHGwKQGNpeJF1vDxBawxKoRZMqsRz\", \"content\" : \"Alice's MIT\", \"height\" : 7090, \"status\" : \"transfered\", \"symbol\" : \"Alice@MIT\", \"time_stamp\" : 1528183391, \"to_did\" : \"Bob\" } Example: query history of MIT named Alice@MIT: Command: $ ./mvs-cli getmit Alice@MIT -t Output: { \"mits\" : [ { \"address\" : \"MFj3WGtCxWT2BJZSJUJ9N9A3hKqCoaehaX\", \"height\" : 7090, \"status\" : \"transfered\", \"symbol\" : \"Alice@MIT\", \"time_stamp\" : 1528183391, \"to_did\" : \"Bob\" }, { \"address\" : \"MJevGQHGwKQGNpeJF1vDxBawxKoRZMqsRz\", \"height\" : 3692, \"status\" : \"registered\", \"symbol\" : \"Alice@MIT\", \"time_stamp\" : 1528182825, \"to_did\" : \"Alice\" } ] }","title":"Query MIT"},{"location":"mitquery/#query-mit","text":"","title":"Query MIT"},{"location":"mitquery/#precondition","text":"This is mainly about register MIT command line operation. First, you need an account and a did. You can use mvs-cli getnewaccount accountname password and mvs-cli issuedid accountname password address did to generate a new account and a new did. For convenience, I\u2019ll uniformly use Alice as account name, passwd1 as password, Alice as did, and use testing addresses in the following examples. When you refer to the following examples, please change to your account name, password and did, and pay attention to the correct addresses. With an account, if you want to issue or send an asset, you have to make sure that there is enough ETP in the account to pay fees. You can use mvs-cli getbalance account_name password to get the total balance of the account. You can also use mvs-cli listbalances account_name password to list the balance of each address in the account. You can use help to get the help information of each command. For eaxmple, use mvs-cli help registermit or mvs-cli registermit -h to get the help information of registermit","title":"Precondition"},{"location":"mitquery/#query-with-limits","text":"Command: listmits , query all registered MIT on blockchain or unspent MIT of specified account. Usage: mvs-cli listmits [-h] [ACCOUNTNAME] [ACCOUNTAUTH] Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. Note: If account name and password is specified, then query unspent MIT of specified account. Example: query all registered MIT on blockchain\uff1a Command: $ ./mvs-cli listmits Output: { \"mits\" : [ { \"address\" : \"MJevGQHGwKQGNpeJF1vDxBawxKoRZMqsRz\", \"content\" : \"Alice's MIT\", \"height\" : 3692, \"status\" : \"registered\", \"symbol\" : \"Alice@MIT\", \"time_stamp\" : 1528182825, \"to_did\" : \"Alice\" } ] } Example: query unspent MIT of account Bob\uff1a Command: $ ./mvs-cli listmits Bob passwd1 Output: { \"mits\" : [ { \"address\" : \"MFj3WGtCxWT2BJZSJUJ9N9A3hKqCoaehaX\", \"content\" : \"Alice's MIT\", \"status\" : \"transfered\", \"symbol\" : \"Alice@MIT\" } ] }","title":"Query With Limits"},{"location":"mitquery/#query-with-getmit","text":"Command: getmit , query all MIT identifiers on blockchain or registration of the specified MIT or history of the specified MIT. Usage: mvs-cli getmit [-ht] [--index value] [--limit value] [SYMBOL] Options (named): -h [--help] Get a description and instructions for this command. -c [--current] Show current status of MIT, default false. -t [--trace] Tracing history, default false. -i [--index] Page index, default 1. -l [--limit] MIT count per page, default 100. Arguments (positional): SYMBOL MIT identifier. Example: query all MIT identifiers on blockchain: Command: $ ./mvs-cli getmit Output: { \"mits\" : [ \"Alice@MIT\" ] } Example: query registration of MIT named Alice@MIT: Command: $ ./mvs-cli getmit Alice@MIT Output: { \"address\" : \"MJevGQHGwKQGNpeJF1vDxBawxKoRZMqsRz\", \"content\" : \"Alice's MIT\", \"height\" : 3692, \"status\" : \"registered\", \"symbol\" : \"Alice@MIT\", \"time_stamp\" : 1528182825, \"to_did\" : \"Alice\" } Example: query current status of MIT named Alice@MIT: Command: $ ./mvs-cli getmit Alice@MIT -c Output: { \"address\" : \"MJevGQHGwKQGNpeJF1vDxBawxKoRZMqsRz\", \"content\" : \"Alice's MIT\", \"height\" : 7090, \"status\" : \"transfered\", \"symbol\" : \"Alice@MIT\", \"time_stamp\" : 1528183391, \"to_did\" : \"Bob\" } Example: query history of MIT named Alice@MIT: Command: $ ./mvs-cli getmit Alice@MIT -t Output: { \"mits\" : [ { \"address\" : \"MFj3WGtCxWT2BJZSJUJ9N9A3hKqCoaehaX\", \"height\" : 7090, \"status\" : \"transfered\", \"symbol\" : \"Alice@MIT\", \"time_stamp\" : 1528183391, \"to_did\" : \"Bob\" }, { \"address\" : \"MJevGQHGwKQGNpeJF1vDxBawxKoRZMqsRz\", \"height\" : 3692, \"status\" : \"registered\", \"symbol\" : \"Alice@MIT\", \"time_stamp\" : 1528182825, \"to_did\" : \"Alice\" } ] }","title":"Query with getmit"},{"location":"mitregister/","text":"Register MIT Precondition This is mainly about register MIT command line operation, and other commands can be referred to Command-line. First, you need an account and a did. You can use mvs-cli getnewaccount accountname password and mvs-cli issuedid accountname password address did to generate a new account and a new did. For convenience, I\u2019ll uniformly use Alice as account name, passwd1 as password, Alice as did, and use testing addresses in the following examples. When you refer to the following examples, please change to your account name, password and did, and pay attention to the correct addresses. With an account, if you want to issue or send an asset, you have to make sure that there is enough ETP in the account to pay fees. You can use mvs-cli getbalance account_name password to get the total balance of the account. You can also use mvs-cli listbalances account_name password to list the balance of each address in the account. You can use help to get the help information of each command. For example, use mvs-cli help registermit or mvs-cli registermit -h to get the help information of registermit command. Register MIT Command: registermit Usage: mvs-cli registermit [-h][--content value] [--fee value] ACCOUNTNAME ACCOUNTAUTH TODID SYMBOL Options (named): -h [--help] Get a description and instructions for this command. -c [--content] The content of MIT, default is empty. -m [--mits] List of symbol and content pair. Symbol and content are separated by a ':'. -f [--fee] The fee of tx. default_value 0.0001 etp. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. TODID To DID required. SYMBOL MIT identifier required. Note: The max length of SYMBOL is 60, case insensitive, only numbers, letters and .\u3001-\u3001_\u3001@ are allowed. The max length of content is 256. MIT identifier is unique on blockchain. The maximum size of list of symbol and content pair is 100. Symbol and content are separated by a \u2018:\u2019. Example\uff1a Account Alice registers MIT named Alice@MIT to DID Alice\u3002 Command\uff1a `\\$ ./mvs-cli registermit Alice passwd1 Alice Alice@MIT -c \"Alice's MIT\"` Output\uff1a { \"transaction\" : { \"hash\" : \"9d52158296a9e33b49dcd0f9ceee26c8f2356f1486dc0d9a56ea49a1dd0d97e3\", \"inputs\" : [ { \"address\" : \"MJevGQHGwKQGNpeJF1vDxBawxKoRZMqsRz\", \"previous_output\" : { \"hash\" : \"bce39df08273418f93d594185f23273225ae5aadfe6bd54ea4f7bbae50a61ea2\", \"index\" : 1 }, \"script\" : \"[ 304402201f0d5f9c5c4d3de0db3ea80f3ae356558f76dfddc124c10eceb6523d2255b075022001f788e0a008b002c6bc9a31e2c945f9bbed4e6ba7def1f5c867e29f01d362c001 ][ 039497a1b7e0dbc762fbd389d8b1ac3215782758c753c521fc4e40914f8e14d5e8 ]\", \"sequence\" : 4294967295 } ], \"lock_time\" : \"0\", \"outputs\" : [ { \"address\" : \"MJevGQHGwKQGNpeJF1vDxBawxKoRZMqsRz\", \"attachment\" : { \"address\" : \"MJevGQHGwKQGNpeJF1vDxBawxKoRZMqsRz\", \"content\" : \"Alice's MIT\", \"from_did\" : \"Alice\", \"status\" : \"registered\", \"symbol\" : \"Alice@MIT\", \"to_did\" : \"Alice\", \"type\" : \"mit\" }, \"index\" : 0, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ 75f7e6e4b14d0aaa72a96bd5751070e7b7f813fb ] equalverify checksig\", \"value\" : 0 }, { \"address\" : \"MJevGQHGwKQGNpeJF1vDxBawxKoRZMqsRz\", \"attachment\" : { \"address\" : \"MJevGQHGwKQGNpeJF1vDxBawxKoRZMqsRz\", \"content\" : \"unified content of batch registerring mit.\", \"from_did\" : \"Alice\", \"status\" : \"registered\", \"symbol\" : \"BATCH_02@MIT\", \"to_did\" : \"Alice\", \"type\" : \"mit\" }, \"index\" : 1, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ b5eb75b67ccc47363ea623a3c73b2d23c9dd801a ] equalverify checksig\", \"value\" : 0 }, { \"address\" : \"MJevGQHGwKQGNpeJF1vDxBawxKoRZMqsRz\", \"attachment\" : { \"address\" : \"MJevGQHGwKQGNpeJF1vDxBawxKoRZMqsRz\", \"content\" : \"customized content.\", \"from_did\" : \"Alice\", \"status\" : \"registered\", \"symbol\" : \"BATCH_03@MIT\", \"to_did\" : \"Alice\", \"type\" : \"mit\" }, \"index\" : 2, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ b5eb75b67ccc47363ea623a3c73b2d23c9dd801a ] equalverify checksig\", \"value\" : 0 }, { \"address\" : \"MJevGQHGwKQGNpeJF1vDxBawxKoRZMqsRz\", \"attachment\" : { \"type\" : \"etp\" }, \"index\" : 3, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ b5eb75b67ccc47363ea623a3c73b2d23c9dd801a ] equalverify checksig\", \"value\" : 199980000 } ], \"version\" : \"4\" } }","title":"MIT Register"},{"location":"mitregister/#register-mit","text":"","title":"Register MIT"},{"location":"mitregister/#precondition","text":"This is mainly about register MIT command line operation, and other commands can be referred to Command-line. First, you need an account and a did. You can use mvs-cli getnewaccount accountname password and mvs-cli issuedid accountname password address did to generate a new account and a new did. For convenience, I\u2019ll uniformly use Alice as account name, passwd1 as password, Alice as did, and use testing addresses in the following examples. When you refer to the following examples, please change to your account name, password and did, and pay attention to the correct addresses. With an account, if you want to issue or send an asset, you have to make sure that there is enough ETP in the account to pay fees. You can use mvs-cli getbalance account_name password to get the total balance of the account. You can also use mvs-cli listbalances account_name password to list the balance of each address in the account. You can use help to get the help information of each command. For example, use mvs-cli help registermit or mvs-cli registermit -h to get the help information of registermit command.","title":"Precondition"},{"location":"mitregister/#register-mit_1","text":"Command: registermit Usage: mvs-cli registermit [-h][--content value] [--fee value] ACCOUNTNAME ACCOUNTAUTH TODID SYMBOL Options (named): -h [--help] Get a description and instructions for this command. -c [--content] The content of MIT, default is empty. -m [--mits] List of symbol and content pair. Symbol and content are separated by a ':'. -f [--fee] The fee of tx. default_value 0.0001 etp. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. TODID To DID required. SYMBOL MIT identifier required. Note: The max length of SYMBOL is 60, case insensitive, only numbers, letters and .\u3001-\u3001_\u3001@ are allowed. The max length of content is 256. MIT identifier is unique on blockchain. The maximum size of list of symbol and content pair is 100. Symbol and content are separated by a \u2018:\u2019. Example\uff1a Account Alice registers MIT named Alice@MIT to DID Alice\u3002 Command\uff1a `\\$ ./mvs-cli registermit Alice passwd1 Alice Alice@MIT -c \"Alice's MIT\"` Output\uff1a { \"transaction\" : { \"hash\" : \"9d52158296a9e33b49dcd0f9ceee26c8f2356f1486dc0d9a56ea49a1dd0d97e3\", \"inputs\" : [ { \"address\" : \"MJevGQHGwKQGNpeJF1vDxBawxKoRZMqsRz\", \"previous_output\" : { \"hash\" : \"bce39df08273418f93d594185f23273225ae5aadfe6bd54ea4f7bbae50a61ea2\", \"index\" : 1 }, \"script\" : \"[ 304402201f0d5f9c5c4d3de0db3ea80f3ae356558f76dfddc124c10eceb6523d2255b075022001f788e0a008b002c6bc9a31e2c945f9bbed4e6ba7def1f5c867e29f01d362c001 ][ 039497a1b7e0dbc762fbd389d8b1ac3215782758c753c521fc4e40914f8e14d5e8 ]\", \"sequence\" : 4294967295 } ], \"lock_time\" : \"0\", \"outputs\" : [ { \"address\" : \"MJevGQHGwKQGNpeJF1vDxBawxKoRZMqsRz\", \"attachment\" : { \"address\" : \"MJevGQHGwKQGNpeJF1vDxBawxKoRZMqsRz\", \"content\" : \"Alice's MIT\", \"from_did\" : \"Alice\", \"status\" : \"registered\", \"symbol\" : \"Alice@MIT\", \"to_did\" : \"Alice\", \"type\" : \"mit\" }, \"index\" : 0, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ 75f7e6e4b14d0aaa72a96bd5751070e7b7f813fb ] equalverify checksig\", \"value\" : 0 }, { \"address\" : \"MJevGQHGwKQGNpeJF1vDxBawxKoRZMqsRz\", \"attachment\" : { \"address\" : \"MJevGQHGwKQGNpeJF1vDxBawxKoRZMqsRz\", \"content\" : \"unified content of batch registerring mit.\", \"from_did\" : \"Alice\", \"status\" : \"registered\", \"symbol\" : \"BATCH_02@MIT\", \"to_did\" : \"Alice\", \"type\" : \"mit\" }, \"index\" : 1, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ b5eb75b67ccc47363ea623a3c73b2d23c9dd801a ] equalverify checksig\", \"value\" : 0 }, { \"address\" : \"MJevGQHGwKQGNpeJF1vDxBawxKoRZMqsRz\", \"attachment\" : { \"address\" : \"MJevGQHGwKQGNpeJF1vDxBawxKoRZMqsRz\", \"content\" : \"customized content.\", \"from_did\" : \"Alice\", \"status\" : \"registered\", \"symbol\" : \"BATCH_03@MIT\", \"to_did\" : \"Alice\", \"type\" : \"mit\" }, \"index\" : 2, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ b5eb75b67ccc47363ea623a3c73b2d23c9dd801a ] equalverify checksig\", \"value\" : 0 }, { \"address\" : \"MJevGQHGwKQGNpeJF1vDxBawxKoRZMqsRz\", \"attachment\" : { \"type\" : \"etp\" }, \"index\" : 3, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ b5eb75b67ccc47363ea623a3c73b2d23c9dd801a ] equalverify checksig\", \"value\" : 199980000 } ], \"version\" : \"4\" } }","title":"Register MIT"},{"location":"mittransfer/","text":"MIT Transfer Precondition This is mainly about register MIT command line operation. First, you need an account and a did. You can use mvs-cli getnewaccount accountname password and mvs-cli issuedid accountname password address did to generate a new account and a new did. For convenience, I\u2019ll uniformly use Alice as account name, passwd1 as password, Alice as did, and use testing addresses in the following examples. When you refer to the following examples, please change to your account name, password and did, and pay attention to the correct addresses. With an account, if you want to issue or send an asset, you have to make sure that there is enough ETP in the account to pay fees. You can use mvs-cli getbalance account_name password to get the total balance of the account. You can also use mvs-cli listbalances account_name password to list the balance of each address in the account. You can use help to get the help information of each command. For eaxmple, use mvs-cli help registermit or mvs-cli registermit -h to get the help information of registermit command. Transfer MIT Command: transfermit Usage: mvs-cli transfermit [-h] [--fee value] ACCOUNTNAME ACCOUNTAUTH TODID SYMBOL Options (named): -h [--help] Get a description and instructions for this command. -f [--fee] The fee of tx. default_value 0.0001 etp. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. TODID To DID required, multi-sign DID is supported. SYMBOL MIT identifier required. Example\uff1aAccount Alice transfers MIT named Alice@MIT to DID Bob Command\uff1a $ ./mvs-cli transfermit Alice passwd1 Bob Alice@MIT Output\uff1a { \"transaction\" : { \"hash\" : \"4fe272acccf0dae96ca71fc34350bbc425588725ef9224b23447cca57b86be60\", \"inputs\" : [ { \"address\" : \"MH257NnjBJZNAy258c4bjVVkFB8phMFqtY\", \"previous_output\" : { \"hash\" : \"6e34003a72537c7f0f8802c962ecb6c6660a581bfd34ba9e4e1132492b5cdd80\", \"index\" : 0 }, \"script\" : \"[ 304402203b281aed68b352d07fec303ac8baef47c4020edbeaa5a35ba146ba33d2e9c54c02202fb08aa2c1f3c0dda914a3c4f1630bbd795686690bec955475fef39283c78d2f01 ] [ 030848a4429c900e09159b39993e3edf6df1a4302d28d3a2af78a343042d7a8b5e ]\", \"sequence\" : 4294967295 }, { \"address\" : \"MJevGQHGwKQGNpeJF1vDxBawxKoRZMqsRz\", \"previous_output\" : { \"hash\" : \"9d52158296a9e33b49dcd0f9ceee26c8f2356f1486dc0d9a56ea49a1dd0d97e3\", \"index\" : 0 }, \"script\" : \"[ 304402200b8c33403b6cd72e086ebea2335812351fcb268421dffb9322f6e133518c393602202376aa29f4803150ed60a86984a0956e299f15a53f698bfcedd484ba2f722c1a01 ] [ 039497a1b7e0dbc762fbd389d8b1ac3215782758c753c521fc4e40914f8e14d5e8 ]\", \"sequence\" : 4294967295 } ], \"lock_time\" : \"0\", \"outputs\" : [ { \"address\" : \"MFj3WGtCxWT2BJZSJUJ9N9A3hKqCoaehaX\", \"attachment\" : { \"address\" : \"MFj3WGtCxWT2BJZSJUJ9N9A3hKqCoaehaX\", \"from_did\" : \"\", \"status\" : \"transfered\", \"symbol\" : \"Alice@MIT\", \"to_did\" : \"Bob\", \"type\" : \"mit\" }, \"index\" : 0, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ 55d73b3c20a6dd7391426624d4a7a697ed5c27cc ] equalverify checksig\", \"value\" : 0 }, { \"address\" : \"MH257NnjBJZNAy258c4bjVVkFB8phMFqtY\", \"attachment\" : { \"type\" : \"etp\" }, \"index\" : 1, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ 6407c4bae99d9784c60ab5c991fb3e7fe20ad647 ] equalverify checksig\", \"value\" : 299990000 } ], \"version\" : \"4\" } }","title":"MIT Transfer"},{"location":"mittransfer/#mit-transfer","text":"","title":"MIT Transfer"},{"location":"mittransfer/#precondition","text":"This is mainly about register MIT command line operation. First, you need an account and a did. You can use mvs-cli getnewaccount accountname password and mvs-cli issuedid accountname password address did to generate a new account and a new did. For convenience, I\u2019ll uniformly use Alice as account name, passwd1 as password, Alice as did, and use testing addresses in the following examples. When you refer to the following examples, please change to your account name, password and did, and pay attention to the correct addresses. With an account, if you want to issue or send an asset, you have to make sure that there is enough ETP in the account to pay fees. You can use mvs-cli getbalance account_name password to get the total balance of the account. You can also use mvs-cli listbalances account_name password to list the balance of each address in the account. You can use help to get the help information of each command. For eaxmple, use mvs-cli help registermit or mvs-cli registermit -h to get the help information of registermit command. Transfer MIT Command: transfermit Usage: mvs-cli transfermit [-h] [--fee value] ACCOUNTNAME ACCOUNTAUTH TODID SYMBOL Options (named): -h [--help] Get a description and instructions for this command. -f [--fee] The fee of tx. default_value 0.0001 etp. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. TODID To DID required, multi-sign DID is supported. SYMBOL MIT identifier required. Example\uff1aAccount Alice transfers MIT named Alice@MIT to DID Bob Command\uff1a $ ./mvs-cli transfermit Alice passwd1 Bob Alice@MIT Output\uff1a { \"transaction\" : { \"hash\" : \"4fe272acccf0dae96ca71fc34350bbc425588725ef9224b23447cca57b86be60\", \"inputs\" : [ { \"address\" : \"MH257NnjBJZNAy258c4bjVVkFB8phMFqtY\", \"previous_output\" : { \"hash\" : \"6e34003a72537c7f0f8802c962ecb6c6660a581bfd34ba9e4e1132492b5cdd80\", \"index\" : 0 }, \"script\" : \"[ 304402203b281aed68b352d07fec303ac8baef47c4020edbeaa5a35ba146ba33d2e9c54c02202fb08aa2c1f3c0dda914a3c4f1630bbd795686690bec955475fef39283c78d2f01 ] [ 030848a4429c900e09159b39993e3edf6df1a4302d28d3a2af78a343042d7a8b5e ]\", \"sequence\" : 4294967295 }, { \"address\" : \"MJevGQHGwKQGNpeJF1vDxBawxKoRZMqsRz\", \"previous_output\" : { \"hash\" : \"9d52158296a9e33b49dcd0f9ceee26c8f2356f1486dc0d9a56ea49a1dd0d97e3\", \"index\" : 0 }, \"script\" : \"[ 304402200b8c33403b6cd72e086ebea2335812351fcb268421dffb9322f6e133518c393602202376aa29f4803150ed60a86984a0956e299f15a53f698bfcedd484ba2f722c1a01 ] [ 039497a1b7e0dbc762fbd389d8b1ac3215782758c753c521fc4e40914f8e14d5e8 ]\", \"sequence\" : 4294967295 } ], \"lock_time\" : \"0\", \"outputs\" : [ { \"address\" : \"MFj3WGtCxWT2BJZSJUJ9N9A3hKqCoaehaX\", \"attachment\" : { \"address\" : \"MFj3WGtCxWT2BJZSJUJ9N9A3hKqCoaehaX\", \"from_did\" : \"\", \"status\" : \"transfered\", \"symbol\" : \"Alice@MIT\", \"to_did\" : \"Bob\", \"type\" : \"mit\" }, \"index\" : 0, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ 55d73b3c20a6dd7391426624d4a7a697ed5c27cc ] equalverify checksig\", \"value\" : 0 }, { \"address\" : \"MH257NnjBJZNAy258c4bjVVkFB8phMFqtY\", \"attachment\" : { \"type\" : \"etp\" }, \"index\" : 1, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ 6407c4bae99d9784c60ab5c991fb3e7fe20ad647 ] equalverify checksig\", \"value\" : 299990000 } ], \"version\" : \"4\" } }","title":"Precondition"},{"location":"mst/","text":"MST (Assets) Create An MST From Supernova, a MST can only be issued from an Avatar, so please make sure to create an avatar first. It is also this Avatar that will receive the new MST created. You now have the option to do Secondary Issue in the future. If you select this option, you, as owner and creator of this MST, will receive a certificate giving you the permission to issue more of this MST in the future, and so increase its maximum supply. You can select the secondary issue rules between 3 types: Secondary issue impossible: The MST is not allowed to be secondary issued forever, the Maximum Supply is fixed and cannot be changed. In that case, you will not receive any Secondary Issue certificate, since this option will not be available. This is the default option, and all the MSTs created before Supernova are in this category. No stacking restriction: The issuer of the MST will receive the Secondary issue certificate that will give him the permission to do a secondary issue at any time, as often as he wants, no matter how many token he owns 1 - 100%: This is the Secondary issue rate, the asset can be secondary issued only if the owner owns the Secondary issue certificate also owns at least this percentage of the Maximum supply of the MST Transfer an MST Similarly to ETP, an Avatar can also be used as the recipient to send a MST. You can also decide to freeze the asset, that you are sending to yourself or to someone else. Please note that at the opposite of ETP Deposit, freeze a MST does not generate an interest. This option could for instance be used during an ICO for investors who would accept to have their MST frozen in exchange of a discount price to buy the MST. You can also decide to use one of the Attenuation model, to gradually unlock the MST at a specified frequency. Please make sure the model used match your expectations in the confirmation. You can see your frozen balance of each MST in the \u2018Home\u2019 or \u2018Assets\u2019 page Note that you can now also use a multi-signature address to send and receive a MST. Do a Secondary Issue If you own the Secondary Issue certificate of an MST and match the required owning percentage (if specified at the asset creation), you can do a secondary issue by going to the MST page (click on its symbol in the \u2018Asset\u2019 page, or search for its name in the search section of the top bar). There, you can see the general information of this MST and click on Secondary Issue if the option has been specified. In the Secondary Issue page, you can specify which Avatar will receive the created MST and how many you want to issue. Please make sure to match the 3 conditions on the right: You need to own the secondary issue certificate of this asset The selected avatar needs to own at least the secondary issue threshold of this MST The selected avatar needs to have enough ETP to pay the transaction fee (minimum 0.0001 ETP) Similarly to a MST deposit, you can choose to freeze some of the created MST following one of the Attenuation model Example with Attenuation model 1: Example with Attenuation model 2: Always make sure in the confirmation page that the selected model match your expectations","title":"MST"},{"location":"mst/#mst-assets","text":"","title":"MST (Assets)"},{"location":"mst/#create-an-mst","text":"From Supernova, a MST can only be issued from an Avatar, so please make sure to create an avatar first. It is also this Avatar that will receive the new MST created. You now have the option to do Secondary Issue in the future. If you select this option, you, as owner and creator of this MST, will receive a certificate giving you the permission to issue more of this MST in the future, and so increase its maximum supply. You can select the secondary issue rules between 3 types: Secondary issue impossible: The MST is not allowed to be secondary issued forever, the Maximum Supply is fixed and cannot be changed. In that case, you will not receive any Secondary Issue certificate, since this option will not be available. This is the default option, and all the MSTs created before Supernova are in this category. No stacking restriction: The issuer of the MST will receive the Secondary issue certificate that will give him the permission to do a secondary issue at any time, as often as he wants, no matter how many token he owns 1 - 100%: This is the Secondary issue rate, the asset can be secondary issued only if the owner owns the Secondary issue certificate also owns at least this percentage of the Maximum supply of the MST","title":"Create An MST"},{"location":"mst/#transfer-an-mst","text":"Similarly to ETP, an Avatar can also be used as the recipient to send a MST. You can also decide to freeze the asset, that you are sending to yourself or to someone else. Please note that at the opposite of ETP Deposit, freeze a MST does not generate an interest. This option could for instance be used during an ICO for investors who would accept to have their MST frozen in exchange of a discount price to buy the MST. You can also decide to use one of the Attenuation model, to gradually unlock the MST at a specified frequency. Please make sure the model used match your expectations in the confirmation. You can see your frozen balance of each MST in the \u2018Home\u2019 or \u2018Assets\u2019 page Note that you can now also use a multi-signature address to send and receive a MST.","title":"Transfer an MST"},{"location":"mst/#do-a-secondary-issue","text":"If you own the Secondary Issue certificate of an MST and match the required owning percentage (if specified at the asset creation), you can do a secondary issue by going to the MST page (click on its symbol in the \u2018Asset\u2019 page, or search for its name in the search section of the top bar). There, you can see the general information of this MST and click on Secondary Issue if the option has been specified. In the Secondary Issue page, you can specify which Avatar will receive the created MST and how many you want to issue. Please make sure to match the 3 conditions on the right: You need to own the secondary issue certificate of this asset The selected avatar needs to own at least the secondary issue threshold of this MST The selected avatar needs to have enough ETP to pay the transaction fee (minimum 0.0001 ETP) Similarly to a MST deposit, you can choose to freeze some of the created MST following one of the Attenuation model Example with Attenuation model 1: Example with Attenuation model 2: Always make sure in the confirmation page that the selected model match your expectations","title":"Do a Secondary Issue"},{"location":"mstburn/","text":"Burn Asset Introduction User can send asset to a special address called blackhole address(1111111111111111111114oLvT2) to burn asset. Assets on blackhole address can not be spent. Burn Command\uff1a burn Usage: mvs-cli burn [-h] ACCOUNTNAME ACCOUNTAUTH SYMBOL AMOUNT Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. SYMBOL Asset symbol required. AMOUNT Amount of asset required. Example: $ ./mvs-cli burn Alice passwd1 MVS.Alice 2000000000 { \"transaction\" : { \"hash\" : \"383544319feef17b11df00fce2406af8d70a167b141c33dac5a72a7175c010a5\", \"inputs\" : [ { \"address\" : \"MRmQLBpRF4nz9BgxtHkfWfmZATC5yMKziH\", \"previous_output\" : { \"hash\" : \"825fcdff85ec5fbc951424b3a5b76fa125c0e2f5cf62ef082d760c48076aadbd\", \"index\" : 0 }, \"script\" : \"[ 3044022043f1aa6a535240499c3e934ddbb639648ff6d19ace8a03863e87d4d835dd48cf0220380c75711f5fc1bdc040f0f909b2ee8c182bb53eaa186a217bc6865f2450699101 ] [ 02b3b23bbdc7e1031c6dcd9914eaa42c7b1cd5969fae06fd5102b830020f3d9e55 ]\", \"sequence\" : 4294967295 }, { \"address\" : \"MTNAPPhPnNWGg3w4P7s3HEFVzouabJp77H\", \"previous_output\" : { \"hash\" : \"2a06aa22297e06cf09231acec4972b84e6493efc684eaa991956a077d2b1e2f3\", \"index\" : 0 }, \"script\" : \"[ 304402207e751c0b6c8b6dcab44a7df4ad71b1a6ad9fb0b3a2c7ed6fb479b7ff4fe057a00220502443066efa719724e3dd3b9443e7065cdb8d872ba6dac21945092f7afc572901 ] [ 02dbefb4acbd8ef0c8f6ef19a04b03033d74575fe4d8439d8f19f0c41eaf589c12 ]\", \"sequence\" : 4294967295 } ], \"lock_time\" : \"0\", \"outputs\" : [ { \"address\" : \"1111111111111111111114oLvT2\", \"attachment\" : { \"from_did\" : \"\", \"quantity\" : 2000000000, \"symbol\" : \"MVS.ALICE\", \"to_did\" : \"BLACKHOLE\", \"type\" : \"asset-transfer\" }, \"index\" : 0, \"locked_height_range\" : 0, \"script\" : \"return\", \"value\" : 0 }, { \"address\" : \"MRmQLBpRF4nz9BgxtHkfWfmZATC5yMKziH\", \"attachment\" : { \"type\" : \"etp\" }, \"index\" : 1, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ c3fab4b4d16052868c2dee4f5a4c773fbe358d86 ] equalverify checksig\", \"value\" : 299990000 }, ], \"version\" : \"4\" } }","title":"MST Burn"},{"location":"mstburn/#burn-asset","text":"Introduction User can send asset to a special address called blackhole address(1111111111111111111114oLvT2) to burn asset. Assets on blackhole address can not be spent.","title":"Burn Asset"},{"location":"mstburn/#burn","text":"Command\uff1a burn Usage: mvs-cli burn [-h] ACCOUNTNAME ACCOUNTAUTH SYMBOL AMOUNT Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. SYMBOL Asset symbol required. AMOUNT Amount of asset required. Example: $ ./mvs-cli burn Alice passwd1 MVS.Alice 2000000000 { \"transaction\" : { \"hash\" : \"383544319feef17b11df00fce2406af8d70a167b141c33dac5a72a7175c010a5\", \"inputs\" : [ { \"address\" : \"MRmQLBpRF4nz9BgxtHkfWfmZATC5yMKziH\", \"previous_output\" : { \"hash\" : \"825fcdff85ec5fbc951424b3a5b76fa125c0e2f5cf62ef082d760c48076aadbd\", \"index\" : 0 }, \"script\" : \"[ 3044022043f1aa6a535240499c3e934ddbb639648ff6d19ace8a03863e87d4d835dd48cf0220380c75711f5fc1bdc040f0f909b2ee8c182bb53eaa186a217bc6865f2450699101 ] [ 02b3b23bbdc7e1031c6dcd9914eaa42c7b1cd5969fae06fd5102b830020f3d9e55 ]\", \"sequence\" : 4294967295 }, { \"address\" : \"MTNAPPhPnNWGg3w4P7s3HEFVzouabJp77H\", \"previous_output\" : { \"hash\" : \"2a06aa22297e06cf09231acec4972b84e6493efc684eaa991956a077d2b1e2f3\", \"index\" : 0 }, \"script\" : \"[ 304402207e751c0b6c8b6dcab44a7df4ad71b1a6ad9fb0b3a2c7ed6fb479b7ff4fe057a00220502443066efa719724e3dd3b9443e7065cdb8d872ba6dac21945092f7afc572901 ] [ 02dbefb4acbd8ef0c8f6ef19a04b03033d74575fe4d8439d8f19f0c41eaf589c12 ]\", \"sequence\" : 4294967295 } ], \"lock_time\" : \"0\", \"outputs\" : [ { \"address\" : \"1111111111111111111114oLvT2\", \"attachment\" : { \"from_did\" : \"\", \"quantity\" : 2000000000, \"symbol\" : \"MVS.ALICE\", \"to_did\" : \"BLACKHOLE\", \"type\" : \"asset-transfer\" }, \"index\" : 0, \"locked_height_range\" : 0, \"script\" : \"return\", \"value\" : 0 }, { \"address\" : \"MRmQLBpRF4nz9BgxtHkfWfmZATC5yMKziH\", \"attachment\" : { \"type\" : \"etp\" }, \"index\" : 1, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ c3fab4b4d16052868c2dee4f5a4c773fbe358d86 ] equalverify checksig\", \"value\" : 299990000 }, ], \"version\" : \"4\" } }","title":"Burn"},{"location":"mstcertificate/","text":"MST Certificate Precondition You need an account and a did. You can use mvs-cli getnewaccount accountname password and mvs-cli issuedid accountname password address did to generate a new account and a new did. For convenience, I\u2019ll uniformly use Alice as account name, passwd1 as password, Alice as did, and use testing addresses in the following examples. When you refer to the following examples, please change to your account name, password and did, and pay attention to the correct addresses. With an account, if you want to issue or send an asset, you have to make sure that there is enough ETP in the account to pay fees. You can use mvs-cli getbalance account_name password to get the total balance of the account. You can also use mvs-cli listbalances account_name password to list the balance of each address in the account. You can use help to get the help information of each command. For eaxmple, use mvs-cli help createasset or mvs-cli createasset -h to get the help information of createasset command. What is MST Certificate? The asset certificate is a certificate of an asset\u2019s interest. It is unique and can be transferred between DIDs. Secondary issue certificate, domain certificate and naming certificate are supported now. Assets or certificate can only be issued if user has the appropriate certificate. Type of certificate Secondary issue certificate, domain certificate and naming certificate are supported now\uff1a issue: Secondary issue certificate. Asset can only be secondary issued if user has a secondary issue certificate with the same name as the asset. This certificate is automatically issued to the issuer when issuing assets that can be secondary issued. Related commands: createasset, issue, secondaryissue. domain: Domain certificate. The domain certificate is automatically provided at the asset creation stage and is available on the first-issue first-served basis. For example, if you own the domain MVS, only you can create an asset whose name starts with MVS. Related commands: createasset, issue. naming: Naming certificate. The owner of domain certificate can create the naming certificate that can be transferred to others, for them to issue the asset with the same name as the naming certificate. Related commands: issuecert, transfercert. Notes: Issuing a asset whose name starts with a dot . would not generate any certificate.","title":"Introduction"},{"location":"mstcertificate/#mst-certificate","text":"","title":"MST Certificate"},{"location":"mstcertificate/#precondition","text":"You need an account and a did. You can use mvs-cli getnewaccount accountname password and mvs-cli issuedid accountname password address did to generate a new account and a new did. For convenience, I\u2019ll uniformly use Alice as account name, passwd1 as password, Alice as did, and use testing addresses in the following examples. When you refer to the following examples, please change to your account name, password and did, and pay attention to the correct addresses. With an account, if you want to issue or send an asset, you have to make sure that there is enough ETP in the account to pay fees. You can use mvs-cli getbalance account_name password to get the total balance of the account. You can also use mvs-cli listbalances account_name password to list the balance of each address in the account. You can use help to get the help information of each command. For eaxmple, use mvs-cli help createasset or mvs-cli createasset -h to get the help information of createasset command.","title":"Precondition"},{"location":"mstcertificate/#what-is-mst-certificate","text":"The asset certificate is a certificate of an asset\u2019s interest. It is unique and can be transferred between DIDs. Secondary issue certificate, domain certificate and naming certificate are supported now. Assets or certificate can only be issued if user has the appropriate certificate.","title":"What is MST Certificate?"},{"location":"mstcertificate/#type-of-certificate","text":"Secondary issue certificate, domain certificate and naming certificate are supported now\uff1a issue: Secondary issue certificate. Asset can only be secondary issued if user has a secondary issue certificate with the same name as the asset. This certificate is automatically issued to the issuer when issuing assets that can be secondary issued. Related commands: createasset, issue, secondaryissue. domain: Domain certificate. The domain certificate is automatically provided at the asset creation stage and is available on the first-issue first-served basis. For example, if you own the domain MVS, only you can create an asset whose name starts with MVS. Related commands: createasset, issue. naming: Naming certificate. The owner of domain certificate can create the naming certificate that can be transferred to others, for them to issue the asset with the same name as the naming certificate. Related commands: issuecert, transfercert. Notes: Issuing a asset whose name starts with a dot . would not generate any certificate.","title":"Type of certificate"},{"location":"mstconditionaloffering/","text":"MST Conditional Offering Concept Attenuation model is an advanced lock mechanism. This model will lock some specified quantity of assets, and unlock them gradually in a specified way(specified time interval and quantity). In fact, the Digital Aseets Lock-Unlock model is the function combinated by MIP-3(Digital Assets Secondary Issue), MIP-7 Digital Aseets - Lock), and MIP-8(Digital Aseets - Unlock). We decide to list a series of adjustable parameters for user to adjust by themselves, like Issue/issuance quantitiy, Freeze quantity, Release period, etc. ref https://github.com/mvs-org/mips/issues/7 for more information. Usage How to specify attenuation model param? The param is specified in issue and secondaryissue and [did]sendasset and [did]sendassetfrom command, through -m [--model] option. How to know the locked asset quantity? Through getaccountasset and getaddressasset command, is the value corresponding to key \u201clocked_quantity\u201d. How to know the attenuation model param? Through gettx and lsittxs comand, is the json object corresponding to key \u201cattenuation_model_param\u201d. How is the locked asset be unlocked? The locked asset is unlocked according to the block height. No need to manually unlock them, and it can be spend directly if the locked time interval is passed. And the unlocked quantity is also calulated automatically. Supported Model Type fixed quantity ( TYPE = 1 ) This model will unlock the assets with equal quantity and with equal time interval. The last cycle may have some difference as remainder of division. custom ( TYPE = 2 ) This model will unlock the assets with quantity and time interval customized by user. fixed inflation ( TYPE = 3 ) This model unlock Token with a Inflation rate release model for each period and dynamically adjust the Quantity of unlocks per period. Model Param\u2019s Format = (equal sign) separates key and value of key-value entry. ; (semicolon) separates key-value entries. , (comma) separates items of value in key-value entry. The keys of each model are restricted to given ones, no more and no less. For fixed quantity model, the keys are PN, LH, TYPE, LQ, LP, UN For custom model, the keys are PN, LH, TYPE, LQ, LP, UN, UC, UQ For custom model, the keys are PN, LH, TYPE, LQ, LP, UN, IR Among these keys, PN, LH are mutable and generated by program(user should not imput these two keys). The others are immutable, after inited, they will never change any more. The keys\u2019 meaning In order to facilitate the description of subsequent calculation formulas, we define the following parameters in a unified way\uff1a IQ\uff1aTotal quantity of utxo at this time, must >0 LQ\uff1aTotal lock quantity at this time, must >=0 LP\uff1aTotal lock period, in block height units, must >0 and be the integer number UC_t\uff1aUnlock period, in block height units, defines the unlock interval. UQ_t: Quantity of Unlocks in period t IR_t: Inflation Rate in period t concrete names for short keys: PN current_period_nbr LH next_interval TYPE type LQ lock_quantity LP lock_period UN total_period_nbr IR inflation_rate UC custom_lock_number_array UQ custom_lock_quantity_array Constraints values must satisfy for fixed quantity model TYPE=1, UN>0, LQ<=IQ(utxo asset value) LQ>=UN LP>=UN for custom model TYPE=2, UN>0, UN<=100 LQ<=IQ(utxo asset value) both UC and UQ array size are equal to UN, and with positive item. LQ = sum of UQ array items LP = sum of UC array items for fixed inflation model TYPE=3, UN>0, UN<=100 LQ=IQ(utxo asset value) LQ>=UN LP>=UN IR>0, IR<=100000 Examples example of fixed quantity model param user input: \u201cTYPE=1;LQ=9001;LP=60001;UN=3\u201d after init: \u201cPN=0;LH=20000;TYPE=1;LQ=9001;LP=60001;UN=3\u201d This model means 9001 (LQ) assets will be locked in 60001 (LP) block heights. These assets will be unlocked in 3 (UN) periods with fixed quantity and interval. We can infer that **UC=LP/UN** and **UQ=LQ/UN** (the last unlock all left) That is UC=60001/3=20000 and UQ=9001/3=3000, so, - after 20000 block height, 3000 will be unlocked, - after another 20000 block height, another 3000 will be unlocked, - after the left 20001 block height, the all lefted 3001 will be unlocked. example of custom model param user input: \u201cTYPE=2;LQ=9001;LP=60001;UN=3;UC=20000,20000,20001;UQ=3000,3000,3001\u201d after init: \u201cPN=0;LH=20000;TYPE=2;LQ=9001;LP=60001;UN=3;UC=20000,20000,20001;UQ=3000,3000,3001\u201d This custom model has the same effect with the above example. It's unlock quantity and time interval is specified by arrays. example of fixed inflation model param user input: \u201cTYPE=3;LQ=20000000;LP=12000;UN=12;IR=8\u201d after init: \u201cPN=0;LH=1000;TYPE=3;LQ=20000000;LP=12000;UN=12;IR=8;UC=\u2026;UQ=\u2026\u201d This model will calculate UC and UQ in the initialization, and then use it just like a cumstom model from then on.","title":"MST Conditional Offering"},{"location":"mstconditionaloffering/#mst-conditional-offering","text":"","title":"MST Conditional Offering"},{"location":"mstconditionaloffering/#concept","text":"Attenuation model is an advanced lock mechanism. This model will lock some specified quantity of assets, and unlock them gradually in a specified way(specified time interval and quantity). In fact, the Digital Aseets Lock-Unlock model is the function combinated by MIP-3(Digital Assets Secondary Issue), MIP-7 Digital Aseets - Lock), and MIP-8(Digital Aseets - Unlock). We decide to list a series of adjustable parameters for user to adjust by themselves, like Issue/issuance quantitiy, Freeze quantity, Release period, etc. ref https://github.com/mvs-org/mips/issues/7 for more information.","title":"Concept"},{"location":"mstconditionaloffering/#usage","text":"How to specify attenuation model param? The param is specified in issue and secondaryissue and [did]sendasset and [did]sendassetfrom command, through -m [--model] option. How to know the locked asset quantity? Through getaccountasset and getaddressasset command, is the value corresponding to key \u201clocked_quantity\u201d. How to know the attenuation model param? Through gettx and lsittxs comand, is the json object corresponding to key \u201cattenuation_model_param\u201d. How is the locked asset be unlocked? The locked asset is unlocked according to the block height. No need to manually unlock them, and it can be spend directly if the locked time interval is passed. And the unlocked quantity is also calulated automatically.","title":"Usage"},{"location":"mstconditionaloffering/#supported-model-type","text":"fixed quantity ( TYPE = 1 ) This model will unlock the assets with equal quantity and with equal time interval. The last cycle may have some difference as remainder of division. custom ( TYPE = 2 ) This model will unlock the assets with quantity and time interval customized by user. fixed inflation ( TYPE = 3 ) This model unlock Token with a Inflation rate release model for each period and dynamically adjust the Quantity of unlocks per period.","title":"Supported Model Type"},{"location":"mstconditionaloffering/#model-params-format","text":"= (equal sign) separates key and value of key-value entry. ; (semicolon) separates key-value entries. , (comma) separates items of value in key-value entry. The keys of each model are restricted to given ones, no more and no less. For fixed quantity model, the keys are PN, LH, TYPE, LQ, LP, UN For custom model, the keys are PN, LH, TYPE, LQ, LP, UN, UC, UQ For custom model, the keys are PN, LH, TYPE, LQ, LP, UN, IR Among these keys, PN, LH are mutable and generated by program(user should not imput these two keys). The others are immutable, after inited, they will never change any more. The keys\u2019 meaning In order to facilitate the description of subsequent calculation formulas, we define the following parameters in a unified way\uff1a IQ\uff1aTotal quantity of utxo at this time, must >0 LQ\uff1aTotal lock quantity at this time, must >=0 LP\uff1aTotal lock period, in block height units, must >0 and be the integer number UC_t\uff1aUnlock period, in block height units, defines the unlock interval. UQ_t: Quantity of Unlocks in period t IR_t: Inflation Rate in period t concrete names for short keys: PN current_period_nbr LH next_interval TYPE type LQ lock_quantity LP lock_period UN total_period_nbr IR inflation_rate UC custom_lock_number_array UQ custom_lock_quantity_array","title":"Model Param\u2019s Format"},{"location":"mstconditionaloffering/#constraints-values-must-satisfy","text":"for fixed quantity model TYPE=1, UN>0, LQ<=IQ(utxo asset value) LQ>=UN LP>=UN for custom model TYPE=2, UN>0, UN<=100 LQ<=IQ(utxo asset value) both UC and UQ array size are equal to UN, and with positive item. LQ = sum of UQ array items LP = sum of UC array items for fixed inflation model TYPE=3, UN>0, UN<=100 LQ=IQ(utxo asset value) LQ>=UN LP>=UN IR>0, IR<=100000","title":"Constraints values must satisfy"},{"location":"mstconditionaloffering/#examples","text":"example of fixed quantity model param user input: \u201cTYPE=1;LQ=9001;LP=60001;UN=3\u201d after init: \u201cPN=0;LH=20000;TYPE=1;LQ=9001;LP=60001;UN=3\u201d This model means 9001 (LQ) assets will be locked in 60001 (LP) block heights. These assets will be unlocked in 3 (UN) periods with fixed quantity and interval. We can infer that **UC=LP/UN** and **UQ=LQ/UN** (the last unlock all left) That is UC=60001/3=20000 and UQ=9001/3=3000, so, - after 20000 block height, 3000 will be unlocked, - after another 20000 block height, another 3000 will be unlocked, - after the left 20001 block height, the all lefted 3001 will be unlocked. example of custom model param user input: \u201cTYPE=2;LQ=9001;LP=60001;UN=3;UC=20000,20000,20001;UQ=3000,3000,3001\u201d after init: \u201cPN=0;LH=20000;TYPE=2;LQ=9001;LP=60001;UN=3;UC=20000,20000,20001;UQ=3000,3000,3001\u201d This custom model has the same effect with the above example. It's unlock quantity and time interval is specified by arrays. example of fixed inflation model param user input: \u201cTYPE=3;LQ=20000000;LP=12000;UN=12;IR=8\u201d after init: \u201cPN=0;LH=1000;TYPE=3;LQ=20000000;LP=12000;UN=12;IR=8;UC=\u2026;UQ=\u2026\u201d This model will calculate UC and UQ in the initialization, and then use it just like a cumstom model from then on.","title":"Examples"},{"location":"mstintro/","text":"Digital Assets (MST) Metaverse Smart Token (MST) MST is a set of token standards that allow everyone to issue tokens anytime and anywhere, very much like ERC20 tokens. You can operate it via a visual interface without any programming basics. You can even issue a Token in the SPV Light Wallet and these tokens can be safely transferred as Bitcoin. MST tokens run on the Metaverse(MVS) blockchain (such as MVS.ZGC, CSD, LEBLOCK, etc). MST describes the standard that these tokens conform to. They are all \u201cbuilt\u201d following the same set of \u201crules\u201d, allowing them to operate on MVS. Globally uniqueness; No need of deployment, user-friendly; Native support for multiple financial instruments; Custom investment thresholds; The token standardization would necessarily be the most important development direction of the blockchain application. Digital asset exchange platforms support several token standards, it will greatly unlock economic energy of the blockchain token and bring about considerable economic efficiency improvement.","title":"Introduction"},{"location":"mstintro/#digital-assets-mst","text":"Metaverse Smart Token (MST) MST is a set of token standards that allow everyone to issue tokens anytime and anywhere, very much like ERC20 tokens. You can operate it via a visual interface without any programming basics. You can even issue a Token in the SPV Light Wallet and these tokens can be safely transferred as Bitcoin. MST tokens run on the Metaverse(MVS) blockchain (such as MVS.ZGC, CSD, LEBLOCK, etc). MST describes the standard that these tokens conform to. They are all \u201cbuilt\u201d following the same set of \u201crules\u201d, allowing them to operate on MVS. Globally uniqueness; No need of deployment, user-friendly; Native support for multiple financial instruments; Custom investment thresholds; The token standardization would necessarily be the most important development direction of the blockchain application. Digital asset exchange platforms support several token standards, it will greatly unlock economic energy of the blockchain token and bring about considerable economic efficiency improvement.","title":"Digital Assets (MST)"},{"location":"mstissuance/","text":"MST Issuance Precondition This is mainly about asset issuance related command line operation, and other commands can be referred to Command-line. First, you need an account and a did. You can use mvs-cli getnewaccount accountname password and mvs-cli issuedid accountname password address did to generate a new account and a new did. Please save the main private key (mnemonic-key) safely\u3002 For convenience, I\u2019ll uniformly use test1 as account name, passwd1 as password, testdid as did, and use testing addresses in the following examples. When you refer to the following examples, please change to your account name, password and did, and pay attention to the correct addresses. With an account, if you want to issue or send an asset, you have to make sure that there is enough ETP in the account to pay fees. You can use \"mvs-cli getbalance test1 passwd1\" to get the total balance of the account. You can also use mvs-cli listbalances test1 passwd1 to list the balance of each address in the account. You can use help to get the help information of each command. For eaxmple, use mvs-cli help createasset or mvs-cli createasset -h to get the help information of createasset command. Introduction Before you issue an asset, you need to create it and set its properties. If an asset is issued, it can not be delete anymore. But you can delete the asset which is created and not issued yet by command deletelocalasset. Create Asset Create an asset by command createasset . Usage: mvs-cli createasset [-h] --symbol value --volume value [--description value] [--issuer value] [--decimalnumber value] [--rate value] ACCOUNTNAME ACCOUNTAUTH Info: createasset Options (named): -h [--help] Get a description and instructions for this command. -d [--description] The asset description, defaults to empty string. -i [--issuer] The asset issuer's did. -n [--decimalnumber] The asset amount decimal number, defaults to 0. -r [--rate] The rate of secondaryissue. Default to 0, means the asset is not allowed to secondary issue forever; otherwise, -1 means the asset can be secondary issue freely; otherwise, the valid rate is in range of 1 to 100, means the asset can be secondary issue when own percentage greater than or equal to the rate value. -s [--symbol] The asset symbol/name. Global unique. -v [--volume] The asset maximum supply volume, with unit of integer bits. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. Example\uff1a $ mvs-cli createasset --symbol MVS.TST --volume 1000000000000 --description \"testing asset of MVS\" --issuer testdid --decimalnumber 8 --rate 30 test1 passwd1 Issue Asset issue \u2013 It needs the following paramenters: account_name, account_passwd, asset_symbol. issue command can use --fee integer_value to specify fees. The default fee of issuing asset is 10 ETPs. The more the fee is, the time for confirmation may be more shorter, as the miners are more willing to put your transaction into their blocks. Generally, the default values is suggested. Notice: You can not issue the same asset more than once, otherwise an error \u201cvalidate transaction failure\u201d will throw. Example\uff1a \\$ mvs-cli issue test1 passwd1 MVS.TST Added in nova (v0.8.0): You can use -m [--model] option to set attenuation model param Please refer to MST Conditional Offering to learn more about attenuation model.","title":"MST Issuance"},{"location":"mstissuance/#mst-issuance","text":"","title":"MST Issuance"},{"location":"mstissuance/#precondition","text":"This is mainly about asset issuance related command line operation, and other commands can be referred to Command-line. First, you need an account and a did. You can use mvs-cli getnewaccount accountname password and mvs-cli issuedid accountname password address did to generate a new account and a new did. Please save the main private key (mnemonic-key) safely\u3002 For convenience, I\u2019ll uniformly use test1 as account name, passwd1 as password, testdid as did, and use testing addresses in the following examples. When you refer to the following examples, please change to your account name, password and did, and pay attention to the correct addresses. With an account, if you want to issue or send an asset, you have to make sure that there is enough ETP in the account to pay fees. You can use \"mvs-cli getbalance test1 passwd1\" to get the total balance of the account. You can also use mvs-cli listbalances test1 passwd1 to list the balance of each address in the account. You can use help to get the help information of each command. For eaxmple, use mvs-cli help createasset or mvs-cli createasset -h to get the help information of createasset command.","title":"Precondition"},{"location":"mstissuance/#introduction","text":"Before you issue an asset, you need to create it and set its properties. If an asset is issued, it can not be delete anymore. But you can delete the asset which is created and not issued yet by command deletelocalasset. Create Asset Create an asset by command createasset . Usage: mvs-cli createasset [-h] --symbol value --volume value [--description value] [--issuer value] [--decimalnumber value] [--rate value] ACCOUNTNAME ACCOUNTAUTH Info: createasset Options (named): -h [--help] Get a description and instructions for this command. -d [--description] The asset description, defaults to empty string. -i [--issuer] The asset issuer's did. -n [--decimalnumber] The asset amount decimal number, defaults to 0. -r [--rate] The rate of secondaryissue. Default to 0, means the asset is not allowed to secondary issue forever; otherwise, -1 means the asset can be secondary issue freely; otherwise, the valid rate is in range of 1 to 100, means the asset can be secondary issue when own percentage greater than or equal to the rate value. -s [--symbol] The asset symbol/name. Global unique. -v [--volume] The asset maximum supply volume, with unit of integer bits. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. Example\uff1a $ mvs-cli createasset --symbol MVS.TST --volume 1000000000000 --description \"testing asset of MVS\" --issuer testdid --decimalnumber 8 --rate 30 test1 passwd1","title":"Introduction"},{"location":"mstissuance/#issue-asset","text":"issue \u2013 It needs the following paramenters: account_name, account_passwd, asset_symbol. issue command can use --fee integer_value to specify fees. The default fee of issuing asset is 10 ETPs. The more the fee is, the time for confirmation may be more shorter, as the miners are more willing to put your transaction into their blocks. Generally, the default values is suggested. Notice: You can not issue the same asset more than once, otherwise an error \u201cvalidate transaction failure\u201d will throw. Example\uff1a \\$ mvs-cli issue test1 passwd1 MVS.TST Added in nova (v0.8.0): You can use -m [--model] option to set attenuation model param Please refer to MST Conditional Offering to learn more about attenuation model.","title":"Issue Asset"},{"location":"mstmultisig/","text":"MST Multi-signature Introduction A multi-signature address is an address that is associated with more than one ECDSA private key. The simplest type is an m-of-n address - it is associated with n private keys, and sending possession from this address requires signatures from at least m keys. A multi-signature transaction is one that sends possession from a multi-signature address. For example\uff1a 1-of-2: Husband and wife petty cash joint account \u2014 the signature of either spouse is sufficient to spend the funds. 2-of-2: Husband and wife savings account \u2014 both signatures are required to spend the funds, preventing one spouse from spending the money without the approval of the other. Use Multi-signature Every participator gets the public-key of an address by command getpublickey and let others known the public-key. The corresponding private-key will be used to signature multi-signature transaction later. Every participator creates a multi-signature address by command getnewmultisig with the public-key got in step 1 and same constraints(that means same m, n and public-keys). A multi-signature address is called P2SH\uff08Pay-to-Script-Hash\uff09, it starts with number 3. The multi-signature addresses created by participators should be the same. One participator creates a multi-signature transaction by command createmultisigtx with the multi-signature addresses created in step 2. The content of the multi-signature transaction can be decoded by command decoderawtx. m participators signature the multi-signature transaction successively by command signmultisigtx. They signature and send the output to the next participator. After m participators signatured, broadcast the multi-signature transaction to Metaverse network by command sendrawtx. Commands related to Multi-signature The following commands allow you to use multi-signature in Metaverse: getpublickey getnewmultisig listmultisig deletemultisig createmultisigtx signmultisigtx sendrawtx decoderawtx registerdid didchangeaddress transfercert transfermit The following example involves three accounts\uff1aAlice\uff0cBob and Cindy. For more detail of the commands, please refer to API_v3_multisig . Get and inform public-key Every participator gets the public-key of an address by command getpublickey and let others known the public-key. // Alice gets the public-key of an address of she. Command\uff1a \\$ ./mvs-cli getpublickey Alice A123456 \"MCJ6vpdCYsVD34XFC22fhqDLfHo7ZtnyM2\" Output\uff1a { \"address\" : \"MCJ6vpdCYsVD34XFC22fhqDLfHo7ZtnyM2\", \"public-key\" : \"03d29f0b96f332e50d6014cb91c334214ecb8caf2881a97e7d944bdf4e5fd6a39e\" } // Bob gets the public-key of an address of he. Command\uff1a \\$ ./mvs-cli getpublickey Bob B123456 MHaKHUFwAdcszvQarCmn1Rkq2uRoPQjZwm Output\uff1a { \"address\" : \"MHaKHUFwAdcszvQarCmn1Rkq2uRoPQjZwm\", \"public-key\" : \"03f97e079ccae21e1ee65d5ee64e5c27d7d6ce9a867cec75e9736ad5f258329e02\" } // Cindy gets the public-key of an address of she. Command\uff1a \\$ ./mvs-cli getpublickey Cindy C123456 MKXa7mtzNaGCEF9vM2sUmmTS93iDpHYd4m Output\uff1a { \"address\" : \"MKXa7mtzNaGCEF9vM2sUmmTS93iDpHYd4m\", \"public-key\" : \"02729cae0c16009f44440f306b76fafb7a7d2503741a619c15b41ff927c1afd6b9\" } Create a multi-signature address Every participator creates the same multi-signature address with the command getnewmultisig with the public-key obtained in step 1 and the same constraints(that means same m, n and public-keys). For example, every participator creates a same multi-signature address with the command getnewmultisig with option option m setted to 2, option n setted to 3, option -s for self public-key and options -k for other\u2019s public-keys. Finally the get the same multi-signature address 39hh1NY9xyTKzawD8zFKXgXa7XBwqck6BR. // Alice creates a multi-signature address Command\uff1a $ ./mvs-cli getnewmultisig Alice A123456 -m 2 -n 3 -s \"03d29f0b96f332e50d6014cb91c334214ecb8caf2881a97e7d944bdf4e5fd6a39e\" -k \"03f97e079ccae21e1ee65d5ee64e5c27d7d6ce9a867cec75e9736ad5f258329e02\" -k \"02729cae0c16009f44440f306b76fafb7a7d2503741a619c15b41ff927c1afd6b9\" -d \"multisig test\" Output\uff1a { \"address\" : \"39hh1NY9xyTKzawD8zFKXgXa7XBwqck6BR\", \"description\" : \"multisig test\", \"index\" : 1, \"m\" : 2, \"multisig-script\" : \"2 [ 02729cae0c16009f44440f306b76fafb7a7d2503741a619c15b41ff927c1afd6b9 ] [ 03d29f0b96f332e50d6014cb91c334214ecb8caf2881a97e7d944bdf4e5fd6a39e ] [ 03f97e079ccae21e1ee65d5ee64e5c27d7d6ce9a867cec75e9736ad5f258329e02 ] 3 checkmultisig\", \"n\" : 3, \"public-keys\" : [ \"02729cae0c16009f44440f306b76fafb7a7d2503741a619c15b41ff927c1afd6b9\", \"03d29f0b96f332e50d6014cb91c334214ecb8caf2881a97e7d944bdf4e5fd6a39e\", \"03f97e079ccae21e1ee65d5ee64e5c27d7d6ce9a867cec75e9736ad5f258329e02\" ], \"self-publickey\" : \"03d29f0b96f332e50d6014cb91c334214ecb8caf2881a97e7d944bdf4e5fd6a39e\" } // Bob creates a multi-signature address Command\uff1a $ ./mvs-cli getnewmultisig Bob B123456 -m 2 -n 3 -s \"03f97e079ccae21e1ee65d5ee64e5c27d7d6ce9a867cec75e9736ad5f258329e02\" -k \"03d29f0b96f332e50d6014cb91c334214ecb8caf2881a97e7d944bdf4e5fd6a39e\" -k \"02729cae0c16009f44440f306b76fafb7a7d2503741a619c15b41ff927c1afd6b9\" -d \"multisig test\" Output\uff1a { \"address\" : \"39hh1NY9xyTKzawD8zFKXgXa7XBwqck6BR\", \"description\" : \"multisig test\", \"index\" : 1, \"m\" : 2, \"multisig-script\" : \"2 [ 02729cae0c16009f44440f306b76fafb7a7d2503741a619c15b41ff927c1afd6b9 ] [ 03d29f0b96f332e50d6014cb91c334214ecb8caf2881a97e7d944bdf4e5fd6a39e ] [ 03f97e079ccae21e1ee65d5ee64e5c27d7d6ce9a867cec75e9736ad5f258329e02 ] 3 checkmultisig\", \"n\" : 3, \"public-keys\" : [ \"02729cae0c16009f44440f306b76fafb7a7d2503741a619c15b41ff927c1afd6b9\", \"03d29f0b96f332e50d6014cb91c334214ecb8caf2881a97e7d944bdf4e5fd6a39e\", \"03f97e079ccae21e1ee65d5ee64e5c27d7d6ce9a867cec75e9736ad5f258329e02\" ], \"self-publickey\" : \"03f97e079ccae21e1ee65d5ee64e5c27d7d6ce9a867cec75e9736ad5f258329e02\" } // Cindy creates a multi-signature address Command\uff1a $ ./mvs-cli getnewmultisig Cindy C123456 -m 2 -n 3 -s \"02729cae0c16009f44440f306b76fafb7a7d2503741a619c15b41ff927c1afd6b9\" -k \"03f97e079ccae21e1ee65d5ee64e5c27d7d6ce9a867cec75e9736ad5f258329e02\" -k \"03d29f0b96f332e50d6014cb91c334214ecb8caf2881a97e7d944bdf4e5fd6a39e\" -d \"multisig test\" Output\uff1a { \"address\" : \"39hh1NY9xyTKzawD8zFKXgXa7XBwqck6BR\", \"description\" : \"\", \"index\" : 1, \"m\" : 2, \"multisig-script\" : \"2 [ 02729cae0c16009f44440f306b76fafb7a7d2503741a619c15b41ff927c1afd6b9 ] [ 03d29f0b96f332e50d6014cb91c334214ecb8caf2881a97e7d944bdf4e5fd6a39e ] [ 03f97e079ccae21e1ee65d5ee64e5c27d7d6ce9a867cec75e9736ad5f258329e02 ] 3 checkmultisig\", \"n\" : 3, \"public-keys\" : [ \"02729cae0c16009f44440f306b76fafb7a7d2503741a619c15b41ff927c1afd6b9\", \"03d29f0b96f332e50d6014cb91c334214ecb8caf2881a97e7d944bdf4e5fd6a39e\", \"03f97e079ccae21e1ee65d5ee64e5c27d7d6ce9a867cec75e9736ad5f258329e02\" ], \"self-publickey\" : \"02729cae0c16009f44440f306b76fafb7a7d2503741a619c15b41ff927c1afd6b9\" } Send ETP to the multi-signature address Participators send ETP to the multi-signature address by command send or sendfrom accord to their contract. Create a multi-signature transaction One participator creates a multi-signature transaction to spend ETP on the multi-signature address by command createmultisigtx . The detail of the transaction can be displayed by command decoderawtx . For example, Cindy creates a multi-signature transaction to send ETP from the multi-signature address to address MHaKHUFwAdcszvQarCmn1Rkq2uRoPQjZwm . Command\uff1a $ ./mvs-cli decoderawtx \"02000000016453713104d144387553bcb0fa457f40d2dc5fb916bd9e2256835a4b6de48d4c00000000b500483045022100cbfdda943648344dc03fd92a905072082af93dfd4f166e3d1bb258e3437069790220321ee22c6a2543392909e21cd347d009a6d32173c23700424b45b4592d4075e3014c69522102729cae0c16009f44440f306b76fafb7a7d2503741a619c15b41ff927c1afd6b92103d29f0b96f332e50d6014cb91c334214ecb8caf2881a97e7d944bdf4e5fd6a39e2103f97e079ccae21e1ee65d5ee64e5c27d7d6ce9a867cec75e9736ad5f258329e0253aeffffffff02100d0000000000001976a9146a20e940e8d7be0a49c598e91fa79c8b36e5353588ac0100000000000000d0fb01000000000017a91457e1a19e5ee4c0065f8fd76b0351fa145e44435a87010000000000000000000000\" Output\uff1a { \"transaction\" : { \"hash\" : \"69c044be3c137f0bb34908be257acbb8157877bc57976a25881ed942384a9a61\", \"inputs\" : [ { \"address\" : \"39hh1NY9xyTKzawD8zFKXgXa7XBwqck6BR\", \"previous_output\" : { \"hash\" : \"4c8de46d4b5a8356229ebd16b95fdcd2407f45fab0bc53753844d10431715364\", \"index\" : 0 }, \"script\" : \"zero [ 3045022100cbfdda943648344dc03fd92a905072082af93dfd4f166e3d1bb258e3437069790220321ee22c6a2543392909e21cd347d009a6d32173c23700424b45b4592d4075e301 ] [ 522102729cae0c16009f44440f306b76fafb7a7d2503741a619c15b41ff927c1afd6b92103d29f0b96f332e50d6014cb91c334214ecb8caf2881a97e7d944bdf4e5fd6a39e2103f97e079ccae21e1ee65d5ee64e5c27d7d6ce9a867cec75e9736ad5f258329e0253ae ]\", \"sequence\" : 4294967295 } ], \"lock_time\" : \"0\", \"outputs\" : [ { \"address\" : \"MHaKHUFwAdcszvQarCmn1Rkq2uRoPQjZwm\", \"attachment\" : { \"type\" : \"etp\" }, \"index\" : 0, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ 6a20e940e8d7be0a49c598e91fa79c8b36e53535 ] equalverify checksig\", \"value\" : 3344 }, { \"address\" : \"39hh1NY9xyTKzawD8zFKXgXa7XBwqck6BR\", \"attachment\" : { \"type\" : \"etp\" }, \"index\" : 1, \"locked_height_range\" : 0, \"script\" : \"hash160 [ 57e1a19e5ee4c0065f8fd76b0351fa145e44435a ] equal\", \"value\" : 130000 } ], \"version\" : \"2\" } } The format of field transaction:inputs:script in output is [zero signature-1 signature-2 ... signature-m endorsement]. Cindy\u2018s signature is already included in field transaction:inputs:script. Other participators signature Other participators signature the multi-signature transaction successively by command signmultisigtx . They signature and send the output to the next participator. Alice gets the raw transaction from Cindy and signatures. Command\uff1a \\$ ./mvs-cli signmultisigtx Alice A123456 \"02000000016453713104d144387553bcb0fa457f40d2dc5fb916bd9e2256835a4b6de48d4c00000000b500483045022100cbfdda943648344dc03fd92a905072082af93dfd4f166e3d1bb258e3437069790220321ee22c6a2543392909e21cd347d009a6d32173c23700424b45b4592d4075e3014c69522102729cae0c16009f44440f306b76fafb7a7d2503741a619c15b41ff927c1afd6b92103d29f0b96f332e50d6014cb91c334214ecb8caf2881a97e7d944bdf4e5fd6a39e2103f97e079ccae21e1ee65d5ee64e5c27d7d6ce9a867cec75e9736ad5f258329e0253aeffffffff02100d0000000000001976a9146a20e940e8d7be0a49c598e91fa79c8b36e5353588ac0100000000000000d0fb01000000000017a91457e1a19e5ee4c0065f8fd76b0351fa145e44435a87010000000000000000000000\" Output\uff1a 02000000016453713104d144387553bcb0fa457f40d2dc5fb916bd9e2256835a4b6de48d4c00000000fdfd0000483045022100cbfdda943648344dc03fd92a905072082af93dfd4f166e3d1bb258e3437069790220321ee22c6a2543392909e21cd347d009a6d32173c23700424b45b4592d4075e3014730440220018b6a113d89de18b6c3c7090758cf9e4ca24e7762a2796b872bf6d2d1015b96022046b4518aa9451e617dff9467db7fe0c0d45811d0884faed51e343fec2c4579ff014c69522102729cae0c16009f44440f306b76fafb7a7d2503741a619c15b41ff927c1afd6b92103d29f0b96f332e50d6014cb91c334214ecb8caf2881a97e7d944bdf4e5fd6a39e2103f97e079ccae21e1ee65d5ee64e5c27d7d6ce9a867cec75e9736ad5f258329e0253aeffffffff02100d0000000000001976a9146a20e940e8d7be0a49c598e91fa79c8b36e5353588ac0100000000000000d0fb01000000000017a91457e1a19e5ee4c0065f8fd76b0351fa145e44435a87010000000000000000000000 Display the detail of the transaction by command decoderawtx . Command\uff1a $ ./mvs-cli decoderawtx \"02000000016453713104d144387553bcb0fa457f40d2dc5fb916bd9e2256835a4b6de48d4c00000000fdfd0000483045022100cbfdda943648344dc03fd92a905072082af93dfd4f166e3d1bb258e3437069790220321ee22c6a2543392909e21cd347d009a6d32173c23700424b45b4592d4075e3014730440220018b6a113d89de18b6c3c7090758cf9e4ca24e7762a2796b872bf6d2d1015b96022046b4518aa9451e617dff9467db7fe0c0d45811d0884faed51e343fec2c4579ff014c69522102729cae0c16009f44440f306b76fafb7a7d2503741a619c15b41ff927c1afd6b92103d29f0b96f332e50d6014cb91c334214ecb8caf2881a97e7d944bdf4e5fd6a39e2103f97e079ccae21e1ee65d5ee64e5c27d7d6ce9a867cec75e9736ad5f258329e0253aeffffffff02100d0000000000001976a9146a20e940e8d7be0a49c598e91fa79c8b36e5353588ac0100000000000000d0fb01000000000017a91457e1a19e5ee4c0065f8fd76b0351fa145e44435a87010000000000000000000000\" Output\uff1a { \"transaction\" : { \"hash\" : \"d791b2e0ca6eeb9b5521766b051d54f3659c775dceb39c478ebd0a549bb6d2b4\", \"inputs\" : [ { \"address\" : \"39hh1NY9xyTKzawD8zFKXgXa7XBwqck6BR\", \"previous_output\" : { \"hash\" : \"4c8de46d4b5a8356229ebd16b95fdcd2407f45fab0bc53753844d10431715364\", \"index\" : 0 }, \"script\" : \"zero [ 3045022100cbfdda943648344dc03fd92a905072082af93dfd4f166e3d1bb258e3437069790220321ee22c6a2543392909e21cd347d009a6d32173c23700424b45b4592d4075e301 ] [ 30440220018b6a113d89de18b6c3c7090758cf9e4ca24e7762a2796b872bf6d2d1015b96022046b4518aa9451e617dff9467db7fe0c0d45811d0884faed51e343fec2c4579ff01 ] [ 522102729cae0c16009f44440f306b76fafb7a7d2503741a619c15b41ff927c1afd6b92103d29f0b96f332e50d6014cb91c334214ecb8caf2881a97e7d944bdf4e5fd6a39e2103f97e079ccae21e1ee65d5ee64e5c27d7d6ce9a867cec75e9736ad5f258329e0253ae ]\", \"sequence\" : 4294967295 } ], \"lock_time\" : \"0\", \"outputs\" : [ { \"address\" : \"MHaKHUFwAdcszvQarCmn1Rkq2uRoPQjZwm\", \"attachment\" : { \"type\" : \"etp\" }, \"index\" : 0, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ 6a20e940e8d7be0a49c598e91fa79c8b36e53535 ] equalverify checksig\", \"value\" : 3344 }, { \"address\" : \"39hh1NY9xyTKzawD8zFKXgXa7XBwqck6BR\", \"attachment\" : { \"type\" : \"etp\" }, \"index\" : 1, \"locked_height_range\" : 0, \"script\" : \"hash160 [ 57e1a19e5ee4c0065f8fd76b0351fa145e44435a ] equal\", \"value\" : 130000 } ], \"version\" : \"2\" } } Now, Alice\u2018s signature is already included in field transaction:inputs:script too. Broadcast the multi-signature transaction After Alice and Cindy signatured, Alice broadcasts the multi-signature transaction to Metaverse network. $ ./mvs-cli sendrawtx \"02000000016453713104d144387553bcb0fa457f40d2dc5fb916bd9e2256835a4b6de48d4c00000000fdfd0000483045022100cbfdda943648344dc03fd92a905072082af93dfd4f166e3d1bb258e3437069790220321ee22c6a2543392909e21cd347d009a6d32173c23700424b45b4592d4075e3014730440220018b6a113d89de18b6c3c7090758cf9e4ca24e7762a2796b872bf6d2d1015b96022046b4518aa9451e617dff9467db7fe0c0d45811d0884faed51e343fec2c4579ff014c69522102729cae0c16009f44440f306b76fafb7a7d2503741a619c15b41ff927c1afd6b92103d29f0b96f332e50d6014cb91c334214ecb8caf2881a97e7d944bdf4e5fd6a39e2103f97e079ccae21e1ee65d5ee64e5c27d7d6ce9a867cec75e9736ad5f258329e0253aeffffffff02100d0000000000001976a9146a20e940e8d7be0a49c598e91fa79c8b36e5353588ac0100000000000000d0fb01000000000017a91457e1a19e5ee4c0065f8fd76b0351fa145e44435a87010000000000000000000000\"","title":"MST Multi Sig"},{"location":"mstmultisig/#mst-multi-signature","text":"","title":"MST Multi-signature"},{"location":"mstmultisig/#introduction","text":"A multi-signature address is an address that is associated with more than one ECDSA private key. The simplest type is an m-of-n address - it is associated with n private keys, and sending possession from this address requires signatures from at least m keys. A multi-signature transaction is one that sends possession from a multi-signature address. For example\uff1a 1-of-2: Husband and wife petty cash joint account \u2014 the signature of either spouse is sufficient to spend the funds. 2-of-2: Husband and wife savings account \u2014 both signatures are required to spend the funds, preventing one spouse from spending the money without the approval of the other.","title":"Introduction"},{"location":"mstmultisig/#use-multi-signature","text":"Every participator gets the public-key of an address by command getpublickey and let others known the public-key. The corresponding private-key will be used to signature multi-signature transaction later. Every participator creates a multi-signature address by command getnewmultisig with the public-key got in step 1 and same constraints(that means same m, n and public-keys). A multi-signature address is called P2SH\uff08Pay-to-Script-Hash\uff09, it starts with number 3. The multi-signature addresses created by participators should be the same. One participator creates a multi-signature transaction by command createmultisigtx with the multi-signature addresses created in step 2. The content of the multi-signature transaction can be decoded by command decoderawtx. m participators signature the multi-signature transaction successively by command signmultisigtx. They signature and send the output to the next participator. After m participators signatured, broadcast the multi-signature transaction to Metaverse network by command sendrawtx.","title":"Use Multi-signature"},{"location":"mstmultisig/#commands-related-to-multi-signature","text":"The following commands allow you to use multi-signature in Metaverse: getpublickey getnewmultisig listmultisig deletemultisig createmultisigtx signmultisigtx sendrawtx decoderawtx registerdid didchangeaddress transfercert transfermit The following example involves three accounts\uff1aAlice\uff0cBob and Cindy. For more detail of the commands, please refer to API_v3_multisig .","title":"Commands related to Multi-signature"},{"location":"mstmultisig/#get-and-inform-public-key","text":"Every participator gets the public-key of an address by command getpublickey and let others known the public-key. // Alice gets the public-key of an address of she. Command\uff1a \\$ ./mvs-cli getpublickey Alice A123456 \"MCJ6vpdCYsVD34XFC22fhqDLfHo7ZtnyM2\" Output\uff1a { \"address\" : \"MCJ6vpdCYsVD34XFC22fhqDLfHo7ZtnyM2\", \"public-key\" : \"03d29f0b96f332e50d6014cb91c334214ecb8caf2881a97e7d944bdf4e5fd6a39e\" } // Bob gets the public-key of an address of he. Command\uff1a \\$ ./mvs-cli getpublickey Bob B123456 MHaKHUFwAdcszvQarCmn1Rkq2uRoPQjZwm Output\uff1a { \"address\" : \"MHaKHUFwAdcszvQarCmn1Rkq2uRoPQjZwm\", \"public-key\" : \"03f97e079ccae21e1ee65d5ee64e5c27d7d6ce9a867cec75e9736ad5f258329e02\" } // Cindy gets the public-key of an address of she. Command\uff1a \\$ ./mvs-cli getpublickey Cindy C123456 MKXa7mtzNaGCEF9vM2sUmmTS93iDpHYd4m Output\uff1a { \"address\" : \"MKXa7mtzNaGCEF9vM2sUmmTS93iDpHYd4m\", \"public-key\" : \"02729cae0c16009f44440f306b76fafb7a7d2503741a619c15b41ff927c1afd6b9\" }","title":"Get and inform public-key"},{"location":"mstmultisig/#create-a-multi-signature-address","text":"Every participator creates the same multi-signature address with the command getnewmultisig with the public-key obtained in step 1 and the same constraints(that means same m, n and public-keys). For example, every participator creates a same multi-signature address with the command getnewmultisig with option option m setted to 2, option n setted to 3, option -s for self public-key and options -k for other\u2019s public-keys. Finally the get the same multi-signature address 39hh1NY9xyTKzawD8zFKXgXa7XBwqck6BR. // Alice creates a multi-signature address Command\uff1a $ ./mvs-cli getnewmultisig Alice A123456 -m 2 -n 3 -s \"03d29f0b96f332e50d6014cb91c334214ecb8caf2881a97e7d944bdf4e5fd6a39e\" -k \"03f97e079ccae21e1ee65d5ee64e5c27d7d6ce9a867cec75e9736ad5f258329e02\" -k \"02729cae0c16009f44440f306b76fafb7a7d2503741a619c15b41ff927c1afd6b9\" -d \"multisig test\" Output\uff1a { \"address\" : \"39hh1NY9xyTKzawD8zFKXgXa7XBwqck6BR\", \"description\" : \"multisig test\", \"index\" : 1, \"m\" : 2, \"multisig-script\" : \"2 [ 02729cae0c16009f44440f306b76fafb7a7d2503741a619c15b41ff927c1afd6b9 ] [ 03d29f0b96f332e50d6014cb91c334214ecb8caf2881a97e7d944bdf4e5fd6a39e ] [ 03f97e079ccae21e1ee65d5ee64e5c27d7d6ce9a867cec75e9736ad5f258329e02 ] 3 checkmultisig\", \"n\" : 3, \"public-keys\" : [ \"02729cae0c16009f44440f306b76fafb7a7d2503741a619c15b41ff927c1afd6b9\", \"03d29f0b96f332e50d6014cb91c334214ecb8caf2881a97e7d944bdf4e5fd6a39e\", \"03f97e079ccae21e1ee65d5ee64e5c27d7d6ce9a867cec75e9736ad5f258329e02\" ], \"self-publickey\" : \"03d29f0b96f332e50d6014cb91c334214ecb8caf2881a97e7d944bdf4e5fd6a39e\" } // Bob creates a multi-signature address Command\uff1a $ ./mvs-cli getnewmultisig Bob B123456 -m 2 -n 3 -s \"03f97e079ccae21e1ee65d5ee64e5c27d7d6ce9a867cec75e9736ad5f258329e02\" -k \"03d29f0b96f332e50d6014cb91c334214ecb8caf2881a97e7d944bdf4e5fd6a39e\" -k \"02729cae0c16009f44440f306b76fafb7a7d2503741a619c15b41ff927c1afd6b9\" -d \"multisig test\" Output\uff1a { \"address\" : \"39hh1NY9xyTKzawD8zFKXgXa7XBwqck6BR\", \"description\" : \"multisig test\", \"index\" : 1, \"m\" : 2, \"multisig-script\" : \"2 [ 02729cae0c16009f44440f306b76fafb7a7d2503741a619c15b41ff927c1afd6b9 ] [ 03d29f0b96f332e50d6014cb91c334214ecb8caf2881a97e7d944bdf4e5fd6a39e ] [ 03f97e079ccae21e1ee65d5ee64e5c27d7d6ce9a867cec75e9736ad5f258329e02 ] 3 checkmultisig\", \"n\" : 3, \"public-keys\" : [ \"02729cae0c16009f44440f306b76fafb7a7d2503741a619c15b41ff927c1afd6b9\", \"03d29f0b96f332e50d6014cb91c334214ecb8caf2881a97e7d944bdf4e5fd6a39e\", \"03f97e079ccae21e1ee65d5ee64e5c27d7d6ce9a867cec75e9736ad5f258329e02\" ], \"self-publickey\" : \"03f97e079ccae21e1ee65d5ee64e5c27d7d6ce9a867cec75e9736ad5f258329e02\" } // Cindy creates a multi-signature address Command\uff1a $ ./mvs-cli getnewmultisig Cindy C123456 -m 2 -n 3 -s \"02729cae0c16009f44440f306b76fafb7a7d2503741a619c15b41ff927c1afd6b9\" -k \"03f97e079ccae21e1ee65d5ee64e5c27d7d6ce9a867cec75e9736ad5f258329e02\" -k \"03d29f0b96f332e50d6014cb91c334214ecb8caf2881a97e7d944bdf4e5fd6a39e\" -d \"multisig test\" Output\uff1a { \"address\" : \"39hh1NY9xyTKzawD8zFKXgXa7XBwqck6BR\", \"description\" : \"\", \"index\" : 1, \"m\" : 2, \"multisig-script\" : \"2 [ 02729cae0c16009f44440f306b76fafb7a7d2503741a619c15b41ff927c1afd6b9 ] [ 03d29f0b96f332e50d6014cb91c334214ecb8caf2881a97e7d944bdf4e5fd6a39e ] [ 03f97e079ccae21e1ee65d5ee64e5c27d7d6ce9a867cec75e9736ad5f258329e02 ] 3 checkmultisig\", \"n\" : 3, \"public-keys\" : [ \"02729cae0c16009f44440f306b76fafb7a7d2503741a619c15b41ff927c1afd6b9\", \"03d29f0b96f332e50d6014cb91c334214ecb8caf2881a97e7d944bdf4e5fd6a39e\", \"03f97e079ccae21e1ee65d5ee64e5c27d7d6ce9a867cec75e9736ad5f258329e02\" ], \"self-publickey\" : \"02729cae0c16009f44440f306b76fafb7a7d2503741a619c15b41ff927c1afd6b9\" }","title":"Create a multi-signature address"},{"location":"mstmultisig/#send-etp-to-the-multi-signature-address","text":"Participators send ETP to the multi-signature address by command send or sendfrom accord to their contract.","title":"Send ETP to the multi-signature address"},{"location":"mstmultisig/#create-a-multi-signature-transaction","text":"One participator creates a multi-signature transaction to spend ETP on the multi-signature address by command createmultisigtx . The detail of the transaction can be displayed by command decoderawtx . For example, Cindy creates a multi-signature transaction to send ETP from the multi-signature address to address MHaKHUFwAdcszvQarCmn1Rkq2uRoPQjZwm . Command\uff1a $ ./mvs-cli decoderawtx \"02000000016453713104d144387553bcb0fa457f40d2dc5fb916bd9e2256835a4b6de48d4c00000000b500483045022100cbfdda943648344dc03fd92a905072082af93dfd4f166e3d1bb258e3437069790220321ee22c6a2543392909e21cd347d009a6d32173c23700424b45b4592d4075e3014c69522102729cae0c16009f44440f306b76fafb7a7d2503741a619c15b41ff927c1afd6b92103d29f0b96f332e50d6014cb91c334214ecb8caf2881a97e7d944bdf4e5fd6a39e2103f97e079ccae21e1ee65d5ee64e5c27d7d6ce9a867cec75e9736ad5f258329e0253aeffffffff02100d0000000000001976a9146a20e940e8d7be0a49c598e91fa79c8b36e5353588ac0100000000000000d0fb01000000000017a91457e1a19e5ee4c0065f8fd76b0351fa145e44435a87010000000000000000000000\" Output\uff1a { \"transaction\" : { \"hash\" : \"69c044be3c137f0bb34908be257acbb8157877bc57976a25881ed942384a9a61\", \"inputs\" : [ { \"address\" : \"39hh1NY9xyTKzawD8zFKXgXa7XBwqck6BR\", \"previous_output\" : { \"hash\" : \"4c8de46d4b5a8356229ebd16b95fdcd2407f45fab0bc53753844d10431715364\", \"index\" : 0 }, \"script\" : \"zero [ 3045022100cbfdda943648344dc03fd92a905072082af93dfd4f166e3d1bb258e3437069790220321ee22c6a2543392909e21cd347d009a6d32173c23700424b45b4592d4075e301 ] [ 522102729cae0c16009f44440f306b76fafb7a7d2503741a619c15b41ff927c1afd6b92103d29f0b96f332e50d6014cb91c334214ecb8caf2881a97e7d944bdf4e5fd6a39e2103f97e079ccae21e1ee65d5ee64e5c27d7d6ce9a867cec75e9736ad5f258329e0253ae ]\", \"sequence\" : 4294967295 } ], \"lock_time\" : \"0\", \"outputs\" : [ { \"address\" : \"MHaKHUFwAdcszvQarCmn1Rkq2uRoPQjZwm\", \"attachment\" : { \"type\" : \"etp\" }, \"index\" : 0, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ 6a20e940e8d7be0a49c598e91fa79c8b36e53535 ] equalverify checksig\", \"value\" : 3344 }, { \"address\" : \"39hh1NY9xyTKzawD8zFKXgXa7XBwqck6BR\", \"attachment\" : { \"type\" : \"etp\" }, \"index\" : 1, \"locked_height_range\" : 0, \"script\" : \"hash160 [ 57e1a19e5ee4c0065f8fd76b0351fa145e44435a ] equal\", \"value\" : 130000 } ], \"version\" : \"2\" } } The format of field transaction:inputs:script in output is [zero signature-1 signature-2 ... signature-m endorsement]. Cindy\u2018s signature is already included in field transaction:inputs:script.","title":"Create a multi-signature transaction"},{"location":"mstmultisig/#other-participators-signature","text":"Other participators signature the multi-signature transaction successively by command signmultisigtx . They signature and send the output to the next participator. Alice gets the raw transaction from Cindy and signatures. Command\uff1a \\$ ./mvs-cli signmultisigtx Alice A123456 \"02000000016453713104d144387553bcb0fa457f40d2dc5fb916bd9e2256835a4b6de48d4c00000000b500483045022100cbfdda943648344dc03fd92a905072082af93dfd4f166e3d1bb258e3437069790220321ee22c6a2543392909e21cd347d009a6d32173c23700424b45b4592d4075e3014c69522102729cae0c16009f44440f306b76fafb7a7d2503741a619c15b41ff927c1afd6b92103d29f0b96f332e50d6014cb91c334214ecb8caf2881a97e7d944bdf4e5fd6a39e2103f97e079ccae21e1ee65d5ee64e5c27d7d6ce9a867cec75e9736ad5f258329e0253aeffffffff02100d0000000000001976a9146a20e940e8d7be0a49c598e91fa79c8b36e5353588ac0100000000000000d0fb01000000000017a91457e1a19e5ee4c0065f8fd76b0351fa145e44435a87010000000000000000000000\" Output\uff1a 02000000016453713104d144387553bcb0fa457f40d2dc5fb916bd9e2256835a4b6de48d4c00000000fdfd0000483045022100cbfdda943648344dc03fd92a905072082af93dfd4f166e3d1bb258e3437069790220321ee22c6a2543392909e21cd347d009a6d32173c23700424b45b4592d4075e3014730440220018b6a113d89de18b6c3c7090758cf9e4ca24e7762a2796b872bf6d2d1015b96022046b4518aa9451e617dff9467db7fe0c0d45811d0884faed51e343fec2c4579ff014c69522102729cae0c16009f44440f306b76fafb7a7d2503741a619c15b41ff927c1afd6b92103d29f0b96f332e50d6014cb91c334214ecb8caf2881a97e7d944bdf4e5fd6a39e2103f97e079ccae21e1ee65d5ee64e5c27d7d6ce9a867cec75e9736ad5f258329e0253aeffffffff02100d0000000000001976a9146a20e940e8d7be0a49c598e91fa79c8b36e5353588ac0100000000000000d0fb01000000000017a91457e1a19e5ee4c0065f8fd76b0351fa145e44435a87010000000000000000000000 Display the detail of the transaction by command decoderawtx . Command\uff1a $ ./mvs-cli decoderawtx \"02000000016453713104d144387553bcb0fa457f40d2dc5fb916bd9e2256835a4b6de48d4c00000000fdfd0000483045022100cbfdda943648344dc03fd92a905072082af93dfd4f166e3d1bb258e3437069790220321ee22c6a2543392909e21cd347d009a6d32173c23700424b45b4592d4075e3014730440220018b6a113d89de18b6c3c7090758cf9e4ca24e7762a2796b872bf6d2d1015b96022046b4518aa9451e617dff9467db7fe0c0d45811d0884faed51e343fec2c4579ff014c69522102729cae0c16009f44440f306b76fafb7a7d2503741a619c15b41ff927c1afd6b92103d29f0b96f332e50d6014cb91c334214ecb8caf2881a97e7d944bdf4e5fd6a39e2103f97e079ccae21e1ee65d5ee64e5c27d7d6ce9a867cec75e9736ad5f258329e0253aeffffffff02100d0000000000001976a9146a20e940e8d7be0a49c598e91fa79c8b36e5353588ac0100000000000000d0fb01000000000017a91457e1a19e5ee4c0065f8fd76b0351fa145e44435a87010000000000000000000000\" Output\uff1a { \"transaction\" : { \"hash\" : \"d791b2e0ca6eeb9b5521766b051d54f3659c775dceb39c478ebd0a549bb6d2b4\", \"inputs\" : [ { \"address\" : \"39hh1NY9xyTKzawD8zFKXgXa7XBwqck6BR\", \"previous_output\" : { \"hash\" : \"4c8de46d4b5a8356229ebd16b95fdcd2407f45fab0bc53753844d10431715364\", \"index\" : 0 }, \"script\" : \"zero [ 3045022100cbfdda943648344dc03fd92a905072082af93dfd4f166e3d1bb258e3437069790220321ee22c6a2543392909e21cd347d009a6d32173c23700424b45b4592d4075e301 ] [ 30440220018b6a113d89de18b6c3c7090758cf9e4ca24e7762a2796b872bf6d2d1015b96022046b4518aa9451e617dff9467db7fe0c0d45811d0884faed51e343fec2c4579ff01 ] [ 522102729cae0c16009f44440f306b76fafb7a7d2503741a619c15b41ff927c1afd6b92103d29f0b96f332e50d6014cb91c334214ecb8caf2881a97e7d944bdf4e5fd6a39e2103f97e079ccae21e1ee65d5ee64e5c27d7d6ce9a867cec75e9736ad5f258329e0253ae ]\", \"sequence\" : 4294967295 } ], \"lock_time\" : \"0\", \"outputs\" : [ { \"address\" : \"MHaKHUFwAdcszvQarCmn1Rkq2uRoPQjZwm\", \"attachment\" : { \"type\" : \"etp\" }, \"index\" : 0, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ 6a20e940e8d7be0a49c598e91fa79c8b36e53535 ] equalverify checksig\", \"value\" : 3344 }, { \"address\" : \"39hh1NY9xyTKzawD8zFKXgXa7XBwqck6BR\", \"attachment\" : { \"type\" : \"etp\" }, \"index\" : 1, \"locked_height_range\" : 0, \"script\" : \"hash160 [ 57e1a19e5ee4c0065f8fd76b0351fa145e44435a ] equal\", \"value\" : 130000 } ], \"version\" : \"2\" } } Now, Alice\u2018s signature is already included in field transaction:inputs:script too.","title":"Other participators signature"},{"location":"mstmultisig/#broadcast-the-multi-signature-transaction","text":"After Alice and Cindy signatured, Alice broadcasts the multi-signature transaction to Metaverse network. $ ./mvs-cli sendrawtx \"02000000016453713104d144387553bcb0fa457f40d2dc5fb916bd9e2256835a4b6de48d4c00000000fdfd0000483045022100cbfdda943648344dc03fd92a905072082af93dfd4f166e3d1bb258e3437069790220321ee22c6a2543392909e21cd347d009a6d32173c23700424b45b4592d4075e3014730440220018b6a113d89de18b6c3c7090758cf9e4ca24e7762a2796b872bf6d2d1015b96022046b4518aa9451e617dff9467db7fe0c0d45811d0884faed51e343fec2c4579ff014c69522102729cae0c16009f44440f306b76fafb7a7d2503741a619c15b41ff927c1afd6b92103d29f0b96f332e50d6014cb91c334214ecb8caf2881a97e7d944bdf4e5fd6a39e2103f97e079ccae21e1ee65d5ee64e5c27d7d6ce9a867cec75e9736ad5f258329e0253aeffffffff02100d0000000000001976a9146a20e940e8d7be0a49c598e91fa79c8b36e5353588ac0100000000000000d0fb01000000000017a91457e1a19e5ee4c0065f8fd76b0351fa145e44435a87010000000000000000000000\"","title":"Broadcast the multi-signature transaction"},{"location":"mstsecondaryissuance/","text":"MST Secondary Issuance Precondition This is mainly about the secondaryissue asset command line operation, and other commands can be referred to Command-line. First, you need an account and a did. You can use mvs-cli getnewaccount accountname password and mvs-cli issuedid accountname password address did to generate a new account and a new did. Please save the main private key (mnemonic-key) safely\u3002 For convenience, I\u2019ll uniformly use test1 as account name, passwd1 as password, testdid as did, and use testing addresses in the following examples. When you refer to the following examples, please change to your account name, password and did, and pay attention to the correct addresses. With an account, if you want to issue or send an asset, you have to make sure that there is enough ETP in the account to pay fees. You can use \"mvs-cli getbalance test1 passwd1\" to get the total balance of the account. You can also use \"mvs-cli listbalances test1 passwd1\" to list the balance of each address in the account. You can use help to get the help information of each command. For eaxmple, use \"mvs-cli help createasset\" or \"mvs-cli createasset -h\" to get the help information of createasset command. secondaryissue The account owned secondary issue certificate can secondary issue asset that can be secondary issued. Usage: mvs-cli secondaryissue [-h] [--fee value] ACCOUNTNAME ACCOUNTAUTH TODID SYMBOL VOLUME Info: secondaryissue, alias as additionalissue. Options (named): -h [--help] Get a description and instructions for this command. -f [--fee] The fee of tx. default_value 10 etp -m [--model] The asset attenuation model parameter, defaults to empty string. Arguments (positional): ACCOUNTNAME Account name. ACCOUNTAUTH Account password/authorization. TODID Target did to check and issue asset SYMBOL The symbol of issued asset VOLUME The volume of asset Notes issued asset maybe secondaryissue many times. For asset attenuation model, please refer to MST Conditional Offering . secondaryissue must satisfy the folllowing conditions: consider the transaction fees the fees is paid from mychange parameter if specified, or else from searched addresses. consider the threshold the target address must have specified name/symbol asset of quantity value greater than or equal to threshold percentage. consider the asset cert the target address must have issue asset cert of specified name/symbol asset.","title":"MST Seconary Issuance"},{"location":"mstsecondaryissuance/#mst-secondary-issuance","text":"","title":"MST Secondary Issuance"},{"location":"mstsecondaryissuance/#precondition","text":"This is mainly about the secondaryissue asset command line operation, and other commands can be referred to Command-line. First, you need an account and a did. You can use mvs-cli getnewaccount accountname password and mvs-cli issuedid accountname password address did to generate a new account and a new did. Please save the main private key (mnemonic-key) safely\u3002 For convenience, I\u2019ll uniformly use test1 as account name, passwd1 as password, testdid as did, and use testing addresses in the following examples. When you refer to the following examples, please change to your account name, password and did, and pay attention to the correct addresses. With an account, if you want to issue or send an asset, you have to make sure that there is enough ETP in the account to pay fees. You can use \"mvs-cli getbalance test1 passwd1\" to get the total balance of the account. You can also use \"mvs-cli listbalances test1 passwd1\" to list the balance of each address in the account. You can use help to get the help information of each command. For eaxmple, use \"mvs-cli help createasset\" or \"mvs-cli createasset -h\" to get the help information of createasset command.","title":"Precondition"},{"location":"mstsecondaryissuance/#secondaryissue","text":"The account owned secondary issue certificate can secondary issue asset that can be secondary issued. Usage: mvs-cli secondaryissue [-h] [--fee value] ACCOUNTNAME ACCOUNTAUTH TODID SYMBOL VOLUME Info: secondaryissue, alias as additionalissue. Options (named): -h [--help] Get a description and instructions for this command. -f [--fee] The fee of tx. default_value 10 etp -m [--model] The asset attenuation model parameter, defaults to empty string. Arguments (positional): ACCOUNTNAME Account name. ACCOUNTAUTH Account password/authorization. TODID Target did to check and issue asset SYMBOL The symbol of issued asset VOLUME The volume of asset Notes issued asset maybe secondaryissue many times. For asset attenuation model, please refer to MST Conditional Offering . secondaryissue must satisfy the folllowing conditions: consider the transaction fees the fees is paid from mychange parameter if specified, or else from searched addresses. consider the threshold the target address must have specified name/symbol asset of quantity value greater than or equal to threshold percentage. consider the asset cert the target address must have issue asset cert of specified name/symbol asset.","title":"secondaryissue"},{"location":"multisig-cli/","text":"createmultisigtx Usage: mvs-cli createmultisigtx [-h][--fee value] ACCOUNTNAME ACCOUNTAUTH FROMADDRESS TOADDRESS AMOUNT Info: createmultisigtx Options (named): -h [--help] Get a description and instructions for this command. -f [--fee] Transaction fee. defaults to 10000 ETP bits Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. FROMADDRESS Send from this address TOADDRESS Send to this address AMOUNT ETP integer bits. getpublickey Usage: mvs-cli getpublickey [-h] ACCOUNTNAME ACCOUNTAUTH ADDRESS Info: getpublickey Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. ADDRESS Address. deletemultisig Usage: mvs-cli deletemultisig [-h] ACCOUNTNAME ACCOUNTAUTH ADDRESS Info: deletemultisig Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. ADDRESS The multisig script corresponding address. getnewmultisig Usage: mvs-cli getnewmultisig [-h] --signaturenum value --publickeynum value --selfpublickey value [--description value][--publickey value] ACCOUNTNAME ACCOUNTAUTH Info: getnewmultisig Options (named): -h [--help] Get a description and instructions for this command. -d [--description] multisig record description. -k [--publickey] cosigner public key used for multisig -m [--signaturenum] Account multisig signature number. -n [--publickeynum] Account multisig public key number. -s [--selfpublickey] the public key belongs to this account. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. listmultisig Usage: mvs-cli listmultisig [-h] ACCOUNTNAME ACCOUNTAUTH Info: listmultisig Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. signmultisigtx Usage: mvs-cli signmultisigtx [-hb] ACCOUNTNAME ACCOUNTAUTH TRANSACTION Info: signmultisigtx Options (named): -h [--help] Get a description and instructions for this command. -b [--broadcast] Broadcast the tx if it is fullly signed. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. TRANSACTION The input Base16 transaction to sign.","title":"Multi-Signature"},{"location":"multisig-cli/#createmultisigtx","text":"Usage: mvs-cli createmultisigtx [-h][--fee value] ACCOUNTNAME ACCOUNTAUTH FROMADDRESS TOADDRESS AMOUNT Info: createmultisigtx Options (named): -h [--help] Get a description and instructions for this command. -f [--fee] Transaction fee. defaults to 10000 ETP bits Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. FROMADDRESS Send from this address TOADDRESS Send to this address AMOUNT ETP integer bits.","title":"createmultisigtx"},{"location":"multisig-cli/#getpublickey","text":"Usage: mvs-cli getpublickey [-h] ACCOUNTNAME ACCOUNTAUTH ADDRESS Info: getpublickey Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. ADDRESS Address.","title":"getpublickey"},{"location":"multisig-cli/#deletemultisig","text":"Usage: mvs-cli deletemultisig [-h] ACCOUNTNAME ACCOUNTAUTH ADDRESS Info: deletemultisig Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. ADDRESS The multisig script corresponding address.","title":"deletemultisig"},{"location":"multisig-cli/#getnewmultisig","text":"Usage: mvs-cli getnewmultisig [-h] --signaturenum value --publickeynum value --selfpublickey value [--description value][--publickey value] ACCOUNTNAME ACCOUNTAUTH Info: getnewmultisig Options (named): -h [--help] Get a description and instructions for this command. -d [--description] multisig record description. -k [--publickey] cosigner public key used for multisig -m [--signaturenum] Account multisig signature number. -n [--publickeynum] Account multisig public key number. -s [--selfpublickey] the public key belongs to this account. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required.","title":"getnewmultisig"},{"location":"multisig-cli/#listmultisig","text":"Usage: mvs-cli listmultisig [-h] ACCOUNTNAME ACCOUNTAUTH Info: listmultisig Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required.","title":"listmultisig"},{"location":"multisig-cli/#signmultisigtx","text":"Usage: mvs-cli signmultisigtx [-hb] ACCOUNTNAME ACCOUNTAUTH TRANSACTION Info: signmultisigtx Options (named): -h [--help] Get a description and instructions for this command. -b [--broadcast] Broadcast the tx if it is fullly signed. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. TRANSACTION The input Base16 transaction to sign.","title":"signmultisigtx"},{"location":"mvs-cli usage/","text":"Mvs-cli usage Use help to get all commands(methods) list. $ ./mvs-cli help $ ./mvs-cli help $command or ./mvs-cli $command -h","title":"Mvs-cli usage"},{"location":"mvs-cli usage/#mvs-cli-usage","text":"Use help to get all commands(methods) list. $ ./mvs-cli help $ ./mvs-cli help $command or ./mvs-cli $command -h","title":"Mvs-cli usage"},{"location":"mvs-cli-start/","text":"Run mvsd Usage: mvsd [-dhistv] [--datadir value] [--config value] [--ui value] Info: Runs a full metaverse node in the global peer-to-peer network. Options (named): -D [--datadir] Specify database path. -c [--config] Specify path to a configuration settings file based on path ~/.metaverse -d [--daemon] Run in daemon mode (unix/apple). -h [--help] Display command line options. -i [--initchain] Initialize blockchain in the configured directory. -s [--settings] Display all configuration settings. -t [--testnet] Use testnet rules for determination of work required, defaults to false. -u [--ui] Open wallet UI. -v [--version] Display version information. Configure mvs.conf You can find several commonly used configuration files at https://github.com/mvs-org/metaverse/tree/master/etc mvs.conf - The main net configuration file mvs-test.conf - The test net configuration files mvs-full-setting-template.conf - The configuration file for the complete parameter template mvs.conf sample content\uff1a The default work path for mvs.conf is as follows: Windows : %HOMEPATH%\\AppData\\Roaming\\Metaverse Apple OSX : ~/Library/Application\\ Support/Metaverse Linux/Uinx: ~/.metaverse [network] #mvs congif in mainnet #The port for incoming connections, defaults to 5251 (15251 for testnet). inbound_port = 5251 #The target number of incoming network connections, defaults to 8. inbound_connections = 256 #The target number of outgoing network connections, defaults to 8. outbound_connections = 32 #The cached peer hosts when startup hosts_file = hosts.cache #The debug log file path, defaults to 'debug.log'. debug_file = debug.log #The error log file path, defaults to 'error.log'. error_file = error.log #The advertised public address of this node, defaults to none. #self = your_own_public_ip_address:port #IP address to disallow as a peer, multiple entries allowed. #blacklist = 127.0.0.1 #Persistent host:port channels, multiple entries allowed. #peer = seed.getmvs.org:5251 [database] #The blockchain database directory, defaults to 'mainnet' of below default path. #Windows : %HOMEPATH%\\AppData\\Roaming\\Metaverse #Apple OSX : ~/Library/Application\\ Support/Metaverse #Linux/Uinx: ~/.metaverse #Eg: #directory = D:\\MVS\\ChainData\\Metaverse #directory = /var/local/Metaverse [server] #The maximum number of query worker threads per endpoint, defaults to 1. query_workers = 1 #local http RPC call listen port mongoose_listen = 127.0.0.1:8820 #Write service requests to the log, defaults to false. log_level = DEBUG Change the data folder location Let\u2019s take the Windows environment as an example. Create the configuration file mvs.conf in the following directory\uff1a %HOMEPATH%\\AppData\\Roaming\\Metaverse The mvs.conf file configuration is as follows: [database] directory = D:\\MVS\\ChainData\\Metaverse [p1] You can fill in your own path in the above path, or you can download the configuration file: http://newmetaverse.org/conf/mvs.conf For new users, it is recommended to install blockdata-inside version. Copy the \u201c% HOMEPATH% \\ AppData \\ Roaming \\ Metaverse\u201d directory to the target directory on disk D. (The folder name must be Metaverse.)","title":"Start Running MVS-CLI"},{"location":"mvs-cli-start/#run-mvsd","text":"Usage: mvsd [-dhistv] [--datadir value] [--config value] [--ui value] Info: Runs a full metaverse node in the global peer-to-peer network. Options (named): -D [--datadir] Specify database path. -c [--config] Specify path to a configuration settings file based on path ~/.metaverse -d [--daemon] Run in daemon mode (unix/apple). -h [--help] Display command line options. -i [--initchain] Initialize blockchain in the configured directory. -s [--settings] Display all configuration settings. -t [--testnet] Use testnet rules for determination of work required, defaults to false. -u [--ui] Open wallet UI. -v [--version] Display version information.","title":"Run mvsd"},{"location":"mvs-cli-start/#configure-mvsconf","text":"You can find several commonly used configuration files at https://github.com/mvs-org/metaverse/tree/master/etc mvs.conf - The main net configuration file mvs-test.conf - The test net configuration files mvs-full-setting-template.conf - The configuration file for the complete parameter template mvs.conf sample content\uff1a The default work path for mvs.conf is as follows: Windows : %HOMEPATH%\\AppData\\Roaming\\Metaverse Apple OSX : ~/Library/Application\\ Support/Metaverse Linux/Uinx: ~/.metaverse [network] #mvs congif in mainnet #The port for incoming connections, defaults to 5251 (15251 for testnet). inbound_port = 5251 #The target number of incoming network connections, defaults to 8. inbound_connections = 256 #The target number of outgoing network connections, defaults to 8. outbound_connections = 32 #The cached peer hosts when startup hosts_file = hosts.cache #The debug log file path, defaults to 'debug.log'. debug_file = debug.log #The error log file path, defaults to 'error.log'. error_file = error.log #The advertised public address of this node, defaults to none. #self = your_own_public_ip_address:port #IP address to disallow as a peer, multiple entries allowed. #blacklist = 127.0.0.1 #Persistent host:port channels, multiple entries allowed. #peer = seed.getmvs.org:5251 [database] #The blockchain database directory, defaults to 'mainnet' of below default path. #Windows : %HOMEPATH%\\AppData\\Roaming\\Metaverse #Apple OSX : ~/Library/Application\\ Support/Metaverse #Linux/Uinx: ~/.metaverse #Eg: #directory = D:\\MVS\\ChainData\\Metaverse #directory = /var/local/Metaverse [server] #The maximum number of query worker threads per endpoint, defaults to 1. query_workers = 1 #local http RPC call listen port mongoose_listen = 127.0.0.1:8820 #Write service requests to the log, defaults to false. log_level = DEBUG","title":"Configure mvs.conf"},{"location":"mvs-cli-start/#change-the-data-folder-location","text":"Let\u2019s take the Windows environment as an example. Create the configuration file mvs.conf in the following directory\uff1a %HOMEPATH%\\AppData\\Roaming\\Metaverse The mvs.conf file configuration is as follows: [database] directory = D:\\MVS\\ChainData\\Metaverse [p1] You can fill in your own path in the above path, or you can download the configuration file: http://newmetaverse.org/conf/mvs.conf For new users, it is recommended to install blockdata-inside version. Copy the \u201c% HOMEPATH% \\ AppData \\ Roaming \\ Metaverse\u201d directory to the target directory on disk D. (The folder name must be Metaverse.)","title":"Change the data folder location"},{"location":"mvsd-cli/","text":"mvsd usage Run mvsd Usage: mvsd [-dhistv][--datadir value] [--config value][--ui value] Info: Runs a full metaverse node in the global peer-to-peer network. Options (named): -D [--datadir] Specify mvsd workspace path. -c [--config] Specify path to a configuration settings file based on path ~/.metaverse -d [--daemon] Run in daemon mode (unix/apple). -h [--help] Display command line options. -i [--initchain] Initialize blockchain in the configured directory. -s [--settings] Display all configuration settings. -t [--testnet] Use testnet rules for determination of work required, defaults to false. -v [--version] Display version information. Configure mvs.conf You can find several commonly used configuration files at https://github.com/mvs-org/metaverse/tree/master/etc mvs.conf - The main net configuration file mvs-test.conf - The test net configuration files mvs-full-setting-template.conf - The configuration file for the complete parameter template mvs.conf sample content\uff1a # mvs configuration in common usage in MAINNET # mvs.conf default in path as below # Windows : %HOMEPATH%\\AppData\\Roaming\\Metaverse # Apple OSX : ~/Library/Application\\ Support/Metaverse # Linux/Uinx: ~/.metaverse [network] # The port for incoming connections, defaults to 5251 (15251 for testnet). inbound_port = 5251 # The target number of incoming network connections, defaults to 8. inbound_connections = 256 # The target number of outgoing network connections, defaults to 8. outbound_connections = 32 # The cached peer hosts when startup hosts_file = hosts.cache # The debug log file path, defaults to 'debug.log'. debug_file = debug.log # The error log file path, defaults to 'error.log'. error_file = error.log # The advertised public address of this node, defaults to none. #self = your_own_public_ip_address:port # IP address to disallow as a peer, multiple entries allowed. #blacklist = 127.0.0.1 # Persistent host:port channels, multiple entries allowed. #peer = seed.getmvs.org:5251 [database] # The blockchain database directory, defaults to 'mainnet' of below default path. # Windows : %HOMEPATH%\\AppData\\Roaming\\Metaverse # Apple OSX : ~/Library/Application\\ Support/Metaverse # Linux/Uinx: ~/.metaverse # Eg: # directory = D:\\MVS\\ChainData\\Metaverse # directory = /var/local/Metaverse [server] # The maximum number of query worker threads per endpoint, defaults to 1. query_workers = 1 # local http RPC call listen port mongoose_listen = 127.0.0.1:8820 # Write service requests to the log, defaults to false. log_level = DEBUG Change the data folder location Let\u2019s take the Windows environment as an example. Create the configuration file mvs.conf in the following directory\uff1a %HOMEPATH%\\AppData\\Roaming\\Metaverse The mvs.conf file configuration is as follows: [database] directory = D:\\MVS\\ChainData\\Metaverse You can fill in your own path in the above path, or you can download the configuration file: http://newmetaverse.org/conf/mvs.conf For new users, it is recommended to install blockdata-inside version. Copy the \u201c% HOMEPATH% \\ AppData \\ Roaming \\ Metaverse\u201d directory to the target directory on disk D. (The folder name must be Metaverse.)","title":"mvsd usage"},{"location":"mvsd-cli/#mvsd-usage","text":"","title":"mvsd usage"},{"location":"mvsd-cli/#run-mvsd","text":"Usage: mvsd [-dhistv][--datadir value] [--config value][--ui value] Info: Runs a full metaverse node in the global peer-to-peer network. Options (named): -D [--datadir] Specify mvsd workspace path. -c [--config] Specify path to a configuration settings file based on path ~/.metaverse -d [--daemon] Run in daemon mode (unix/apple). -h [--help] Display command line options. -i [--initchain] Initialize blockchain in the configured directory. -s [--settings] Display all configuration settings. -t [--testnet] Use testnet rules for determination of work required, defaults to false. -v [--version] Display version information.","title":"Run mvsd"},{"location":"mvsd-cli/#configure-mvsconf","text":"You can find several commonly used configuration files at https://github.com/mvs-org/metaverse/tree/master/etc mvs.conf - The main net configuration file mvs-test.conf - The test net configuration files mvs-full-setting-template.conf - The configuration file for the complete parameter template mvs.conf sample content\uff1a # mvs configuration in common usage in MAINNET # mvs.conf default in path as below # Windows : %HOMEPATH%\\AppData\\Roaming\\Metaverse # Apple OSX : ~/Library/Application\\ Support/Metaverse # Linux/Uinx: ~/.metaverse [network] # The port for incoming connections, defaults to 5251 (15251 for testnet). inbound_port = 5251 # The target number of incoming network connections, defaults to 8. inbound_connections = 256 # The target number of outgoing network connections, defaults to 8. outbound_connections = 32 # The cached peer hosts when startup hosts_file = hosts.cache # The debug log file path, defaults to 'debug.log'. debug_file = debug.log # The error log file path, defaults to 'error.log'. error_file = error.log # The advertised public address of this node, defaults to none. #self = your_own_public_ip_address:port # IP address to disallow as a peer, multiple entries allowed. #blacklist = 127.0.0.1 # Persistent host:port channels, multiple entries allowed. #peer = seed.getmvs.org:5251 [database] # The blockchain database directory, defaults to 'mainnet' of below default path. # Windows : %HOMEPATH%\\AppData\\Roaming\\Metaverse # Apple OSX : ~/Library/Application\\ Support/Metaverse # Linux/Uinx: ~/.metaverse # Eg: # directory = D:\\MVS\\ChainData\\Metaverse # directory = /var/local/Metaverse [server] # The maximum number of query worker threads per endpoint, defaults to 1. query_workers = 1 # local http RPC call listen port mongoose_listen = 127.0.0.1:8820 # Write service requests to the log, defaults to false. log_level = DEBUG","title":"Configure mvs.conf"},{"location":"mvsd-cli/#change-the-data-folder-location","text":"Let\u2019s take the Windows environment as an example. Create the configuration file mvs.conf in the following directory\uff1a %HOMEPATH%\\AppData\\Roaming\\Metaverse The mvs.conf file configuration is as follows: [database] directory = D:\\MVS\\ChainData\\Metaverse You can fill in your own path in the above path, or you can download the configuration file: http://newmetaverse.org/conf/mvs.conf For new users, it is recommended to install blockdata-inside version. Copy the \u201c% HOMEPATH% \\ AppData \\ Roaming \\ Metaverse\u201d directory to the target directory on disk D. (The folder name must be Metaverse.)","title":"Change the data folder location"},{"location":"mvswhitepaper/","text":"Abstract Metaverse is a blockchain project that provides a foundational infrastructure for social and enterprise needs. Our goal is to construct a universe where digital assets (Metaverse Smart Token, or MST) and digital identities (Avatar) build the basis for asset transactions with the help of a value intermediary (Oracle), thus establishing a new blockchain ecosystem that will transform human society and allow us to enter the New Reality. Unlike other blockchain projects that use technology as an entry point, Metaverse started from an enterprise value creation perspective, with the relationships between people, people and assets as the core foundations of our project. We describe this relationship through the use of BISC (Built-in Smart Contract), which can reduce the technical risks of commercial applications during development and usage. Through BISC, Metaverse provides functionalities in digital assets (MST), digital identities (Avatar), Oracles, and MST exchanges. Through the use of MST, users reap the advantages of blockchain technology, such as the power to generate and distribute their own cryptocurrency. The digital identity Avatar reflects the relationship between people, people and assets, and this Avatar can be linked to MST. Through the use of Avatars, anyone can become value intermediary Oracles, and Oracles can help construct an immutable decentralized system (Reputation). MST can resolve fundamental liquidity issues in asset trading, thus solving a critical problem in any financial system. MST and Avatar are utilized under blockchain technology that is fundamentally integrated with IT systems. This process can be described as BaaS (Blockchain as a Service). BaaS is a quick and convenient way to build blockchain applications. Digital Assets (MST) Digital assets on Metaverse can be characterized as the Metaverse Smart Token, or MST. MST reemphasizes the importance of digital assets, that for smart contracts to work, they need digital assets and not the other way around. Currently, Metaverse has made technical extensions to Bitcoin\u2019s UTXO model. Bitcoin\u2019s UTXO features will be added to MST, including security, traceability, and ACID features. MST gives everyone the ability to issue Bitcoin at the same price. MST can be used for peer-to-peer payments and also supports a variety of financial instruments such as asset additions and asset replacements. Digital Identities (Avatar) Unlike assets such as gold, we are unable to take physical possession of digital assets. Instead, the ownership of digital assets is controlled by individuals through digital identities and secured through mathematical proofs that ensure these identities cannot be forged. As a symbol of a user\u2019s online identity, an Avatar can be used to represent oneself and hold digital assets on the blockchain. Creating an Avatar is far more than giving your public key an alias, just as ID cards and mobile numbers are not an alias for your name. Various pieces of valuable information will be attached to each Avatar\u2019s unique index and encrypted to ensure data privacy. Unless the Avatar\u2019s owner grants authorization (by providing the private key signature, initiating a special transaction, or using smart contracts), users will not have access to encrypted or unencrypted information. Hence, zero-knowledge proofs and homomorphic encryption play a vital role in allowing Avatars to retrieve information such as credit scores and validation results without revealing the contents of a message. Although the Bitcoin system allows a user to hold Bitcoin anonymously using public and private keypairs, most activities in the real world require us to provide some form of personal information: for example, you must provide your age and gender to join a young female entrepreneur\u2019s club. We call the digital identity on the Metaverse Blockchain the Metaverse Avatar. Value Intermediaries (Oracles) As the Value Intermediary of the Metaverse ecosystem, Oracles are responsible for validating the authenticity and validity of data sources. Apart from individual identities, we have also introduced third parties such as trustees, regulators, and identity certification authorities to act as Oracles to endorse the authenticity of data. Additionally, Oracles also enrich the types of transactions available, increasing the value of blockchains. BaaS\uff08Blockchain-as-a-Service\uff09 The concept of BaaS (Blockchain as a Service) refers to allowing enterprises or individuals to customize blockchain services provided by blockchain solutions providers to cater to their actual needs. As China\u2019s leading open-source public blockchain, Metaverse will continue to improve its digital identity system and expand applicable infrastructure services in order to engage more third-party developers to build applications based on the Metaverse blockchain, increasing the ease of use of our asset and identity management services for ordinary users. Consensus Mechanisms Basic Information The blockchain consensus process refers to the process of objectively recording network transaction data in an immutable fashion. Consensus is mainly realized through consensus algorithms. For now, Metaverse will implement two consensus mechanisms. The details are as follows: First phase: PoW Considering ASIC\u2019s centralized mining pool, we chose the ETHASH algorithm as the mining algorithm for Metaverse. The PoW mechanism will be maintained for some time. Metaverse uses Ethereum\u2019s mining algorithm Ethash (aka Dashimoto/Dagger-Hashimoto). A feature of ETHASH is that mining efficiency is not linked to CPU performance, but rather is positively correlated with memory size and bandwidth. The ETHASH algorithm demands large memory sizes and bandwidths to prevent mining setups using shared memory systems from achieving linear or superlinear gains in mining efficiency. Second phase: HBTH-DPoS Although PoW mining can help safeguard Metaverse\u2019s system security in the initial years, it has flaws such as energy waste and the tendency for mining centralization. The DPoS algorithm implemented from Graphene can contribute to a high performing blockchain system. Elliptic Curve Digital Signature Algorithm (ECDSA) ECDSA is a cryptographic algorithm used to ensure that all the information of the exchange are recorded in each block and each block will generate its corresponding digital signature to verify the information validity. The security of ETP will be guaranteed by the ECDSA. Unspent Transaction Output (UTXO) Unlike Ethereum, Metaverse\u2019s native digital token ETP will use Bitcoin\u2019s UTXO (Unspent Transaction Output) model in which all transactions are defined by a set of inputs and outputs, and contain the private key signatures of all current and previous owners of the ETP. These elements come together to form a new UTXO. Separately, we will be testing the use of the account model to handle smart assets. This can help reduce system complexity while retaining the benefits of the UTXO model. The result of this design is that digital assets can be sent and received easily on Metaverse, just like Bitcoin. Smart contracts will only be required when the demand for more complex transactions arise.","title":"Brief Metaverse White Paper"},{"location":"mvswhitepaper/#abstract","text":"Metaverse is a blockchain project that provides a foundational infrastructure for social and enterprise needs. Our goal is to construct a universe where digital assets (Metaverse Smart Token, or MST) and digital identities (Avatar) build the basis for asset transactions with the help of a value intermediary (Oracle), thus establishing a new blockchain ecosystem that will transform human society and allow us to enter the New Reality. Unlike other blockchain projects that use technology as an entry point, Metaverse started from an enterprise value creation perspective, with the relationships between people, people and assets as the core foundations of our project. We describe this relationship through the use of BISC (Built-in Smart Contract), which can reduce the technical risks of commercial applications during development and usage. Through BISC, Metaverse provides functionalities in digital assets (MST), digital identities (Avatar), Oracles, and MST exchanges. Through the use of MST, users reap the advantages of blockchain technology, such as the power to generate and distribute their own cryptocurrency. The digital identity Avatar reflects the relationship between people, people and assets, and this Avatar can be linked to MST. Through the use of Avatars, anyone can become value intermediary Oracles, and Oracles can help construct an immutable decentralized system (Reputation). MST can resolve fundamental liquidity issues in asset trading, thus solving a critical problem in any financial system. MST and Avatar are utilized under blockchain technology that is fundamentally integrated with IT systems. This process can be described as BaaS (Blockchain as a Service). BaaS is a quick and convenient way to build blockchain applications.","title":"Abstract"},{"location":"mvswhitepaper/#digital-assets-mst","text":"Digital assets on Metaverse can be characterized as the Metaverse Smart Token, or MST. MST reemphasizes the importance of digital assets, that for smart contracts to work, they need digital assets and not the other way around. Currently, Metaverse has made technical extensions to Bitcoin\u2019s UTXO model. Bitcoin\u2019s UTXO features will be added to MST, including security, traceability, and ACID features. MST gives everyone the ability to issue Bitcoin at the same price. MST can be used for peer-to-peer payments and also supports a variety of financial instruments such as asset additions and asset replacements.","title":"Digital Assets (MST)"},{"location":"mvswhitepaper/#digital-identities-avatar","text":"Unlike assets such as gold, we are unable to take physical possession of digital assets. Instead, the ownership of digital assets is controlled by individuals through digital identities and secured through mathematical proofs that ensure these identities cannot be forged. As a symbol of a user\u2019s online identity, an Avatar can be used to represent oneself and hold digital assets on the blockchain. Creating an Avatar is far more than giving your public key an alias, just as ID cards and mobile numbers are not an alias for your name. Various pieces of valuable information will be attached to each Avatar\u2019s unique index and encrypted to ensure data privacy. Unless the Avatar\u2019s owner grants authorization (by providing the private key signature, initiating a special transaction, or using smart contracts), users will not have access to encrypted or unencrypted information. Hence, zero-knowledge proofs and homomorphic encryption play a vital role in allowing Avatars to retrieve information such as credit scores and validation results without revealing the contents of a message. Although the Bitcoin system allows a user to hold Bitcoin anonymously using public and private keypairs, most activities in the real world require us to provide some form of personal information: for example, you must provide your age and gender to join a young female entrepreneur\u2019s club. We call the digital identity on the Metaverse Blockchain the Metaverse Avatar.","title":"Digital Identities (Avatar)"},{"location":"mvswhitepaper/#value-intermediaries-oracles","text":"As the Value Intermediary of the Metaverse ecosystem, Oracles are responsible for validating the authenticity and validity of data sources. Apart from individual identities, we have also introduced third parties such as trustees, regulators, and identity certification authorities to act as Oracles to endorse the authenticity of data. Additionally, Oracles also enrich the types of transactions available, increasing the value of blockchains.","title":"Value Intermediaries (Oracles)"},{"location":"mvswhitepaper/#baasblockchain-as-a-service","text":"The concept of BaaS (Blockchain as a Service) refers to allowing enterprises or individuals to customize blockchain services provided by blockchain solutions providers to cater to their actual needs. As China\u2019s leading open-source public blockchain, Metaverse will continue to improve its digital identity system and expand applicable infrastructure services in order to engage more third-party developers to build applications based on the Metaverse blockchain, increasing the ease of use of our asset and identity management services for ordinary users.","title":"BaaS\uff08Blockchain-as-a-Service\uff09"},{"location":"mvswhitepaper/#consensus-mechanisms","text":"","title":"Consensus Mechanisms"},{"location":"mvswhitepaper/#basic-information","text":"The blockchain consensus process refers to the process of objectively recording network transaction data in an immutable fashion. Consensus is mainly realized through consensus algorithms. For now, Metaverse will implement two consensus mechanisms. The details are as follows:","title":"Basic Information"},{"location":"mvswhitepaper/#first-phase-pow","text":"Considering ASIC\u2019s centralized mining pool, we chose the ETHASH algorithm as the mining algorithm for Metaverse. The PoW mechanism will be maintained for some time. Metaverse uses Ethereum\u2019s mining algorithm Ethash (aka Dashimoto/Dagger-Hashimoto). A feature of ETHASH is that mining efficiency is not linked to CPU performance, but rather is positively correlated with memory size and bandwidth. The ETHASH algorithm demands large memory sizes and bandwidths to prevent mining setups using shared memory systems from achieving linear or superlinear gains in mining efficiency.","title":"First phase: PoW"},{"location":"mvswhitepaper/#second-phase-hbth-dpos","text":"Although PoW mining can help safeguard Metaverse\u2019s system security in the initial years, it has flaws such as energy waste and the tendency for mining centralization. The DPoS algorithm implemented from Graphene can contribute to a high performing blockchain system.","title":"Second phase: HBTH-DPoS"},{"location":"mvswhitepaper/#elliptic-curve-digital-signature-algorithm-ecdsa","text":"ECDSA is a cryptographic algorithm used to ensure that all the information of the exchange are recorded in each block and each block will generate its corresponding digital signature to verify the information validity. The security of ETP will be guaranteed by the ECDSA.","title":"Elliptic Curve Digital Signature Algorithm (ECDSA)"},{"location":"mvswhitepaper/#unspent-transaction-output-utxo","text":"Unlike Ethereum, Metaverse\u2019s native digital token ETP will use Bitcoin\u2019s UTXO (Unspent Transaction Output) model in which all transactions are defined by a set of inputs and outputs, and contain the private key signatures of all current and previous owners of the ETP. These elements come together to form a new UTXO. Separately, we will be testing the use of the account model to handle smart assets. This can help reduce system complexity while retaining the benefits of the UTXO model. The result of this design is that digital assets can be sent and received easily on Metaverse, just like Bitcoin. Smart contracts will only be required when the demand for more complex transactions arise.","title":"Unspent Transaction Output (UTXO)"},{"location":"obtaincertificate/","text":"Obtain certificate Secondary issue certificate and domain certificate are provided after asset is issued. Naming certificate is provided by command issuecert. For issuing asset, please refer to MST issue . Obtain secondary issue certificate and domain certificate Create asset that can be secondary issued by command createasset If the value of option --rate of command createasset is -1 or between [1, 100], then asset that can be secondary issued is created. Command: $ ./mvs-cli createasset Alice passwd1 --symbol MVS.ALICE --volume 1000000000000 --description \"Asset of Alice.\" --issuer Alice --decimalnumber 8 --rate -1 Output: { \"asset\" : { \"address\" : \"\", \"decimal_number\" : 8, \"description\" : \"Asset of Alice.\", \"is_secondaryissue\" : false, \"issuer\" : \"Alice\", \"maximum_supply\" : 1000000000000, \"secondaryissue_threshold\" : 127, \"status\" : \"unissued\", \"symbol\" : \"MVS.ALICE\" } } Issue asset by command issue No domain certificate named MVS exists on Metavase network before Alice issues an asset named MVS.ALICE . So Alice got a domain certificate named MVS after she issued an asset named MVS.ALICE . She also got a secondary issue certificate named MVS.ALICE because the asset MVS.ALICE can be secondary issued. We can find the cert fields value of which are issue or domain from the output below. Command: $ ./mvs-cli issue Alice passwd1 MVS.ALICE Output: { \"transaction\" : { \"hash\" : \"c88bd3914577df14063f8df7b9365d0061ee902a9ab90bf80df541ec41536321\", \"inputs\" : [ { \"address\" : \"MMZAUmJke7f1FEY67dAHUYfmfh2wWC4vFL\", \"previous_output\" : { \"hash\" : \"6ff77f00f50b18f108e6f185c99bf226a0803a0a6e58844d4043c86003de8ef3\", \"index\" : 1 }, \"script\" : \"[ 3044022021d7739ba53653920b02bced24f1d9e0aed5d702188f6a28c2c7371883fc9b0b02204fe7bc03309331b0355cf79600691a63b5ee8f1c64cd8db01321db041614851b01 ] [ 038d7048a4e640a0e0a27ef85d2a7e5b339834cd565ada0d6ea042127732fa105e ]\", \"sequence\" : 4294967295 }, { \"address\" : \"MMZAUmJke7f1FEY67dAHUYfmfh2wWC4vFL\", \"previous_output\" : { \"hash\" : \"19dad273d07090648279817e8dcbce8dc06c9815ee94fa798d8e779cf66a9076\", \"index\" : 0 }, \"script\" : \"[ 304402205e6cb2bd7e9746bc9181ec66043a3244d9f502f03174a384d53853da44f2d2eb022056e19b54d01ae8ad164ca6e856ab7ed12c8c42081c0451cc66c990c08a783be101 ] [ 038d7048a4e640a0e0a27ef85d2a7e5b339834cd565ada0d6ea042127732fa105e ]\", \"sequence\" : 4294967295 }, { \"address\" : \"MMZAUmJke7f1FEY67dAHUYfmfh2wWC4vFL\", \"previous_output\" : { \"hash\" : \"c42114b2626d9a6e82888deade68c82500e1e55494318c2c3eed7f0a065895e9\", \"index\" : 0 }, \"script\" : \"[ 304502210091b393ed73b59d89a37a7d8c2d0145f5f010a3ca29897b9ed0283782cebba7690220489e6564f17f62a9ec5b1f642be030395318f405ffeb4023c08282360070301b01 ] [ 038d7048a4e640a0e0a27ef85d2a7e5b339834cd565ada0d6ea042127732fa105e ]\", \"sequence\" : 4294967295 }, { \"address\" : \"MMZAUmJke7f1FEY67dAHUYfmfh2wWC4vFL\", \"previous_output\" : { \"hash\" : \"cb62c51992f141490ba8934e422a47f5e8d11cf92cbfedbd99bf4247865d6579\", \"index\" : 0 }, \"script\" : \"[ 304402200a152c449de59abbd53bd54cd8164b2b2ede152e8350358b4aa1014f733b75a902200bc64b0edfd4c5cd3667d9b416f4361ea6cf24649aebe06e6d3e93b2fa0b2ce301 ] [ 038d7048a4e640a0e0a27ef85d2a7e5b339834cd565ada0d6ea042127732fa105e ]\", \"sequence\" : 4294967295 } ], \"lock_time\" : \"0\", \"outputs\" : [ { \"address\" : \"MMZAUmJke7f1FEY67dAHUYfmfh2wWC4vFL\", \"attachment\" : { \"address\" : \"MMZAUmJke7f1FEY67dAHUYfmfh2wWC4vFL\", \"decimal_number\" : 8, \"description\" : \"Asset of Alice.\", \"from_did\" : \"\", \"is_secondaryissue\" : false, \"issuer\" : \"Alice\", \"quantity\" : 1000000000000, \"secondaryissue_threshold\" : 127, \"symbol\" : \"MVS.ALICE\", \"to_did\" : \"Alice\", \"type\" : \"asset-issue\" }, \"index\" : 0, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ 95c9a5e647870bbc535d83a3c394ef40d298aa46 ] equalverify checksig\", \"value\" : 0 }, { \"address\" : \"MMZAUmJke7f1FEY67dAHUYfmfh2wWC4vFL\", \"attachment\" : { \"address\" : \"MMZAUmJke7f1FEY67dAHUYfmfh2wWC4vFL\", \"cert\" : \"issue\", \"from_did\" : \"\", \"owner\" : \"Alice\", \"symbol\" : \"MVS.ALICE\", \"to_did\" : \"Alice\", \"type\" : \"asset-cert\" }, \"index\" : 1, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ 95c9a5e647870bbc535d83a3c394ef40d298aa46 ] equalverify checksig\", \"value\" : 0 }, { \"address\" : \"MMZAUmJke7f1FEY67dAHUYfmfh2wWC4vFL\", \"attachment\" : { \"address\" : \"MMZAUmJke7f1FEY67dAHUYfmfh2wWC4vFL\", \"cert\" : \"domain\", \"from_did\" : \"\", \"owner\" : \"Alice\", \"symbol\" : \"MVS\", \"to_did\" : \"Alice\", \"type\" : \"asset-cert\" }, \"index\" : 2, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ 95c9a5e647870bbc535d83a3c394ef40d298aa46 ] equalverify checksig\", \"value\" : 0 }, { \"address\" : \"MMZAUmJke7f1FEY67dAHUYfmfh2wWC4vFL\", \"attachment\" : { \"type\" : \"etp\" }, \"index\" : 3, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ 95c9a5e647870bbc535d83a3c394ef40d298aa46 ] equalverify checksig\", \"value\" : 100000000 } ], \"version\" : \"4\" } } Obtain naming certificate The owner of domain certificate can issue the naming certificate whose domain name is the name of domain certificate by command issuecert . issuecert needs the following paramenters: account_name , account_passwd , to_did , cert_symbol , cert_type . Only naming certificate can be issued now. For example, Alice owns a domain certificate named MVS then she can issue a naming certificate named MVS.BOB to did Alice which belongs to she too. Command: $ ./mvs-cli issuecert Alice passwd1 Alice MVS.BOB naming Output: { \"transaction\" : { \"hash\" : \"578c23781ab4251c02f2987f5ad0cbeb8ed526546877364efe853e5a345549d9\", \"inputs\" : [ { \"address\" : \"MMZAUmJke7f1FEY67dAHUYfmfh2wWC4vFL\", \"previous_output\" : { \"hash\" : \"c88bd3914577df14063f8df7b9365d0061ee902a9ab90bf80df541ec41536321\", \"index\" : 3 }, \"script\" : \"[ 3045022100fef8cf721e972b256241aa983c5ce123be4ce0d50bfaf5c8696e5c17486e133f02203147741b4868e34e4f8a3b32e8b7ef1605582950e80c0cd04eee584989507cff01 ] [ 038d7048a4e640a0e0a27ef85d2a7e5b339834cd565ada0d6ea042127732fa105e ]\", \"sequence\" : 4294967295 }, { \"address\" : \"MMZAUmJke7f1FEY67dAHUYfmfh2wWC4vFL\", \"previous_output\" : { \"hash\" : \"c88bd3914577df14063f8df7b9365d0061ee902a9ab90bf80df541ec41536321\", \"index\" : 2 }, \"script\" : \"[ 3045022100959f7b4e694610c1078b310dbf5ea1cf710175e1349b469239fb79e81ca974f502202bf495d589a5b9ef0341689a8c88bb739762b538cf472422216e0dfc33f51f8101 ] [ 038d7048a4e640a0e0a27ef85d2a7e5b339834cd565ada0d6ea042127732fa105e ]\", \"sequence\" : 4294967295 } ], \"lock_time\" : \"0\", \"outputs\" : [ { \"address\" : \"MMZAUmJke7f1FEY67dAHUYfmfh2wWC4vFL\", \"attachment\" : { \"address\" : \"MMZAUmJke7f1FEY67dAHUYfmfh2wWC4vFL\", \"cert\" : \"naming\", \"from_did\" : \"\", \"owner\" : \"Alice\", \"symbol\" : \"MVS.BOB\", \"to_did\" : \"Alice\", \"type\" : \"asset-cert\" }, \"index\" : 0, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ 95c9a5e647870bbc535d83a3c394ef40d298aa46 ] equalverify checksig\", \"value\" : 0 }, { \"address\" : \"MMZAUmJke7f1FEY67dAHUYfmfh2wWC4vFL\", \"attachment\" : { \"address\" : \"MMZAUmJke7f1FEY67dAHUYfmfh2wWC4vFL\", \"cert\" : \"domain\", \"from_did\" : \"\", \"owner\" : \"Alice\", \"symbol\" : \"MVS\", \"to_did\" : \"Alice\", \"type\" : \"asset-cert\" }, \"index\" : 1, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ 95c9a5e647870bbc535d83a3c394ef40d298aa46 ] equalverify checksig\", \"value\" : 0 }, { \"address\" : \"MMZAUmJke7f1FEY67dAHUYfmfh2wWC4vFL\", \"attachment\" : { \"type\" : \"etp\" }, \"index\" : 2, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ 95c9a5e647870bbc535d83a3c394ef40d298aa46 ] equalverify checksig\", \"value\" : 99990000 } ], \"version\" : \"4\" } } Transfer cert Certificates can be transfered to other DIDs which can be owned by other account by command transfercert . transfercert needs the following paramenters: account_name , account_passwd , to_did , cert_symbol , cert_type . This command suports multi-sign, that means certificates can be transferd from or to DIDs which is multi-signed. In the previous example, Alice issued a naming certificate named MVS.BOB . Now Alice can transfer it to DID Bob which belongs to account Bob. Command: $ ./mvs-cli transfercert Alice passwd1 Bob MVS.BOB naming Output: { \"transaction\" : { \"hash\" : \"0a985f55345cd5ca81df08c263033c34b8895bf18db6435e8b2509ebbe9f4b0f\", \"inputs\" : [ { \"address\" : \"MNz5WH5CH1T44hTpanbG1v1NBjcZXf4je4\", \"previous_output\" : { \"hash\" : \"98f70aba9c690700dd66ec0c8fce2c56c22043d1c20ff76f164170cc10050c70\", \"index\" : 0 }, \"script\" : \"[ 3045022100a0527a44333aa92ed469b34431eff09d31a7eaaf20a7b86b09cd395d69f74c0e02203b28dc32d9db29ee1d398021a0652be0a2b4486b8137471efb29b77a215aa11701 ] [ 02eee915ccdb35cc35583a3ad58be24fe914d754d00cd75641f56cc90fc305e307 ]\", \"sequence\" : 4294967295 }, { \"address\" : \"MMZAUmJke7f1FEY67dAHUYfmfh2wWC4vFL\", \"previous_output\" : { \"hash\" : \"578c23781ab4251c02f2987f5ad0cbeb8ed526546877364efe853e5a345549d9\", \"index\" : 0 }, \"script\" : \"[ 3045022100bada970681995f64fdd8716075f3b4ee7116d63376a5811ed1d897c99283eea3022027cd6761027155b7f892ad4d4944019fdb75ee3b15761e7e9f58738ed0010c0e01 ] [ 038d7048a4e640a0e0a27ef85d2a7e5b339834cd565ada0d6ea042127732fa105e ]\", \"sequence\" : 4294967295 } ], \"lock_time\" : \"0\", \"outputs\" : [ { \"address\" : \"MVdH3pZrjPqgvg51pYfr7ct1hEqL4R25fz\", \"attachment\" : { \"address\" : \"MVdH3pZrjPqgvg51pYfr7ct1hEqL4R25fz\", \"cert\" : \"naming\", \"from_did\" : \"\", \"owner\" : \"Bob\", \"symbol\" : \"MVS.BOB\", \"to_did\" : \"Bob\", \"type\" : \"asset-cert\" }, \"index\" : 0, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ ee51cd6e869195dca48ede01f40a18c275322fbd ] equalverify checksig\", \"value\" : 0 }, { \"address\" : \"MNz5WH5CH1T44hTpanbG1v1NBjcZXf4je4\", \"attachment\" : { \"type\" : \"etp\" }, \"index\" : 1, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ a57805573daf3760779ff5dfc820ba5728e462d2 ] equalverify checksig\", \"value\" : 299990000 } ], \"version\" : \"4\" } }","title":"Obtain Certificate"},{"location":"obtaincertificate/#obtain-certificate","text":"Secondary issue certificate and domain certificate are provided after asset is issued. Naming certificate is provided by command issuecert. For issuing asset, please refer to MST issue .","title":"Obtain certificate"},{"location":"obtaincertificate/#obtain-secondary-issue-certificate-and-domain-certificate","text":"Create asset that can be secondary issued by command createasset If the value of option --rate of command createasset is -1 or between [1, 100], then asset that can be secondary issued is created. Command: $ ./mvs-cli createasset Alice passwd1 --symbol MVS.ALICE --volume 1000000000000 --description \"Asset of Alice.\" --issuer Alice --decimalnumber 8 --rate -1 Output: { \"asset\" : { \"address\" : \"\", \"decimal_number\" : 8, \"description\" : \"Asset of Alice.\", \"is_secondaryissue\" : false, \"issuer\" : \"Alice\", \"maximum_supply\" : 1000000000000, \"secondaryissue_threshold\" : 127, \"status\" : \"unissued\", \"symbol\" : \"MVS.ALICE\" } } Issue asset by command issue No domain certificate named MVS exists on Metavase network before Alice issues an asset named MVS.ALICE . So Alice got a domain certificate named MVS after she issued an asset named MVS.ALICE . She also got a secondary issue certificate named MVS.ALICE because the asset MVS.ALICE can be secondary issued. We can find the cert fields value of which are issue or domain from the output below. Command: $ ./mvs-cli issue Alice passwd1 MVS.ALICE Output: { \"transaction\" : { \"hash\" : \"c88bd3914577df14063f8df7b9365d0061ee902a9ab90bf80df541ec41536321\", \"inputs\" : [ { \"address\" : \"MMZAUmJke7f1FEY67dAHUYfmfh2wWC4vFL\", \"previous_output\" : { \"hash\" : \"6ff77f00f50b18f108e6f185c99bf226a0803a0a6e58844d4043c86003de8ef3\", \"index\" : 1 }, \"script\" : \"[ 3044022021d7739ba53653920b02bced24f1d9e0aed5d702188f6a28c2c7371883fc9b0b02204fe7bc03309331b0355cf79600691a63b5ee8f1c64cd8db01321db041614851b01 ] [ 038d7048a4e640a0e0a27ef85d2a7e5b339834cd565ada0d6ea042127732fa105e ]\", \"sequence\" : 4294967295 }, { \"address\" : \"MMZAUmJke7f1FEY67dAHUYfmfh2wWC4vFL\", \"previous_output\" : { \"hash\" : \"19dad273d07090648279817e8dcbce8dc06c9815ee94fa798d8e779cf66a9076\", \"index\" : 0 }, \"script\" : \"[ 304402205e6cb2bd7e9746bc9181ec66043a3244d9f502f03174a384d53853da44f2d2eb022056e19b54d01ae8ad164ca6e856ab7ed12c8c42081c0451cc66c990c08a783be101 ] [ 038d7048a4e640a0e0a27ef85d2a7e5b339834cd565ada0d6ea042127732fa105e ]\", \"sequence\" : 4294967295 }, { \"address\" : \"MMZAUmJke7f1FEY67dAHUYfmfh2wWC4vFL\", \"previous_output\" : { \"hash\" : \"c42114b2626d9a6e82888deade68c82500e1e55494318c2c3eed7f0a065895e9\", \"index\" : 0 }, \"script\" : \"[ 304502210091b393ed73b59d89a37a7d8c2d0145f5f010a3ca29897b9ed0283782cebba7690220489e6564f17f62a9ec5b1f642be030395318f405ffeb4023c08282360070301b01 ] [ 038d7048a4e640a0e0a27ef85d2a7e5b339834cd565ada0d6ea042127732fa105e ]\", \"sequence\" : 4294967295 }, { \"address\" : \"MMZAUmJke7f1FEY67dAHUYfmfh2wWC4vFL\", \"previous_output\" : { \"hash\" : \"cb62c51992f141490ba8934e422a47f5e8d11cf92cbfedbd99bf4247865d6579\", \"index\" : 0 }, \"script\" : \"[ 304402200a152c449de59abbd53bd54cd8164b2b2ede152e8350358b4aa1014f733b75a902200bc64b0edfd4c5cd3667d9b416f4361ea6cf24649aebe06e6d3e93b2fa0b2ce301 ] [ 038d7048a4e640a0e0a27ef85d2a7e5b339834cd565ada0d6ea042127732fa105e ]\", \"sequence\" : 4294967295 } ], \"lock_time\" : \"0\", \"outputs\" : [ { \"address\" : \"MMZAUmJke7f1FEY67dAHUYfmfh2wWC4vFL\", \"attachment\" : { \"address\" : \"MMZAUmJke7f1FEY67dAHUYfmfh2wWC4vFL\", \"decimal_number\" : 8, \"description\" : \"Asset of Alice.\", \"from_did\" : \"\", \"is_secondaryissue\" : false, \"issuer\" : \"Alice\", \"quantity\" : 1000000000000, \"secondaryissue_threshold\" : 127, \"symbol\" : \"MVS.ALICE\", \"to_did\" : \"Alice\", \"type\" : \"asset-issue\" }, \"index\" : 0, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ 95c9a5e647870bbc535d83a3c394ef40d298aa46 ] equalverify checksig\", \"value\" : 0 }, { \"address\" : \"MMZAUmJke7f1FEY67dAHUYfmfh2wWC4vFL\", \"attachment\" : { \"address\" : \"MMZAUmJke7f1FEY67dAHUYfmfh2wWC4vFL\", \"cert\" : \"issue\", \"from_did\" : \"\", \"owner\" : \"Alice\", \"symbol\" : \"MVS.ALICE\", \"to_did\" : \"Alice\", \"type\" : \"asset-cert\" }, \"index\" : 1, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ 95c9a5e647870bbc535d83a3c394ef40d298aa46 ] equalverify checksig\", \"value\" : 0 }, { \"address\" : \"MMZAUmJke7f1FEY67dAHUYfmfh2wWC4vFL\", \"attachment\" : { \"address\" : \"MMZAUmJke7f1FEY67dAHUYfmfh2wWC4vFL\", \"cert\" : \"domain\", \"from_did\" : \"\", \"owner\" : \"Alice\", \"symbol\" : \"MVS\", \"to_did\" : \"Alice\", \"type\" : \"asset-cert\" }, \"index\" : 2, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ 95c9a5e647870bbc535d83a3c394ef40d298aa46 ] equalverify checksig\", \"value\" : 0 }, { \"address\" : \"MMZAUmJke7f1FEY67dAHUYfmfh2wWC4vFL\", \"attachment\" : { \"type\" : \"etp\" }, \"index\" : 3, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ 95c9a5e647870bbc535d83a3c394ef40d298aa46 ] equalverify checksig\", \"value\" : 100000000 } ], \"version\" : \"4\" } }","title":"Obtain secondary issue certificate and domain certificate"},{"location":"obtaincertificate/#obtain-naming-certificate","text":"The owner of domain certificate can issue the naming certificate whose domain name is the name of domain certificate by command issuecert . issuecert needs the following paramenters: account_name , account_passwd , to_did , cert_symbol , cert_type . Only naming certificate can be issued now. For example, Alice owns a domain certificate named MVS then she can issue a naming certificate named MVS.BOB to did Alice which belongs to she too. Command: $ ./mvs-cli issuecert Alice passwd1 Alice MVS.BOB naming Output: { \"transaction\" : { \"hash\" : \"578c23781ab4251c02f2987f5ad0cbeb8ed526546877364efe853e5a345549d9\", \"inputs\" : [ { \"address\" : \"MMZAUmJke7f1FEY67dAHUYfmfh2wWC4vFL\", \"previous_output\" : { \"hash\" : \"c88bd3914577df14063f8df7b9365d0061ee902a9ab90bf80df541ec41536321\", \"index\" : 3 }, \"script\" : \"[ 3045022100fef8cf721e972b256241aa983c5ce123be4ce0d50bfaf5c8696e5c17486e133f02203147741b4868e34e4f8a3b32e8b7ef1605582950e80c0cd04eee584989507cff01 ] [ 038d7048a4e640a0e0a27ef85d2a7e5b339834cd565ada0d6ea042127732fa105e ]\", \"sequence\" : 4294967295 }, { \"address\" : \"MMZAUmJke7f1FEY67dAHUYfmfh2wWC4vFL\", \"previous_output\" : { \"hash\" : \"c88bd3914577df14063f8df7b9365d0061ee902a9ab90bf80df541ec41536321\", \"index\" : 2 }, \"script\" : \"[ 3045022100959f7b4e694610c1078b310dbf5ea1cf710175e1349b469239fb79e81ca974f502202bf495d589a5b9ef0341689a8c88bb739762b538cf472422216e0dfc33f51f8101 ] [ 038d7048a4e640a0e0a27ef85d2a7e5b339834cd565ada0d6ea042127732fa105e ]\", \"sequence\" : 4294967295 } ], \"lock_time\" : \"0\", \"outputs\" : [ { \"address\" : \"MMZAUmJke7f1FEY67dAHUYfmfh2wWC4vFL\", \"attachment\" : { \"address\" : \"MMZAUmJke7f1FEY67dAHUYfmfh2wWC4vFL\", \"cert\" : \"naming\", \"from_did\" : \"\", \"owner\" : \"Alice\", \"symbol\" : \"MVS.BOB\", \"to_did\" : \"Alice\", \"type\" : \"asset-cert\" }, \"index\" : 0, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ 95c9a5e647870bbc535d83a3c394ef40d298aa46 ] equalverify checksig\", \"value\" : 0 }, { \"address\" : \"MMZAUmJke7f1FEY67dAHUYfmfh2wWC4vFL\", \"attachment\" : { \"address\" : \"MMZAUmJke7f1FEY67dAHUYfmfh2wWC4vFL\", \"cert\" : \"domain\", \"from_did\" : \"\", \"owner\" : \"Alice\", \"symbol\" : \"MVS\", \"to_did\" : \"Alice\", \"type\" : \"asset-cert\" }, \"index\" : 1, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ 95c9a5e647870bbc535d83a3c394ef40d298aa46 ] equalverify checksig\", \"value\" : 0 }, { \"address\" : \"MMZAUmJke7f1FEY67dAHUYfmfh2wWC4vFL\", \"attachment\" : { \"type\" : \"etp\" }, \"index\" : 2, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ 95c9a5e647870bbc535d83a3c394ef40d298aa46 ] equalverify checksig\", \"value\" : 99990000 } ], \"version\" : \"4\" } }","title":"Obtain naming certificate"},{"location":"obtaincertificate/#transfer-cert","text":"Certificates can be transfered to other DIDs which can be owned by other account by command transfercert . transfercert needs the following paramenters: account_name , account_passwd , to_did , cert_symbol , cert_type . This command suports multi-sign, that means certificates can be transferd from or to DIDs which is multi-signed. In the previous example, Alice issued a naming certificate named MVS.BOB . Now Alice can transfer it to DID Bob which belongs to account Bob. Command: $ ./mvs-cli transfercert Alice passwd1 Bob MVS.BOB naming Output: { \"transaction\" : { \"hash\" : \"0a985f55345cd5ca81df08c263033c34b8895bf18db6435e8b2509ebbe9f4b0f\", \"inputs\" : [ { \"address\" : \"MNz5WH5CH1T44hTpanbG1v1NBjcZXf4je4\", \"previous_output\" : { \"hash\" : \"98f70aba9c690700dd66ec0c8fce2c56c22043d1c20ff76f164170cc10050c70\", \"index\" : 0 }, \"script\" : \"[ 3045022100a0527a44333aa92ed469b34431eff09d31a7eaaf20a7b86b09cd395d69f74c0e02203b28dc32d9db29ee1d398021a0652be0a2b4486b8137471efb29b77a215aa11701 ] [ 02eee915ccdb35cc35583a3ad58be24fe914d754d00cd75641f56cc90fc305e307 ]\", \"sequence\" : 4294967295 }, { \"address\" : \"MMZAUmJke7f1FEY67dAHUYfmfh2wWC4vFL\", \"previous_output\" : { \"hash\" : \"578c23781ab4251c02f2987f5ad0cbeb8ed526546877364efe853e5a345549d9\", \"index\" : 0 }, \"script\" : \"[ 3045022100bada970681995f64fdd8716075f3b4ee7116d63376a5811ed1d897c99283eea3022027cd6761027155b7f892ad4d4944019fdb75ee3b15761e7e9f58738ed0010c0e01 ] [ 038d7048a4e640a0e0a27ef85d2a7e5b339834cd565ada0d6ea042127732fa105e ]\", \"sequence\" : 4294967295 } ], \"lock_time\" : \"0\", \"outputs\" : [ { \"address\" : \"MVdH3pZrjPqgvg51pYfr7ct1hEqL4R25fz\", \"attachment\" : { \"address\" : \"MVdH3pZrjPqgvg51pYfr7ct1hEqL4R25fz\", \"cert\" : \"naming\", \"from_did\" : \"\", \"owner\" : \"Bob\", \"symbol\" : \"MVS.BOB\", \"to_did\" : \"Bob\", \"type\" : \"asset-cert\" }, \"index\" : 0, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ ee51cd6e869195dca48ede01f40a18c275322fbd ] equalverify checksig\", \"value\" : 0 }, { \"address\" : \"MNz5WH5CH1T44hTpanbG1v1NBjcZXf4je4\", \"attachment\" : { \"type\" : \"etp\" }, \"index\" : 1, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ a57805573daf3760779ff5dfc820ba5728e462d2 ] equalverify checksig\", \"value\" : 299990000 } ], \"version\" : \"4\" } }","title":"Transfer cert"},{"location":"pillarsfeatures/","text":"PoS and MST Mining Download & Install v0.9.0 MPC1 Please refer to Download wallet to download and install the latest wallet. PoS Mining It is easy to mine PoS block for avatar that has many UTXOs which has at least 1000 ETP. Please follow the steps to start PoS mining: Register a avatar. Lock at least 1000 ETP by call lock with the avatar. The minimum lock height range is 100000. The avatar should holds at least one UTXO which has at least 1000 ETP and over 1000 height maturity. startmining with option -c pos . Operations on fullnode wallet MST Mining MST Issuer MST issuer should specify the MST mining subsidy parameters( --subsidy ) when he issue a MST if he want the MST to be mined. The format of --subsidy parameter is initial:unit32,interval:unit32,base:float . And MST mining reward is calculated by\uff1a initial \\* pow(base, (block_height/interval)) . Example issue: ./mvs-cli issue testacc testacc MST.MST.TEST -s \"initial:300000000,interval:500000,base:0.95\" MST mining reward = 300000000 * pow(0.95, (Current block height - Height when MST issued) / 500000). Operations on Full Node Wallet Miner Miner startmining with option --symbol and the symbol of MST to be mined.","title":"Pillars Features"},{"location":"pillarsfeatures/#pos-and-mst-mining","text":"","title":"PoS and MST Mining"},{"location":"pillarsfeatures/#download-install-v090-mpc1","text":"Please refer to Download wallet to download and install the latest wallet.","title":"Download &amp; Install v0.9.0 MPC1"},{"location":"pillarsfeatures/#pos-mining","text":"It is easy to mine PoS block for avatar that has many UTXOs which has at least 1000 ETP. Please follow the steps to start PoS mining: Register a avatar. Lock at least 1000 ETP by call lock with the avatar. The minimum lock height range is 100000. The avatar should holds at least one UTXO which has at least 1000 ETP and over 1000 height maturity. startmining with option -c pos .","title":"PoS Mining"},{"location":"pillarsfeatures/#operations-on-fullnode-wallet","text":"","title":"Operations on fullnode wallet"},{"location":"pillarsfeatures/#mst-mining","text":"","title":"MST Mining"},{"location":"pillarsfeatures/#mst-issuer","text":"MST issuer should specify the MST mining subsidy parameters( --subsidy ) when he issue a MST if he want the MST to be mined. The format of --subsidy parameter is initial:unit32,interval:unit32,base:float . And MST mining reward is calculated by\uff1a initial \\* pow(base, (block_height/interval)) .","title":"MST Issuer"},{"location":"pillarsfeatures/#example","text":"issue: ./mvs-cli issue testacc testacc MST.MST.TEST -s \"initial:300000000,interval:500000,base:0.95\" MST mining reward = 300000000 * pow(0.95, (Current block height - Height when MST issued) / 500000).","title":"Example"},{"location":"pillarsfeatures/#operations-on-full-node-wallet","text":"","title":"Operations on Full Node Wallet"},{"location":"pillarsfeatures/#miner","text":"Miner startmining with option --symbol and the symbol of MST to be mined.","title":"Miner"},{"location":"privatechain/","text":"Why Build Private Chain Private block chains can be tailored to the specific cases of enterprises and their partners, using transparent mechanisms to build trust and improve efficiency. Private block chain is aimed at users in single entity, or users in the same industry alliance, they need transparency between each other, but they need not be transparent to the public. Private chain can also be used to simulate testing work. Reduce the difficulty by modifying the source code, you can quickly start from the origin of the chain to mining to get rich. With ETPs in hand you can then test the various types of API interface, such as creating / issue assets, send ETP, use multi signature and so on. Of course, you can also implement a more practical private chain with your own needs. The following is the way to build the private chain. How To Build Private Chain 1. Get the Wallet Software You can build MVS Wallet from the source code Of course, you can alse download MVS Wallet binary and setup it directly 2. Modify Config Options For configuration Options, you can see Config Options With reference to the above document, we can build private chains based on Metaverse by setting configuration files without the need to change the code. By modifying the identifier, we can implement different blockchain instances. Developers don\u2019t have to be worried even it runs in the main network mode, because block generation speed is very fast and they can use the CPU to continue mining test. Build Private Chain needs to run at least two mvsds to get consensus. You\u2019d should run each of them on a different computer\u3002NOTE: the computer should be connectable through the network The Config files are as follows\uff1a Config file 1\uff1a [network] identifier = 1234567890 self = 172.100.0.197:5251 seed = 172.100.1.22:5251 [server] log_level = DEBUG mongoose_listen = 0.0.0.0:8820 websocket_listen = 0.0.0.0:8821 Config file 2\uff1a [network] identifier = 1234567890 self = 172.100.1.22:5251 seed = 172.100.0.197:5251 [server] log_level = DEBUG mongoose_listen = 0.0.0.0:8820 websocket_listen = 0.0.0.0:8821 NOTE: the two Config files use a same identifier\uff0c and set its seed to the other one. 3. Run mvsd to verify Firstly\uff0cBecause the configuration file is customized, we need to place it at the default location to make it effective (if the directory does not exist then create it): Windows : %HOMEPATH%\\AppData\\Roaming\\Metaverse Apple OSX : ~/Library/Application\\ Support/Metaverse Linux/Uinx: ~/.metaverse Then\uff0crun mvsd separately on each computer ./mvsd The output is something like the following\uff1a 20180124T130912 INFO [server] mvsd version 0.7.3 20180124T130912 INFO [server] ================= startup ================== 20180124T130912 ERROR [server] ================= startup ================== 20180124T130912 FATAL [server] ================= startup ================== 20180124T130912 INFO [server] Using config file: \"/home/jowen/.metaverse/mvs.conf\" 20180124T130912 INFO [server] Please wait while the server is starting... 20180124T130912 INFO [node] Starting manual session. 20180124T130912 INFO [server] Seeding is complete. 20180124T130912 INFO [http] Http Service listen on 0.0.0.0:8820 20180124T130912 INFO [MONGO] Websocket Service listen on 0.0.0.0:8821 20180124T130912 INFO [node] Node start height is (0). 20180124T130912 INFO [node] Starting inbound session. 20180124T130912 INFO [node] Starting outbound session. 20180124T130912 INFO [server] Bound public query service to tcp://\\*:9091 20180124T130912 INFO [server] Server is started. 4. Execute the client command or request At this point, the private chain has been completed. You can call APIs through JSON-RPC or mvs-cli. You can also add more computers to participate the private chain, as long as the self, identifier and seed is setted rightly in each Config file. The Follwing is some simple examples of API calling, aims to verify the normal state of the private chain. For more information about APIs Interface, please see Command Line Usage and API v2 Usage Get the version information: [jowen@JOWEN bin]\\$ ./mvs-cli getinfo { \"database-version\" : \"0.6.2\", \"difficulty\" : \"1\", \"hash-rate\" : 0, \"height\" : 0, \"is-mining\" : false, \"network-assets-count\" : 0, \"peers\" : 2, \"protocol-version\" : 70012, \"testnet\" : false, \"wallet-account-count\" : 1, \"wallet-version\" : \"0.7.3\" } Get peer information\uff08If no peer exist, that maybe a configuration or network problem\uff09\uff1a [jowen@JOWEN bin]\\$ ./mvs-cli getpeerinfo { \"peers\" : [ \"172.100.1.22:5251\", \"172.100.1.22:33146\" ] } Create account\uff1a [jowen@JOWEN bin]\\$ ./mvs-cli getnewaccount test1 passwd1 { \"default-address\" : \"MAGRQAbQj2uZMfChXqgpJoXwCkDgfw9ZK1\", \"mnemonic\" : \"discover glance limit similar stable comic patient protect media correct sorry capital object foil noise ill beauty teach hole monster half banana enforce lion\" } Start mining to make money\uff1a [jowen@JOWEN bin]\\$ ./mvs-cli startmining test1 passwd1 solo mining started at MKWjVNAGSDjhQmUW9VUwcBNGTscYozNopJ Get the block height\uff08here I use JSON-RPC\uff09\uff1a We can judge from the zero result that this is a pure private chain just inited [jowen@JOWEN bin]\\$ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getheight\",\"params\":[],\"id\":25}' http://127.0.0.1:8820/rpc/v2 { \"id\" : 25, \"jsonrpc\" : \"2.0\", \"result\" : 0 } Wait some minutes and get the block height again: If the result height is not zero it means you have succeedded some mining.(NOTE: the mining work needs time, and the validating block work still needs time, so you may wait more longer) In order to increase the mining speed, you can decrease the difficulty of mining by modifying the source code. This is useful in some situation, like testing Interfaces etc. [jowen@JOWEN bin]\\$ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getheight\",\"params\":[],\"id\":25}' http://127.0.0.1:8820/rpc/v2 { \"id\" : 25, \"jsonrpc\" : \"2.0\", \"result\" : 29999 } OK, when your money is enough, you can use stopmining to stop mining. Stop mining may also need a long time. [jowen@JOWEN bin]\\$ ./mvs-cli startmining test1 passwd1 And, now you can do more APIs calling which you are intersted in. Wish you a good feeling about Metaverse Wallet.","title":"Private Chain"},{"location":"privatechain/#why-build-private-chain","text":"Private block chains can be tailored to the specific cases of enterprises and their partners, using transparent mechanisms to build trust and improve efficiency. Private block chain is aimed at users in single entity, or users in the same industry alliance, they need transparency between each other, but they need not be transparent to the public. Private chain can also be used to simulate testing work. Reduce the difficulty by modifying the source code, you can quickly start from the origin of the chain to mining to get rich. With ETPs in hand you can then test the various types of API interface, such as creating / issue assets, send ETP, use multi signature and so on. Of course, you can also implement a more practical private chain with your own needs. The following is the way to build the private chain.","title":"Why Build Private Chain"},{"location":"privatechain/#how-to-build-private-chain","text":"","title":"How To Build Private Chain"},{"location":"privatechain/#1-get-the-wallet-software","text":"You can build MVS Wallet from the source code Of course, you can alse download MVS Wallet binary and setup it directly","title":"1. Get the Wallet Software"},{"location":"privatechain/#2-modify-config-options","text":"For configuration Options, you can see Config Options With reference to the above document, we can build private chains based on Metaverse by setting configuration files without the need to change the code. By modifying the identifier, we can implement different blockchain instances. Developers don\u2019t have to be worried even it runs in the main network mode, because block generation speed is very fast and they can use the CPU to continue mining test. Build Private Chain needs to run at least two mvsds to get consensus. You\u2019d should run each of them on a different computer\u3002NOTE: the computer should be connectable through the network The Config files are as follows\uff1a Config file 1\uff1a [network] identifier = 1234567890 self = 172.100.0.197:5251 seed = 172.100.1.22:5251 [server] log_level = DEBUG mongoose_listen = 0.0.0.0:8820 websocket_listen = 0.0.0.0:8821 Config file 2\uff1a [network] identifier = 1234567890 self = 172.100.1.22:5251 seed = 172.100.0.197:5251 [server] log_level = DEBUG mongoose_listen = 0.0.0.0:8820 websocket_listen = 0.0.0.0:8821 NOTE: the two Config files use a same identifier\uff0c and set its seed to the other one.","title":"2. Modify Config Options"},{"location":"privatechain/#3-run-mvsd-to-verify","text":"Firstly\uff0cBecause the configuration file is customized, we need to place it at the default location to make it effective (if the directory does not exist then create it): Windows : %HOMEPATH%\\AppData\\Roaming\\Metaverse Apple OSX : ~/Library/Application\\ Support/Metaverse Linux/Uinx: ~/.metaverse Then\uff0crun mvsd separately on each computer ./mvsd The output is something like the following\uff1a 20180124T130912 INFO [server] mvsd version 0.7.3 20180124T130912 INFO [server] ================= startup ================== 20180124T130912 ERROR [server] ================= startup ================== 20180124T130912 FATAL [server] ================= startup ================== 20180124T130912 INFO [server] Using config file: \"/home/jowen/.metaverse/mvs.conf\" 20180124T130912 INFO [server] Please wait while the server is starting... 20180124T130912 INFO [node] Starting manual session. 20180124T130912 INFO [server] Seeding is complete. 20180124T130912 INFO [http] Http Service listen on 0.0.0.0:8820 20180124T130912 INFO [MONGO] Websocket Service listen on 0.0.0.0:8821 20180124T130912 INFO [node] Node start height is (0). 20180124T130912 INFO [node] Starting inbound session. 20180124T130912 INFO [node] Starting outbound session. 20180124T130912 INFO [server] Bound public query service to tcp://\\*:9091 20180124T130912 INFO [server] Server is started.","title":"3. Run mvsd to verify"},{"location":"privatechain/#4-execute-the-client-command-or-request","text":"At this point, the private chain has been completed. You can call APIs through JSON-RPC or mvs-cli. You can also add more computers to participate the private chain, as long as the self, identifier and seed is setted rightly in each Config file. The Follwing is some simple examples of API calling, aims to verify the normal state of the private chain. For more information about APIs Interface, please see Command Line Usage and API v2 Usage Get the version information: [jowen@JOWEN bin]\\$ ./mvs-cli getinfo { \"database-version\" : \"0.6.2\", \"difficulty\" : \"1\", \"hash-rate\" : 0, \"height\" : 0, \"is-mining\" : false, \"network-assets-count\" : 0, \"peers\" : 2, \"protocol-version\" : 70012, \"testnet\" : false, \"wallet-account-count\" : 1, \"wallet-version\" : \"0.7.3\" } Get peer information\uff08If no peer exist, that maybe a configuration or network problem\uff09\uff1a [jowen@JOWEN bin]\\$ ./mvs-cli getpeerinfo { \"peers\" : [ \"172.100.1.22:5251\", \"172.100.1.22:33146\" ] } Create account\uff1a [jowen@JOWEN bin]\\$ ./mvs-cli getnewaccount test1 passwd1 { \"default-address\" : \"MAGRQAbQj2uZMfChXqgpJoXwCkDgfw9ZK1\", \"mnemonic\" : \"discover glance limit similar stable comic patient protect media correct sorry capital object foil noise ill beauty teach hole monster half banana enforce lion\" } Start mining to make money\uff1a [jowen@JOWEN bin]\\$ ./mvs-cli startmining test1 passwd1 solo mining started at MKWjVNAGSDjhQmUW9VUwcBNGTscYozNopJ Get the block height\uff08here I use JSON-RPC\uff09\uff1a We can judge from the zero result that this is a pure private chain just inited [jowen@JOWEN bin]\\$ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getheight\",\"params\":[],\"id\":25}' http://127.0.0.1:8820/rpc/v2 { \"id\" : 25, \"jsonrpc\" : \"2.0\", \"result\" : 0 } Wait some minutes and get the block height again: If the result height is not zero it means you have succeedded some mining.(NOTE: the mining work needs time, and the validating block work still needs time, so you may wait more longer) In order to increase the mining speed, you can decrease the difficulty of mining by modifying the source code. This is useful in some situation, like testing Interfaces etc. [jowen@JOWEN bin]\\$ curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"getheight\",\"params\":[],\"id\":25}' http://127.0.0.1:8820/rpc/v2 { \"id\" : 25, \"jsonrpc\" : \"2.0\", \"result\" : 29999 } OK, when your money is enough, you can use stopmining to stop mining. Stop mining may also need a long time. [jowen@JOWEN bin]\\$ ./mvs-cli startmining test1 passwd1 And, now you can do more APIs calling which you are intersted in. Wish you a good feeling about Metaverse Wallet.","title":"4. Execute the client command or request"},{"location":"querycertificates/","text":"Query certificates Follow commands: listassets , getasset , getaccountasset and getaddressasset , have an option --cert to query information of certificates\u3002 The information of certificate have four fields\uff1a address: address of certificate. cert: type name of certificate. \u201cdomain\u201d, \u201cissue\u201d, \u201cnaming\u201d are supported. owner: DID who owned the certificate. symbol: name of certificate. getasset Query the names of certificates on Metaverse network or display the information of specified certificate. $ ./mvs-cli getasset { \"assets\" : [ \"MVS\", \"MVS.ALICE\", \"MVS.BOB\", ] } $ ./mvs-cli getasset --cert MVS.BOB { \"assetcerts\" : [ { \"address\" : \"MVdH3pZrjPqgvg51pYfr7ct1hEqL4R25fz\", \"cert\" : \"naming\", \"owner\" : \"Bob\", \"symbol\" : \"MVS.BOB\" } ] } listasset Query the information of certificates on Metaverse network or the information of certificates owned by the specified account. $ ./mvs-cli listassets --cert { \"assetcerts\" : [ { \"address\" : \"MMZAUmJke7f1FEY67dAHUYfmfh2wWC4vFL\", \"cert\" : \"domain\", \"owner\" : \"Alice\", \"symbol\" : \"MVS\" }, { \"address\" : \"MMZAUmJke7f1FEY67dAHUYfmfh2wWC4vFL\", \"cert\" : \"issue\", \"owner\" : \"Alice\", \"symbol\" : \"MVS.Alice\" }, { \"address\" : \"MVdH3pZrjPqgvg51pYfr7ct1hEqL4R25fz\", \"cert\" : \"issue\", \"owner\" : \"Bob\", \"symbol\" : \"MVS.BOB\" }, { \"address\" : \"MVdH3pZrjPqgvg51pYfr7ct1hEqL4R25fz\", \"cert\" : \"naming\", \"owner\" : \"Bob\", \"symbol\" : \"MVS.BOB\" }, ] } ./mvs-cli listassets --cert Bob passwd1 { \"assetcerts\" : [ { \"address\" : \"MVdH3pZrjPqgvg51pYfr7ct1hEqL4R25fz\", \"cert\" : \"naming\", \"owner\" : \"Bob\", \"symbol\" : \"MVS.BOB\" } ] } getaccountasset Query the information of certificates owned by the specified account. $ ./mvs-cli getaccountasset Bob passwd1 --cert { \"assetcerts\" : [ { \"address\" : \"MVdH3pZrjPqgvg51pYfr7ct1hEqL4R25fz\", \"cert\" : \"naming\", \"owner\" : \"Bob\", \"symbol\" : \"MVS.BOB\" } ] } $ ./mvs-cli getaccountasset Bob passwd1 MVS.BOB --cert { \"assetcerts\" : [ { \"address\" : \"MVdH3pZrjPqgvg51pYfr7ct1hEqL4R25fz\", \"cert\" : \"naming\", \"owner\" : \"Bob\", \"symbol\" : \"MVS.BOB\" } ] } getaddressasset Query the information of certificates at the specified address. $ ./mvs-cli getaddressasset MD9i7CXfRssTXr3DTtsn22KFyWwaxRLu4f --cert { \"assetcerts\" : [ { \"address\" : \"MVdH3pZrjPqgvg51pYfr7ct1hEqL4R25fz\", \"cert\" : \"naming\", \"owner\" : \"Bob\", \"symbol\" : \"MVS.BOB\" } ] }","title":"Query Certificate"},{"location":"querycertificates/#query-certificates","text":"Follow commands: listassets , getasset , getaccountasset and getaddressasset , have an option --cert to query information of certificates\u3002 The information of certificate have four fields\uff1a address: address of certificate. cert: type name of certificate. \u201cdomain\u201d, \u201cissue\u201d, \u201cnaming\u201d are supported. owner: DID who owned the certificate. symbol: name of certificate.","title":"Query certificates"},{"location":"querycertificates/#getasset","text":"Query the names of certificates on Metaverse network or display the information of specified certificate. $ ./mvs-cli getasset { \"assets\" : [ \"MVS\", \"MVS.ALICE\", \"MVS.BOB\", ] } $ ./mvs-cli getasset --cert MVS.BOB { \"assetcerts\" : [ { \"address\" : \"MVdH3pZrjPqgvg51pYfr7ct1hEqL4R25fz\", \"cert\" : \"naming\", \"owner\" : \"Bob\", \"symbol\" : \"MVS.BOB\" } ] }","title":"getasset"},{"location":"querycertificates/#listasset","text":"Query the information of certificates on Metaverse network or the information of certificates owned by the specified account. $ ./mvs-cli listassets --cert { \"assetcerts\" : [ { \"address\" : \"MMZAUmJke7f1FEY67dAHUYfmfh2wWC4vFL\", \"cert\" : \"domain\", \"owner\" : \"Alice\", \"symbol\" : \"MVS\" }, { \"address\" : \"MMZAUmJke7f1FEY67dAHUYfmfh2wWC4vFL\", \"cert\" : \"issue\", \"owner\" : \"Alice\", \"symbol\" : \"MVS.Alice\" }, { \"address\" : \"MVdH3pZrjPqgvg51pYfr7ct1hEqL4R25fz\", \"cert\" : \"issue\", \"owner\" : \"Bob\", \"symbol\" : \"MVS.BOB\" }, { \"address\" : \"MVdH3pZrjPqgvg51pYfr7ct1hEqL4R25fz\", \"cert\" : \"naming\", \"owner\" : \"Bob\", \"symbol\" : \"MVS.BOB\" }, ] } ./mvs-cli listassets --cert Bob passwd1 { \"assetcerts\" : [ { \"address\" : \"MVdH3pZrjPqgvg51pYfr7ct1hEqL4R25fz\", \"cert\" : \"naming\", \"owner\" : \"Bob\", \"symbol\" : \"MVS.BOB\" } ] }","title":"listasset"},{"location":"querycertificates/#getaccountasset","text":"Query the information of certificates owned by the specified account. $ ./mvs-cli getaccountasset Bob passwd1 --cert { \"assetcerts\" : [ { \"address\" : \"MVdH3pZrjPqgvg51pYfr7ct1hEqL4R25fz\", \"cert\" : \"naming\", \"owner\" : \"Bob\", \"symbol\" : \"MVS.BOB\" } ] } $ ./mvs-cli getaccountasset Bob passwd1 MVS.BOB --cert { \"assetcerts\" : [ { \"address\" : \"MVdH3pZrjPqgvg51pYfr7ct1hEqL4R25fz\", \"cert\" : \"naming\", \"owner\" : \"Bob\", \"symbol\" : \"MVS.BOB\" } ] }","title":"getaccountasset"},{"location":"querycertificates/#getaddressasset","text":"Query the information of certificates at the specified address. $ ./mvs-cli getaddressasset MD9i7CXfRssTXr3DTtsn22KFyWwaxRLu4f --cert { \"assetcerts\" : [ { \"address\" : \"MVdH3pZrjPqgvg51pYfr7ct1hEqL4R25fz\", \"cert\" : \"naming\", \"owner\" : \"Bob\", \"symbol\" : \"MVS.BOB\" } ] }","title":"getaddressasset"},{"location":"raw-tx-cli/","text":"createrawtx Usage: mvs-cli createrawtx [-h] --receivers value --senders value --type value [--deposit value][--fee value] [--message value][--mychange value] [--symbol value] Info: createrawtx Options (named): -d [--deposit] Deposits support [7, 30, 90, 182, 365] days. defaluts to 7 days -f [--fee] Transaction fee. defaults to 10000 ETP bits -h [--help] Get a description and instructions for this command. -i [--message] Message/Information attached to this transaction -m [--mychange] Mychange to this address, includes etp and asset change -n [--symbol] asset name, not specify this option for etp tx -r [--receivers] Send to [address:amount]. amount is asset number if sybol option specified -s [--senders] Send from addresses -t [--type] Transaction type. 0 -- transfer etp, 1 -- deposit etp, 3 -- transfer asset, 6 -- just only send message signrawtx Usage: mvs-cli signrawtx [-h] ACCOUNTNAME ACCOUNTAUTH TRANSACTION Info: signrawtx Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. TRANSACTION The input Base16 transaction to sign. decoderawtx Usage: mvs-cli decoderawtx [-h] TRANSACTION Info: decoderawtx Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): TRANSACTION The input Base16 transaction to sign. sendrawtx Usage: mvs-cli sendrawtx [-h][--fee value] TRANSACTION Info: sendrawtx Options (named): -h [--help] Get a description and instructions for this command. -f [--fee] The max tx fee. default_value 10 etp Arguments (positional): TRANSACTION The input Base16 transaction to broadcast.","title":"Raw Tx (Offline-Sign)"},{"location":"raw-tx-cli/#createrawtx","text":"Usage: mvs-cli createrawtx [-h] --receivers value --senders value --type value [--deposit value][--fee value] [--message value][--mychange value] [--symbol value] Info: createrawtx Options (named): -d [--deposit] Deposits support [7, 30, 90, 182, 365] days. defaluts to 7 days -f [--fee] Transaction fee. defaults to 10000 ETP bits -h [--help] Get a description and instructions for this command. -i [--message] Message/Information attached to this transaction -m [--mychange] Mychange to this address, includes etp and asset change -n [--symbol] asset name, not specify this option for etp tx -r [--receivers] Send to [address:amount]. amount is asset number if sybol option specified -s [--senders] Send from addresses -t [--type] Transaction type. 0 -- transfer etp, 1 -- deposit etp, 3 -- transfer asset, 6 -- just only send message","title":"createrawtx"},{"location":"raw-tx-cli/#signrawtx","text":"Usage: mvs-cli signrawtx [-h] ACCOUNTNAME ACCOUNTAUTH TRANSACTION Info: signrawtx Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required. TRANSACTION The input Base16 transaction to sign.","title":"signrawtx"},{"location":"raw-tx-cli/#decoderawtx","text":"Usage: mvs-cli decoderawtx [-h] TRANSACTION Info: decoderawtx Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): TRANSACTION The input Base16 transaction to sign.","title":"decoderawtx"},{"location":"raw-tx-cli/#sendrawtx","text":"Usage: mvs-cli sendrawtx [-h][--fee value] TRANSACTION Info: sendrawtx Options (named): -h [--help] Get a description and instructions for this command. -f [--fee] The max tx fee. default_value 10 etp Arguments (positional): TRANSACTION The input Base16 transaction to broadcast.","title":"sendrawtx"},{"location":"resetmvsenv/","text":"Reset Metaverse Environment If you can\u2019t startup Metaverse full node wallet, please do as beblow: CAUTION: PLEASE BACKUP YOUR ACCOUNT\u2019s MNEMONIC-PHRASE OF MASTER-KEY AT FIRST Uninstall Metaverse wallet from your device. Copy and paste the below into the path search function on your device\u2019s explorer: # Windows: Explorer %HOMEPATH%\\AppData\\Roaming\\Metaverse # Mac-OSX: Finder => go to folder ~/Library/Application Support/Metaverse # Linux(unix-like): ~/.metaverse Rename the \u2018Metaverse\u2019 folder as \u2018Metaverse.bak\u2019. 3.Install latest version of Metaverse full node wallet.","title":"Reset Metaverse Environment"},{"location":"resetmvsenv/#reset-metaverse-environment","text":"If you can\u2019t startup Metaverse full node wallet, please do as beblow: CAUTION: PLEASE BACKUP YOUR ACCOUNT\u2019s MNEMONIC-PHRASE OF MASTER-KEY AT FIRST Uninstall Metaverse wallet from your device. Copy and paste the below into the path search function on your device\u2019s explorer: # Windows: Explorer %HOMEPATH%\\AppData\\Roaming\\Metaverse # Mac-OSX: Finder => go to folder ~/Library/Application Support/Metaverse # Linux(unix-like): ~/.metaverse Rename the \u2018Metaverse\u2019 folder as \u2018Metaverse.bak\u2019. 3.Install latest version of Metaverse full node wallet.","title":"Reset Metaverse Environment"},{"location":"supernovaavatar/","text":"Avatars Create An Avatar The first main feature introduced by Supernova is the Digital Identity, that is called on Metaverse \u2018Avatar\u2019. To create an Avatar, simply go to the Avatar page, and click on Create Avatar Choose an Avatar name and select the ETP address that will be linked to this address. Create an Avatar cost 1 ETP and this fee has to be payed with the selected address in order to prove that this address belongs to you. Please make sure to have at least 1 ETP on the selected address Once created, you can see all your Avatars and their information (Address history and Certificates) in the Avatar main page In the \u2018Addresses\u2019 page, you can easily recognize the addresses linked to an Avatar from the name and the logo associated Finally, you can see all the Avatars created on the blockchain in the \u201cAll Avatars\u201d page Use your Avatar Your avatar can be used as a Recipient to send and receive ETP or MST. Simply type the Avatar\u2019s name as the recipient, and it will be automatically detected as an Avatar if it is registered on the blockchain On the confirmation page, you can see the address linked to this Avatar. You can double check this address in order to make sure your are sending your transaction to the right recipient","title":"Avatar"},{"location":"supernovaavatar/#avatars","text":"","title":"Avatars"},{"location":"supernovaavatar/#create-an-avatar","text":"The first main feature introduced by Supernova is the Digital Identity, that is called on Metaverse \u2018Avatar\u2019. To create an Avatar, simply go to the Avatar page, and click on Create Avatar Choose an Avatar name and select the ETP address that will be linked to this address. Create an Avatar cost 1 ETP and this fee has to be payed with the selected address in order to prove that this address belongs to you. Please make sure to have at least 1 ETP on the selected address Once created, you can see all your Avatars and their information (Address history and Certificates) in the Avatar main page In the \u2018Addresses\u2019 page, you can easily recognize the addresses linked to an Avatar from the name and the logo associated Finally, you can see all the Avatars created on the blockchain in the \u201cAll Avatars\u201d page","title":"Create An Avatar"},{"location":"supernovaavatar/#use-your-avatar","text":"Your avatar can be used as a Recipient to send and receive ETP or MST. Simply type the Avatar\u2019s name as the recipient, and it will be automatically detected as an Avatar if it is registered on the blockchain On the confirmation page, you can see the address linked to this Avatar. You can double check this address in order to make sure your are sending your transaction to the right recipient","title":"Use your Avatar"},{"location":"testnet/","text":"Testnet The Metaverse testnet is provided by Metaverse for users to develop, debug and test on. The testnet\u2019s network fees are paid using testnet ETP. It is not fungible with real (i.e. mainnet) ETP. You can apply to receive testnet ETP on the official Metaverse website. The testnet\u2019s blockdata is completely independent of the mainnet. The testnet can be used to develop simple functions such as asset registration; once the function is ready it can be migrated to the mainnet. The official Metaverse website has been updated. The Metaverse official website https://mvs.org has added a \u201cTestnet Button\u201d so that users can easily try out the Metaverse Wallet\u2019s functions. Testnet Features Users can experience the Metaverse Wallet without expending their own ETP. Users need not sync the entire blockchain, saving time. Users can experience transferring and issuing assets, and carry out secondary issuances. Robust page and platform compatibility. An improved wallet program that greatly reduces consumption of system resources. Multi-signature addresses and multi-signature transactions. Enhanced wallet UI. Start the full node wallet in testnet mode You need to run the wallet through the command line. mvsd -t Register mvs-cli getnewaccount testaccout testpasswd Start CPU mining. mvs-cli start testaccount testpasswd","title":"Testnet"},{"location":"testnet/#testnet","text":"The Metaverse testnet is provided by Metaverse for users to develop, debug and test on. The testnet\u2019s network fees are paid using testnet ETP. It is not fungible with real (i.e. mainnet) ETP. You can apply to receive testnet ETP on the official Metaverse website. The testnet\u2019s blockdata is completely independent of the mainnet. The testnet can be used to develop simple functions such as asset registration; once the function is ready it can be migrated to the mainnet. The official Metaverse website has been updated. The Metaverse official website https://mvs.org has added a \u201cTestnet Button\u201d so that users can easily try out the Metaverse Wallet\u2019s functions.","title":"Testnet"},{"location":"testnet/#testnet-features","text":"Users can experience the Metaverse Wallet without expending their own ETP. Users need not sync the entire blockchain, saving time. Users can experience transferring and issuing assets, and carry out secondary issuances. Robust page and platform compatibility. An improved wallet program that greatly reduces consumption of system resources. Multi-signature addresses and multi-signature transactions. Enhanced wallet UI.","title":"Testnet Features"},{"location":"testnet/#start-the-full-node-wallet-in-testnet-mode","text":"You need to run the wallet through the command line. mvsd -t Register mvs-cli getnewaccount testaccout testpasswd Start CPU mining. mvs-cli start testaccount testpasswd","title":"Start the full node wallet in testnet mode"},{"location":"transaction-cli/","text":"gettx Usage: mvs-cli gettx [-h] HASH [JSON] Info: gettx alias as fetch-tx/gettransaction Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): JSON Json/Raw format, default is '--json=true'. HASH The Base16 transaction hash of the transaction to get. If not specified the transaction hash is read from STDIN. listtxs Usage: mvs-cli listtxs [-h][--address value] [--height value][--index value] [--limit value][--symbol value] ACCOUNTNAME ACCOUNTAUTH Info: List transactions details of this account. Options (named): -h [--help] Get a description and instructions for this command. -a [--address] Address. -e [--height] Get tx according height eg: -e start-height:end-height will return tx between [start-height, end-height) -i [--index] Page index. -l [--limit] Transaction count per page. -s [--symbol] Asset symbol. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required.","title":"Transaction"},{"location":"transaction-cli/#gettx","text":"Usage: mvs-cli gettx [-h] HASH [JSON] Info: gettx alias as fetch-tx/gettransaction Options (named): -h [--help] Get a description and instructions for this command. Arguments (positional): JSON Json/Raw format, default is '--json=true'. HASH The Base16 transaction hash of the transaction to get. If not specified the transaction hash is read from STDIN.","title":"gettx"},{"location":"transaction-cli/#listtxs","text":"Usage: mvs-cli listtxs [-h][--address value] [--height value][--index value] [--limit value][--symbol value] ACCOUNTNAME ACCOUNTAUTH Info: List transactions details of this account. Options (named): -h [--help] Get a description and instructions for this command. -a [--address] Address. -e [--height] Get tx according height eg: -e start-height:end-height will return tx between [start-height, end-height) -i [--index] Page index. -l [--limit] Transaction count per page. -s [--symbol] Asset symbol. Arguments (positional): ACCOUNTNAME Account name required. ACCOUNTAUTH Account password(authorization) required.","title":"listtxs"},{"location":"upgrademvsenv/","text":"MVS Wallet Upgrade Manual Download the installation package from Metaverse\u2019s official website URL: https://mvs.org/wallet.html Read the release notes URL: https://docs.mvs.org/news/ Exit the running old wallet (ignore this step if no one is running) Backup account and database 4.1 Backup account CAUTION: PLEASE BACKUP YOUR ACCOUNT\u2019s MNEMONIC-PHRASE OF MASTER-KEY AT FIRST. Ref. How To Backup And Import Account 4.2 Backup database Open or enter the following directory: # Windows: Explorer `%HOMEPATH%\\AppData\\Roaming\\Metaverse` # Mac-OSX: Finder => go to folder `~/Library/Application Support/Metaverse` # Linux(unix-like): `~/.metaverse` Copy and paste the whole mainnet directory as a backup. In order to save disk space, you can only backup the account related tables whose table name have prefix account_. Ref. How To Backup And Import Account Related Tables 5 Install latest version of Metaverse full node wallet You can re-install the new wallet by overlay installation, or uninstall the old wallet and then install the new wallet. 6 Startup the new wallet In the intial startup of the new wallet, do not exit soon after startup. Please give 10 minutes or so for the wallet to init or upgrade the database. When the block is beginning to synchronize, you can exit whenever you want. 7 Check the running status of the wallet Mainly check if the wallet is running, and check if the blocks is synchronizing normally. 8 Recover and retry when failed (ignore this step if has no problem in the previous steps) Just replace the mainet database with the backup one, and retry to run the new wallet. If still has problem, please contact the MVS technical support.","title":"Upgrade Metaverse Environment"},{"location":"upgrademvsenv/#mvs-wallet-upgrade-manual","text":"Download the installation package from Metaverse\u2019s official website URL: https://mvs.org/wallet.html Read the release notes URL: https://docs.mvs.org/news/ Exit the running old wallet (ignore this step if no one is running) Backup account and database 4.1 Backup account CAUTION: PLEASE BACKUP YOUR ACCOUNT\u2019s MNEMONIC-PHRASE OF MASTER-KEY AT FIRST. Ref. How To Backup And Import Account 4.2 Backup database Open or enter the following directory: # Windows: Explorer `%HOMEPATH%\\AppData\\Roaming\\Metaverse` # Mac-OSX: Finder => go to folder `~/Library/Application Support/Metaverse` # Linux(unix-like): `~/.metaverse` Copy and paste the whole mainnet directory as a backup. In order to save disk space, you can only backup the account related tables whose table name have prefix account_. Ref. How To Backup And Import Account Related Tables 5 Install latest version of Metaverse full node wallet You can re-install the new wallet by overlay installation, or uninstall the old wallet and then install the new wallet. 6 Startup the new wallet In the intial startup of the new wallet, do not exit soon after startup. Please give 10 minutes or so for the wallet to init or upgrade the database. When the block is beginning to synchronize, you can exit whenever you want. 7 Check the running status of the wallet Mainly check if the wallet is running, and check if the blocks is synchronizing normally. 8 Recover and retry when failed (ignore this step if has no problem in the previous steps) Just replace the mainet database with the backup one, and retry to run the new wallet. If still has problem, please contact the MVS technical support.","title":"MVS Wallet Upgrade Manual"},{"location":"usercertificate/","text":"Use Certificate Certificates are usually used implicitly. For example, domain certificate or naming certificate may be used while issuing asset by command issue ; secondary issue certificate is used while secondary issuing asset by command secondaryissue ; domain certificate is used while issuing naming certificate by command issuecert . Certificates can be used explicitly by command transfercert too. Using naming certificate to create asset In the previous example, Bob got a naming certificate named MVS.BOB from Alice. Now Bob can issue an asset named MVS.BOB . Create asset $ ./mvs-cli createasset Bob passwd1 --symbol MVS.BOB --volume 1000000000000 --description \"Asset of BOB.\" --issuer Bob --decimalnumber 8 --rate -1 { \"asset\" : { \"address\" : \"\", \"decimal_number\" : 8, \"description\" : \"Asset of BOB.\", \"is_secondaryissue\" : false, \"issuer\" : \"Bob\", \"maximum_supply\" : 1000000000000, \"secondaryissue_threshold\" : 127, \"status\" : \"unissued\", \"symbol\" : \"MVS.BOB\" } } Issue asset $ ./mvs-cli issue Bob passwd1 MVS.BOB { \"transaction\" : { \"hash\" : \"3e6084732f35dac309f2243ef890e9455ccf930f1f54be386666e52356961234\", \"inputs\" : [ { \"address\" : \"MVdH3pZrjPqgvg51pYfr7ct1hEqL4R25fz\", \"previous_output\" : { \"hash\" : \"0a985f55345cd5ca81df08c263033c34b8895bf18db6435e8b2509ebbe9f4b0f\", \"index\" : 0 }, \"script\" : \"[ 3045022100b79b10adf94b3cf7dfe33d45e6b65598c3008b348d87363cee429d24f9a0bd74022077ab16d574b0d3c118058316b950c27f1660c7ef2ece3e4bdbdd6b6bf2b7004701 ] [ 0218feb8b4eb5d83d5ca93116a09c1b16f9587db78af950a06c15c1c82e81866df ]\", \"sequence\" : 4294967295 }, { \"address\" : \"MVdH3pZrjPqgvg51pYfr7ct1hEqL4R25fz\", \"previous_output\" : { \"hash\" : \"a0b321d1ce636644fa51f78f3a4a2ea66aa52b623a4759ae5b61b9f57ea4b647\", \"index\" : 1 }, \"script\" : \"[ 3045022100ec6ff9fb6cdd7fb11883d05c43bbbb767111b4efbad2b96b5bfb456e470df54f0220531100981698ff204b76ffc53399de1bf33fbaf4dbd0ca666f57ceaf75bcfbf001 ] [ 0218feb8b4eb5d83d5ca93116a09c1b16f9587db78af950a06c15c1c82e81866df ]\", \"sequence\" : 4294967295 }, { \"address\" : \"MVdH3pZrjPqgvg51pYfr7ct1hEqL4R25fz\", \"previous_output\" : { \"hash\" : \"5be8df2c2e3d2a7ecd6f1963cba046a78a4c959b6eb4d94a8396602d23c2a44a\", \"index\" : 0 }, \"script\" : \"[ 3045022100e2d0c79673293c971b146fb3974ee5d36aa1c1fd8a24a785fe1577d634676df602203f048e25dd9c2920a29ecf2ea60774a8a1f6429b6c0ba1bc712d54757b9e994801 ] [ 0218feb8b4eb5d83d5ca93116a09c1b16f9587db78af950a06c15c1c82e81866df ]\", \"sequence\" : 4294967295 }, { \"address\" : \"MVdH3pZrjPqgvg51pYfr7ct1hEqL4R25fz\", \"previous_output\" : { \"hash\" : \"91290adcfae5b490e0077ea6f2ba4484b4195f187a823023cc0bf829cae66147\", \"index\" : 0 }, \"script\" : \"[ 30440220790e9ac92450ae4bd18420d5d3bb94cdd85f50c30ec54dace549169deb500a7b0220384038a8fe308a1330af337d3f3e3404e62d147b1b00f30a4c4a304a205f2e7901 ] [ 0218feb8b4eb5d83d5ca93116a09c1b16f9587db78af950a06c15c1c82e81866df ]\", \"sequence\" : 4294967295 }, { \"address\" : \"MVdH3pZrjPqgvg51pYfr7ct1hEqL4R25fz\", \"previous_output\" : { \"hash\" : \"e4df769a43a7fb28aa29c2c9809014c04335afd690ab48f5359bcf4f70f94e9a\", \"index\" : 0 }, \"script\" : \"[ 3045022100f1eb735631261c4e7b1e7591f09d999dbcda13efec29f8e350c5ceb3772f7769022077168d79740e4ee1f0af9b5f733855cd70091b9564562d57e571ddcace1f139101 ] [ 0218feb8b4eb5d83d5ca93116a09c1b16f9587db78af950a06c15c1c82e81866df ]\", \"sequence\" : 4294967295 } ], \"lock_time\" : \"0\", \"outputs\" : [ { \"address\" : \"MVdH3pZrjPqgvg51pYfr7ct1hEqL4R25fz\", \"attachment\" : { \"address\" : \"MVdH3pZrjPqgvg51pYfr7ct1hEqL4R25fz\", \"decimal_number\" : 8, \"description\" : \"Asset of BOB.\", \"from_did\" : \"\", \"is_secondaryissue\" : false, \"issuer\" : \"Bob\", \"quantity\" : 1000000000000, \"secondaryissue_threshold\" : 127, \"symbol\" : \"MVS.BOB\", \"to_did\" : \"Bob\", \"type\" : \"asset-issue\" }, \"index\" : 0, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ ee51cd6e869195dca48ede01f40a18c275322fbd ] equalverify checksig\", \"value\" : 0 }, { \"address\" : \"MVdH3pZrjPqgvg51pYfr7ct1hEqL4R25fz\", \"attachment\" : { \"address\" : \"MVdH3pZrjPqgvg51pYfr7ct1hEqL4R25fz\", \"cert\" : \"issue\", \"from_did\" : \"\", \"owner\" : \"Bob\", \"symbol\" : \"MVS.BOB\", \"to_did\" : \"Bob\", \"type\" : \"asset-cert\" }, \"index\" : 1, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ ee51cd6e869195dca48ede01f40a18c275322fbd ] equalverify checksig\", \"value\" : 0 }, { \"address\" : \"MVdH3pZrjPqgvg51pYfr7ct1hEqL4R25fz\", \"attachment\" : { \"address\" : \"MVdH3pZrjPqgvg51pYfr7ct1hEqL4R25fz\", \"cert\" : \"naming\", \"from_did\" : \"\", \"owner\" : \"Bob\", \"symbol\" : \"MVS.BOB\", \"to_did\" : \"Bob\", \"type\" : \"asset-cert\" }, \"index\" : 2, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ ee51cd6e869195dca48ede01f40a18c275322fbd ] equalverify checksig\", \"value\" : 0 }, { \"address\" : \"MVdH3pZrjPqgvg51pYfr7ct1hEqL4R25fz\", \"attachment\" : { \"type\" : \"etp\" }, \"index\" : 3, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ ee51cd6e869195dca48ede01f40a18c275322fbd ] equalverify checksig\", \"value\" : 100000000 } ], \"version\" : \"4\" } }","title":"Use Certificate"},{"location":"usercertificate/#use-certificate","text":"Certificates are usually used implicitly. For example, domain certificate or naming certificate may be used while issuing asset by command issue ; secondary issue certificate is used while secondary issuing asset by command secondaryissue ; domain certificate is used while issuing naming certificate by command issuecert . Certificates can be used explicitly by command transfercert too.","title":"Use Certificate"},{"location":"usercertificate/#using-naming-certificate-to-create-asset","text":"In the previous example, Bob got a naming certificate named MVS.BOB from Alice. Now Bob can issue an asset named MVS.BOB . Create asset $ ./mvs-cli createasset Bob passwd1 --symbol MVS.BOB --volume 1000000000000 --description \"Asset of BOB.\" --issuer Bob --decimalnumber 8 --rate -1 { \"asset\" : { \"address\" : \"\", \"decimal_number\" : 8, \"description\" : \"Asset of BOB.\", \"is_secondaryissue\" : false, \"issuer\" : \"Bob\", \"maximum_supply\" : 1000000000000, \"secondaryissue_threshold\" : 127, \"status\" : \"unissued\", \"symbol\" : \"MVS.BOB\" } } Issue asset $ ./mvs-cli issue Bob passwd1 MVS.BOB { \"transaction\" : { \"hash\" : \"3e6084732f35dac309f2243ef890e9455ccf930f1f54be386666e52356961234\", \"inputs\" : [ { \"address\" : \"MVdH3pZrjPqgvg51pYfr7ct1hEqL4R25fz\", \"previous_output\" : { \"hash\" : \"0a985f55345cd5ca81df08c263033c34b8895bf18db6435e8b2509ebbe9f4b0f\", \"index\" : 0 }, \"script\" : \"[ 3045022100b79b10adf94b3cf7dfe33d45e6b65598c3008b348d87363cee429d24f9a0bd74022077ab16d574b0d3c118058316b950c27f1660c7ef2ece3e4bdbdd6b6bf2b7004701 ] [ 0218feb8b4eb5d83d5ca93116a09c1b16f9587db78af950a06c15c1c82e81866df ]\", \"sequence\" : 4294967295 }, { \"address\" : \"MVdH3pZrjPqgvg51pYfr7ct1hEqL4R25fz\", \"previous_output\" : { \"hash\" : \"a0b321d1ce636644fa51f78f3a4a2ea66aa52b623a4759ae5b61b9f57ea4b647\", \"index\" : 1 }, \"script\" : \"[ 3045022100ec6ff9fb6cdd7fb11883d05c43bbbb767111b4efbad2b96b5bfb456e470df54f0220531100981698ff204b76ffc53399de1bf33fbaf4dbd0ca666f57ceaf75bcfbf001 ] [ 0218feb8b4eb5d83d5ca93116a09c1b16f9587db78af950a06c15c1c82e81866df ]\", \"sequence\" : 4294967295 }, { \"address\" : \"MVdH3pZrjPqgvg51pYfr7ct1hEqL4R25fz\", \"previous_output\" : { \"hash\" : \"5be8df2c2e3d2a7ecd6f1963cba046a78a4c959b6eb4d94a8396602d23c2a44a\", \"index\" : 0 }, \"script\" : \"[ 3045022100e2d0c79673293c971b146fb3974ee5d36aa1c1fd8a24a785fe1577d634676df602203f048e25dd9c2920a29ecf2ea60774a8a1f6429b6c0ba1bc712d54757b9e994801 ] [ 0218feb8b4eb5d83d5ca93116a09c1b16f9587db78af950a06c15c1c82e81866df ]\", \"sequence\" : 4294967295 }, { \"address\" : \"MVdH3pZrjPqgvg51pYfr7ct1hEqL4R25fz\", \"previous_output\" : { \"hash\" : \"91290adcfae5b490e0077ea6f2ba4484b4195f187a823023cc0bf829cae66147\", \"index\" : 0 }, \"script\" : \"[ 30440220790e9ac92450ae4bd18420d5d3bb94cdd85f50c30ec54dace549169deb500a7b0220384038a8fe308a1330af337d3f3e3404e62d147b1b00f30a4c4a304a205f2e7901 ] [ 0218feb8b4eb5d83d5ca93116a09c1b16f9587db78af950a06c15c1c82e81866df ]\", \"sequence\" : 4294967295 }, { \"address\" : \"MVdH3pZrjPqgvg51pYfr7ct1hEqL4R25fz\", \"previous_output\" : { \"hash\" : \"e4df769a43a7fb28aa29c2c9809014c04335afd690ab48f5359bcf4f70f94e9a\", \"index\" : 0 }, \"script\" : \"[ 3045022100f1eb735631261c4e7b1e7591f09d999dbcda13efec29f8e350c5ceb3772f7769022077168d79740e4ee1f0af9b5f733855cd70091b9564562d57e571ddcace1f139101 ] [ 0218feb8b4eb5d83d5ca93116a09c1b16f9587db78af950a06c15c1c82e81866df ]\", \"sequence\" : 4294967295 } ], \"lock_time\" : \"0\", \"outputs\" : [ { \"address\" : \"MVdH3pZrjPqgvg51pYfr7ct1hEqL4R25fz\", \"attachment\" : { \"address\" : \"MVdH3pZrjPqgvg51pYfr7ct1hEqL4R25fz\", \"decimal_number\" : 8, \"description\" : \"Asset of BOB.\", \"from_did\" : \"\", \"is_secondaryissue\" : false, \"issuer\" : \"Bob\", \"quantity\" : 1000000000000, \"secondaryissue_threshold\" : 127, \"symbol\" : \"MVS.BOB\", \"to_did\" : \"Bob\", \"type\" : \"asset-issue\" }, \"index\" : 0, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ ee51cd6e869195dca48ede01f40a18c275322fbd ] equalverify checksig\", \"value\" : 0 }, { \"address\" : \"MVdH3pZrjPqgvg51pYfr7ct1hEqL4R25fz\", \"attachment\" : { \"address\" : \"MVdH3pZrjPqgvg51pYfr7ct1hEqL4R25fz\", \"cert\" : \"issue\", \"from_did\" : \"\", \"owner\" : \"Bob\", \"symbol\" : \"MVS.BOB\", \"to_did\" : \"Bob\", \"type\" : \"asset-cert\" }, \"index\" : 1, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ ee51cd6e869195dca48ede01f40a18c275322fbd ] equalverify checksig\", \"value\" : 0 }, { \"address\" : \"MVdH3pZrjPqgvg51pYfr7ct1hEqL4R25fz\", \"attachment\" : { \"address\" : \"MVdH3pZrjPqgvg51pYfr7ct1hEqL4R25fz\", \"cert\" : \"naming\", \"from_did\" : \"\", \"owner\" : \"Bob\", \"symbol\" : \"MVS.BOB\", \"to_did\" : \"Bob\", \"type\" : \"asset-cert\" }, \"index\" : 2, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ ee51cd6e869195dca48ede01f40a18c275322fbd ] equalverify checksig\", \"value\" : 0 }, { \"address\" : \"MVdH3pZrjPqgvg51pYfr7ct1hEqL4R25fz\", \"attachment\" : { \"type\" : \"etp\" }, \"index\" : 3, \"locked_height_range\" : 0, \"script\" : \"dup hash160 [ ee51cd6e869195dca48ede01f40a18c275322fbd ] equalverify checksig\", \"value\" : 100000000 } ], \"version\" : \"4\" } }","title":"Using naming certificate to create asset"}]}